_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28
register16                        EQU                          register0 + 0x2A

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x78b9
textWorkArea                      EQU                          0x77a0

; Includes
%includePath                      "runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
_entryPoint_                      EQU                          0x0200
_printTime                        EQU                          0x03e9
_blinkenLights                    EQU                          0x041e
_skipAbsX                         EQU                          0x0492
_drawGiga                         EQU                          0x0557
_resetAudio                       EQU                          0x069a
_127                              EQU                          0x06b2
_10                               EQU                          0x06be
_254                              EQU                          0x06cd
_253                              EQU                          0x06f1
_251                              EQU                          0x08ba
_247                              EQU                          0x09ac
_next_0x0000                      EQU                          0x02bf
_repeat_0x0001                    EQU                          0x03b4
_help                             EQU                          0x03db
_endif_0x0002                     EQU                          0x041c
_if_0x0004                        EQU                          0x0437
_endif_0x0003                     EQU                          0x0437
_drawStars                        EQU                          0x0439
_next_0x0005                      EQU                          0x043d
_endif_0x0006                     EQU                          0x0481
_if_0x0007                        EQU                          0x0492
_endif_0x0008                     EQU                          0x04a5
_elseif_0x000a                    EQU                          0x04c6
_elseif_0x000b                    EQU                          0x04d4
_endif_0x000c                     EQU                          0x04df
_endif_0x0009                     EQU                          0x04e7
_newStar                          EQU                          0x04f1
_repeat_0x000d                    EQU                          0x050c
_initStars                        EQU                          0x0543
_next_0x000e                      EQU                          0x0547
_next_0x000f                      EQU                          0x055b
_drawLetter                       EQU                          0x05b5
_next_0x0010                      EQU                          0x05c4
_next_0x0011                      EQU                          0x05cf
_setTime                          EQU                          0x05f8
_if_0x0012                        EQU                          0x063c
_execApp                          EQU                          0x0675
_if_0x0013                        EQU                          0x068d
_beep                             EQU                          0x06a3
_if_0x0014                        EQU                          0x06e2
_if_0x0015                        EQU                          0x08ab
_endif_0x0016                     EQU                          0x08d7
_if_0x0017                        EQU                          0x08f4
_if_0x0018                        EQU                          0x09aa
_endif_0x0019                     EQU                          0x09c9
_if_0x001a                        EQU                          0x09e4
_if_0x001b                        EQU                          0x09f7
_page_0x0300                      EQU                          0x0300
_page_0x0400                      EQU                          0x0400
_page_0x0500                      EQU                          0x0500
_page_0x0600                      EQU                          0x0600
_page_0x08a0                      EQU                          0x08a0
_page_0x09a0                      EQU                          0x09a0

; Constants
_videoZ                           EQU                          0x0100
_startVideo                       EQU                          0x0103
_vBlankStart                      EQU                          0x0104
_vblankExpansion                  EQU                          0x012e
_vPulseInit                       EQU                          0x0135
_sound1                           EQU                          0x0158
_vBlankNormal                     EQU                          0x0191
_vBlankSample                     EQU                          0x0198
_videoA                           EQU                          0x0201
_pixels                           EQU                          0x020a
_sound3                           EQU                          0x02ae
_sound2                           EQU                          0x02b1
_videoB                           EQU                          0x02ca
_videoC                           EQU                          0x02d3
_videoD                           EQU                          0x02dc
_videoE                           EQU                          0x02e9
_videoF                           EQU                          0x02ec
_nopixels                         EQU                          0x02f6
_ENTER                            EQU                          0x02ff
_NEXTY                            EQU                          0x0300
_NEXT                             EQU                          0x0301
_EXIT                             EQU                          0x030b
_RESYNC                           EQU                          0x030c
_LDWI                             EQU                          0x0311
_DEC                              EQU                          0x0314
_MOVQB                            EQU                          0x0316
_LSRB                             EQU                          0x0318
_LD                               EQU                          0x031a
_ADDBI                            EQU                          0x031c
_SPARE0                           EQU                          0x031f
_LDW                              EQU                          0x0321
_POKEI                            EQU                          0x0325
_LSLV                             EQU                          0x0327
_ADDVB                            EQU                          0x0329
_STW                              EQU                          0x032b
_CNVXY                            EQU                          0x032d
_PREFX2                           EQU                          0x032f
_MOVWA                            EQU                          0x0332
_BCC                              EQU                          0x0335
_SUBBI                            EQU                          0x0338
_DEEKV                            EQU                          0x033b
_ARRVW                            EQU                          0x033d
_LDARRW                           EQU                          0x033f
_ADDVI                            EQU                          0x0342
_SUBVI                            EQU                          0x0344
_SUBVB                            EQU                          0x0348
_DJGE                             EQU                          0x034a
_MOVQW                            EQU                          0x034d
_STWM                             EQU                          0x034f
_STARRW                           EQU                          0x0351
_LDARRB                           EQU                          0x0353
_STARRB                           EQU                          0x0355
_STARRI                           EQU                          0x0357
_LDI                              EQU                          0x0359
_PEEKV                            EQU                          0x035b
_ST                               EQU                          0x035e
_POP                              EQU                          0x0363
_MOVB                             EQU                          0x0365
_PEEKA                            EQU                          0x0367
_POKEA                            EQU                          0x0369
_TEQ                              EQU                          0x036b
_TNE                              EQU                          0x036d
_DEEKA                            EQU                          0x036f
_LDWM                             EQU                          0x0372
_PUSH                             EQU                          0x0375
_DOKEI                            EQU                          0x0377
_ARRW                             EQU                          0x0379
_SCRLHR                           EQU                          0x037b
_DOKEA                            EQU                          0x037d
_LUP                              EQU                          0x037f
_ANDI                             EQU                          0x0382
_CALLI                            EQU                          0x0385
_ORI                              EQU                          0x0388
_XORI                             EQU                          0x038c
_DBGE                             EQU                          0x038e
_BRA                              EQU                          0x0390
_INC                              EQU                          0x0393
_INCWA                            EQU                          0x0395
_SPARE1                           EQU                          0x0397
_ADDW                             EQU                          0x0399
_LDNI                             EQU                          0x039c
_DBNE                             EQU                          0x039e
_DEEKR                            EQU                          0x03a0
_PACKAW                           EQU                          0x03a2
_DJNE                             EQU                          0x03a4
_CMPI                             EQU                          0x03a7
_ADDVW                            EQU                          0x03a9
_SUBVW                            EQU                          0x03ab
_PEEK                             EQU                          0x03ad
_PREFX1                           EQU                          0x03b1
_SYS                              EQU                          0x03b4
_SUBW                             EQU                          0x03b8
_JEQ                              EQU                          0x03bb
_JNE                              EQU                          0x03bd
_JLT                              EQU                          0x03bf
_JGT                              EQU                          0x03c1
_JLE                              EQU                          0x03c3
_JGE                              EQU                          0x03c5
_PREFX3                           EQU                          0x03c7
_REENTER                          EQU                          0x03cb
_DEF                              EQU                          0x03cd
_CALL                             EQU                          0x03cf
_TGE                              EQU                          0x03d5
_TLT                              EQU                          0x03d7
_TGT                              EQU                          0x03d9
_TLE                              EQU                          0x03db
_DECWA                            EQU                          0x03dd
_ALLOC                            EQU                          0x03df
_PACKVW                           EQU                          0x03e1
_ADDI                             EQU                          0x03e3
_SUBI                             EQU                          0x03e6
_LSLW                             EQU                          0x03e9
_STLW                             EQU                          0x03ec
_LDLW                             EQU                          0x03ee
_POKE                             EQU                          0x03f0
_DOKE                             EQU                          0x03f3
_DEEK                             EQU                          0x03f6
_ANDW                             EQU                          0x03f8
_ORW                              EQU                          0x03fa
_XORW                             EQU                          0x03fc
_RET                              EQU                          0x03ff
_shiftTable                       EQU                          0x0500
_font32up                         EQU                          0x0700
_font82up                         EQU                          0x0800
_notesTable                       EQU                          0x0900
_noteTrampoline                   EQU                          0x09c0
_STB2                             EQU                          0x2211
_STW2                             EQU                          0x2214
_XCHGB                            EQU                          0x2217
_MOVW                             EQU                          0x2219
_ADDWI                            EQU                          0x221b
_SUBWI                            EQU                          0x221d
_ANDWI                            EQU                          0x221f
_ORWI                             EQU                          0x2221
_XORWI                            EQU                          0x2223
_FNT6X8                           EQU                          0x2225
_FNT4X6                           EQU                          0x2228
_CONDII                           EQU                          0x222a
_CONDBB                           EQU                          0x222c
_CONDIB                           EQU                          0x222f
_CONDBI                           EQU                          0x2232
_XCHGW                            EQU                          0x2234
_OSCPX                            EQU                          0x2237
_SWAPB                            EQU                          0x2239
_SWAPW                            EQU                          0x223c
_NEEKA                            EQU                          0x223f
_NOKEA                            EQU                          0x2242
_ADDVL                            EQU                          0x2245
_SUBVL                            EQU                          0x2248
_ANDVL                            EQU                          0x224b
_ORVL                             EQU                          0x224e
_XORVL                            EQU                          0x2251
_JEQL                             EQU                          0x2254
_JNEL                             EQU                          0x2257
_JLTL                             EQU                          0x225a
_JGTL                             EQU                          0x225d
_JLEL                             EQU                          0x2260
_JGEL                             EQU                          0x2263
_ANDBI                            EQU                          0x2266
_ORBI                             EQU                          0x2269
_XORBI                            EQU                          0x226c
_ANDBK                            EQU                          0x226f
_ORBK                             EQU                          0x2272
_XORBK                            EQU                          0x2275
_JMPI                             EQU                          0x2278
_SUBIW                            EQU                          0x227b
_VADDBW                           EQU                          0x227d
_VSUBBW                           EQU                          0x2280
_VADDBL                           EQU                          0x2283
_VSUBBL                           EQU                          0x2286
_CMPII                            EQU                          0x2289
_IMIDI                            EQU                          0x228b
_PMIDI                            EQU                          0x228e
_PMIDIV                           EQU                          0x2291
_MERGE4                           EQU                          0x2294
_MOVL                             EQU                          0x22cd
_MOVF                             EQU                          0x22d0
_NROL                             EQU                          0x22d3
_NROR                             EQU                          0x22d6
_LSLN                             EQU                          0x2311
_SEXT                             EQU                          0x2313
_NOTW                             EQU                          0x2315
_NEGW                             EQU                          0x2317
_ANDBA                            EQU                          0x2319
_ORBA                             EQU                          0x231c
_XORBA                            EQU                          0x231f
_FREQM                            EQU                          0x2322
_FREQA                            EQU                          0x2324
_FREQI                            EQU                          0x2327
_VOLM                             EQU                          0x2329
_VOLA                             EQU                          0x232c
_MODA                             EQU                          0x232f
_MODI                             EQU                          0x2332
_SMPCPY                           EQU                          0x2334
_CMPHS                            EQU                          0x2337
_CMPHU                            EQU                          0x233a
_LEEKA                            EQU                          0x233d
_LOKEA                            EQU                          0x233f
_FEEKA                            EQU                          0x2341
_FOKEA                            EQU                          0x2343
_MEEKA                            EQU                          0x2345
_MOKEA                            EQU                          0x2347
_LSRVL                            EQU                          0x2349
_LSLVL                            EQU                          0x234c
_INCL                             EQU                          0x234f
_DECL                             EQU                          0x2352
_STPX                             EQU                          0x2354
_PRN4X6                           EQU                          0x2357
_VTBL                             EQU                          0x2359
_OSCZ                             EQU                          0x235c
_LSL8                             EQU                          0x235e
_ADDBA                            EQU                          0x2360
_SUBBA                            EQU                          0x2362
_NOTB                             EQU                          0x2364
_ABSVW                            EQU                          0x2367
_INCW                             EQU                          0x236a
_DECW                             EQU                          0x236c
_WAITVV                           EQU                          0x236e
_LSRV                             EQU                          0x2373
_DEEKRI                           EQU                          0x2375
_SCRLH                            EQU                          0x2377
_MULB                             EQU                          0x237a
_NCOPY                            EQU                          0x23cd
_STLU                             EQU                          0x23d0
_STLS                             EQU                          0x23d3
_NOTL                             EQU                          0x23d5
_NEGL                             EQU                          0x23d8
_NOTE                             EQU                          0x2411
_MIDI                             EQU                          0x2414
_XLA                              EQU                          0x2417
_ADDLP                            EQU                          0x241a
_SUBLP                            EQU                          0x241d
_ANDLP                            EQU                          0x2420
_ORLP                             EQU                          0x2423
_XORLP                            EQU                          0x2426
_CMPLPU                           EQU                          0x2429
_CMPLPS                           EQU                          0x242c
_RANDW                            EQU                          0x242f
_LDPX                             EQU                          0x2431
_ABSW                             EQU                          0x2433
_SGNW                             EQU                          0x2436
_MULB3                            EQU                          0x2439
_MULB5                            EQU                          0x243b
_MULB6                            EQU                          0x243d
_MULB7                            EQU                          0x243f
_MULB8                            EQU                          0x2441
_MULB9                            EQU                          0x2443
_MULB10                           EQU                          0x2445
_WAITVB                           EQU                          0x2447
_MULW3                            EQU                          0x2449
_MULW5                            EQU                          0x244b
_MULW6                            EQU                          0x244d
_MULW7                            EQU                          0x244f
_MULW8                            EQU                          0x2451
_MULW9                            EQU                          0x2453
_MULW10                           EQU                          0x2455
_prn4x6Return                     EQU                          0x3585
_memSize                          EQU                          0x0001
_entropy0                         EQU                          0x0006
_entropy1                         EQU                          0x0007
_videoY                           EQU                          0x0009
_frameCount                       EQU                          0x000e
_serialRaw                        EQU                          0x000f
_buttonState                      EQU                          0x0011
_xoutMask                         EQU                          0x0014
_vPC                              EQU                          0x0016
_vAC                              EQU                          0x0018
_vACH                             EQU                          0x0019
_vLR                              EQU                          0x001a
_vSP                              EQU                          0x001c
_vTmp                             EQU                          0x001d
_romType                          EQU                          0x0021
_sysFn                            EQU                          0x0022
_sysArgs0                         EQU                          0x0024
_sysArgs1                         EQU                          0x0025
_sysArgs2                         EQU                          0x0026
_sysArgs3                         EQU                          0x0027
_sysArgs4                         EQU                          0x0028
_sysArgs5                         EQU                          0x0029
_sysArgs6                         EQU                          0x002a
_sysArgs7                         EQU                          0x002b
_soundTimer                       EQU                          0x002c
_userVars                         EQU                          0x0030
_videoTable                       EQU                          0x0100
_userCode                         EQU                          0x0200
_soundTable                       EQU                          0x0700
_screenMemory                     EQU                          0x0800
_vReset                           EQU                          0x01f0
_wavA                             EQU                          0x00fa
_wavX                             EQU                          0x00fb
_keyL                             EQU                          0x00fc
_keyH                             EQU                          0x00fd
_oscL                             EQU                          0x00fe
_oscH                             EQU                          0x00ff
_maxTicks                         EQU                          0x000f
_qqVgaWidth                       EQU                          0x00a0
_qqVgaHeight                      EQU                          0x0078
_buttonRight                      EQU                          0x0001
_buttonLeft                       EQU                          0x0002
_buttonDown                       EQU                          0x0004
_buttonUp                         EQU                          0x0008
_buttonStart                      EQU                          0x0010
_buttonSelect                     EQU                          0x0020
_buttonB                          EQU                          0x0040
_buttonA                          EQU                          0x0080
_Credits                          EQU                          0x500e
_Clock                            EQU                          0x54f9
_Invader                          EQU                          0x61de
_VideoPoker                       EQU                          0x850e
_TinyBASIC                        EQU                          0xa551
_Statements2                      EQU                          0x0500
_Hexnum                           EQU                          0x05ce
_GetLine2                         EQU                          0x06e8
_Statements5                      EQU                          0x0deb
_Print                            EQU                          0x13a0
_Statements3                      EQU                          0x14a0
_Statements4                      EQU                          0x15a0
_Statements6                      EQU                          0x16a0
_Save                             EQU                          0x17a0
_Newline                          EQU                          0x18a0
_Line                             EQU                          0x19a0
_Line2                            EQU                          0x1aa0
_Buffer                           EQU                          0x1ba0
_BasicProgram                     EQU                          0x1bc0
_Egg                              EQU                          0xb1d9
_SDCard                           EQU                          0xb6c7
_Loader                           EQU                          0xc1ae
_Boot                             EQU                          0xc1d6
_Main                             EQU                          0xcd4e
_Reset                            EQU                          0xde5b
_Command                          EQU                          0x0081
_NUM_APPS                         EQU                          0x000a
_DIV_X                            EQU                          0x0000
_DIV_Y0                           EQU                          0x0018
_DIV_Y1                           EQU                          0x0048
_LIST_X0                          EQU                          0x0018
_LIST_X1                          EQU                          0x0062
_LIST_Y                           EQU                          0x0026
_LIST_DY                          EQU                          0x0008
_CURS_DX                          EQU                          0x0006
_CURS_X                           EQU                          0x0012
_CURS_Y                           EQU                          0x0026
_NUM_BLNKNS                       EQU                          0x0018
_XOUT_MASK                        EQU                          0x0014
_NUM_STARS                        EQU                          0x0020
_STARS_ORG_X                      EQU                          0x0050
_STARS_ORG_Y                      EQU                          0x003c
_GIGA_ORGX                        EQU                          0x000c
_GIGA_ORGY                        EQU                          0x0013
_GIGA_NUM                         EQU                          0x0008

; Global Variables
_y                                EQU                          0x0038
_i                                EQU                          0x003a
_x                                EQU                          0x003c
_t                                EQU                          0x003e
_index                            EQU                          0x0040
_seconds                          EQU                          0x0042
_leds                             EQU                          0x0044
_xv                               EQU                          0x0046
_yv                               EQU                          0x0048

; Local Variables
_help_text                        EQU                          0x00c4
_help_colour                      EQU                          0x00c6
_drawStars_i                      EQU                          0x00c4
_drawStars_xr                     EQU                          0x00c6
_drawStars_yr                     EQU                          0x00c8
_drawStars_xp                     EQU                          0x00ca
_drawStars_yp                     EQU                          0x00cc
_drawStars_ss                     EQU                          0x00ce
_drawStars_pxy                    EQU                          0x00d0
_newStar_i                        EQU                          0x00c4
_initStars_i                      EQU                          0x00c4
_drawLetter_letter                EQU                          0x00c4
_drawLetter_colour                EQU                          0x00c6
_drawLetter_ofsx                  EQU                          0x00c8
_drawLetter_ofsy                  EQU                          0x00ca
_drawLetter_x                     EQU                          0x00cc
_drawLetter_y                     EQU                          0x00ce
_drawLetter_i                     EQU                          0x00d0
_drawLetter_j                     EQU                          0x00d2
_setTime_H                        EQU                          0x00c4
_setTime_M                        EQU                          0x00c6
_setTime_S                        EQU                          0x00c8
_execApp_execAddr                 EQU                          0x00c4
_beep_duration                    EQU                          0x00c4

; Arrays
_execs                            EQU                          0x7eec
_execs                            DW                           0xb6c7 0x54f9 0xa551 0x850e 0x61de 0xc1ae 0x500e 0xb6c7 0xb6c7 0xb6c7 
_blnkns                           EQU                          0x7de0
_blnkns                           DB                           0x0f 0x07 0x03 0x01 0x02 0x04 0x08 0x04 0x02 0x01 0x03 0x07 0x0f 0x0e 0x0c 0x08 0x04 0x02 0x01 0x02 0x04 0x08 0x0c 0x0e 
_star                             EQU                          0x7dc0
_star                             DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_xPos                             EQU                          0x7cc0
_xPos                             DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_yPos                             EQU                          0x7bc0
_yPos                             DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_xVel                             EQU                          0x7ac0
_xVel                             DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_yVel                             EQU                          0x79c0
_yVel                             DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_GIGA_G                           EQU                          0x7daa
_GIGA_G                           DW                           0x000f 0x0000 0x0000 0xfff4 0xfff1 0x0000 0x0000 0x0008 0x000e 0x0000 0x00ff 
_GIGA_I                           EQU                          0x7da4
_GIGA_I                           DW                           0x0000 0xfff8 0x00ff 
_GIGA_DOT                         EQU                          0x7cba
_GIGA_DOT                         DW                           0x0000 0x0000 0x00ff 
_GIGA_A                           EQU                          0x7ca4
_GIGA_A                           DW                           0x000f 0x0000 0x0000 0x0008 0xfff1 0x0000 0x0000 0xfffc 0x000e 0x0000 0x00ff 
_GIGA_T                           EQU                          0x7ba6
_GIGA_T                           DW                           0x0000 0x0000 0x0000 0x0004 0x000f 0x0000 0xfff1 0x0000 0x0000 0x0008 0x000f 0x0000 0x00ff 
_GIGA_R                           EQU                          0x7ab6
_GIGA_R                           DW                           0x0000 0xfff8 0x000f 0x0000 0x00ff 
_GIGA_O                           EQU                          0x7aa4
_GIGA_O                           DW                           0x0000 0xfff8 0x000f 0x0000 0x0000 0x0008 0xfff1 0x0000 0x00ff 
_GIGA_N                           EQU                          0x79b2
_GIGA_N                           DW                           0x0000 0xfff8 0x000f 0x0000 0x0000 0x0008 0x00ff 
_GIGA_XPOS                        EQU                          0x79a0
_GIGA_XPOS                        DW                           0x0000 0x0013 0x0013 0x0017 0x002a 0x003d 0x0050 0x0063 0x0076 
_GIGA_YPOS                        EQU                          0x78ee
_GIGA_YPOS                        DW                           0x0000 0xfffc 0xfff0 0x0000 0xfff4 0xfff0 0xfffc 0xfffc 0xfffc 
_GIGA_ADDR                        EQU                          0x78dc
_GIGA_ADDR                        DW                           0x7daa 0x7da4 0x7cba 0x7daa 0x7ca4 0x7ba6 0x7ab6 0x7aa4 0x79b2 

; Strings
_apps$                            EQU                          0x7faa
_apps$                            DW                           0x7ff8 0x7ff1 0x7fea 0x7fde 0x7fd5 0x7fcd 0x7fc4 0x7fc2 0x7fc0 0x7fbe 
_apps$_0x7ff8                     EQU                          0x7ff8
_apps$_0x7ff8                     DB                           6 'SDCARD' 0
_apps$_0x7ff1                     EQU                          0x7ff1
_apps$_0x7ff1                     DB                           5 'CLOCK' 0
_apps$_0x7fea                     EQU                          0x7fea
_apps$_0x7fea                     DB                           5 'BASIC' 0
_apps$_0x7fde                     EQU                          0x7fde
_apps$_0x7fde                     DB                           10 'VIDEOPOKER' 0
_apps$_0x7fd5                     EQU                          0x7fd5
_apps$_0x7fd5                     DB                           7 'INVADER' 0
_apps$_0x7fcd                     EQU                          0x7fcd
_apps$_0x7fcd                     DB                           6 'LOADER' 0
_apps$_0x7fc4                     EQU                          0x7fc4
_apps$_0x7fc4                     DB                           7 'CREDITS' 0
_apps$_0x7fc2                     EQU                          0x7fc2
_apps$_0x7fc2                     DB                           0 '' 0
_apps$_0x7fc0                     EQU                          0x7fc0
_apps$_0x7fc0                     DB                           0 '' 0
_apps$_0x7fbe                     EQU                          0x7fbe
_apps$_0x7fbe                     DB                           0 '' 0

; Constant Strings
_str_0x7ee0                       EQU                          0x7ee0
_str_0x7ee0                       DB                           10 ' [ARROWS] ' 0
_str_0x7fa3                       EQU                          0x7fa3
_str_0x7fa3                       DB                           5 ' [A] ' 0
_str_0x7ed5                       EQU                          0x7ed5
_str_0x7ed5                       DB                           9 ' [START] ' 0
_str_0x7ed0                       EQU                          0x7ed0
_str_0x7ed0                       DB                           3 'USE' 0
_str_0x7ec5                       EQU                          0x7ec5
_str_0x7ec5                       DB                           9 'TO SELECT' 0
_str_0x7ebe                       EQU                          0x7ebe
_str_0x7ebe                       DB                           5 'PRESS' 0
_str_0x7eb2                       EQU                          0x7eb2
_str_0x7eb2                       DB                           10 'TO EXECUTE' 0
_str_0x7eac                       EQU                          0x7eac
_str_0x7eac                       DB                           4 'HOLD' 0
_str_0x7ea1                       EQU                          0x7ea1
_str_0x7ea1                       DB                           9 'FOR RESET' 0
_str_0x7df8                       EQU                          0x7df8
_str_0x7df8                       DB                           6 'ROMvX0' 0
_str_0x7fa0                       EQU                          0x7fa0
_str_0x7fa0                       DB                           1 'K' 0
_str_0x78c9                       EQU                          0x78c9
_str_0x78c9                       DB                           17 'TTL microcomputer' 0
_str_0x7da2                       EQU                          0x7da2
_str_0x7da2                       DB                           0 '' 0
_str_0x78b6                       EQU                          0x78b6
_str_0x78b6                       DB                           1 ':' 0

; Data

; Time
_timeArray_                       EQU                          0x75f9
_timeArray_                       DB                           00 00 00
_timeString_                      EQU                          0x75ef
_timeString_                      DB                           8 '00:00:00' 0

; Define Bytes
def_bytes_0x75a0                  EQU                          0x75a0
def_bytes_0x75a0                  DB                           144 60 145 64 146 67 147 72 12 128 129 130 131 1 144 60 
def_bytes_0x75b0                  EQU                          0x75b0
def_bytes_0x75b0                  DB                           145 64 146 67 147 72 36 128 129 130 131 208 0 0 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_lut_numericLabs                  EQU                          0x75e1
_lut_numericLabs                  DW                           127 10 254 253 251 247 0x0000
_lut_numericAddrs                 EQU                          0x75d5
_lut_numericAddrs                 DW                           0x06b2 0x06be 0x06cd 0x06f1 0x08ba 0x09ac 
_inputVars_0x7da0                 EQU                          0x7da0
_inputVars_0x7da0                 DW                           0x00c4 
_inputStrs_0x7ca2                 EQU                          0x7ca2
_inputStrs_0x7ca2                 DW                           0x7da2 
_inputTypes_0x7aa0                EQU                          0x7aa0
_inputTypes_0x7aa0                DW                           0x0303 0x0000 
_input_0x7ba0                     EQU                          0x7ba0
_input_0x7ba0                     DW                           0x7da0 0x7ca2 0x7aa0 
_inputVars_0x7ca0                 EQU                          0x7ca0
_inputVars_0x7ca0                 DW                           0x00c6 
_inputStrs_0x78ae                 EQU                          0x78ae
_inputStrs_0x78ae                 DW                           0x78b6 
_inputTypes_0x78aa                EQU                          0x78aa
_inputTypes_0x78aa                DW                           0x0303 0x0000 
_input_0x78b0                     EQU                          0x78b0
_input_0x78b0                     DW                           0x7ca0 0x78ae 0x78aa 
_inputVars_0x78a2                 EQU                          0x78a2
_inputVars_0x78a2                 DW                           0x00c8 
_inputStrs_0x78a0                 EQU                          0x78a0
_inputStrs_0x78a0                 DW                           0x78b6 
_inputTypes_0x75fc                EQU                          0x75fc
_inputTypes_0x75fc                DW                           0x0303 0x0000 
_input_0x78a4                     EQU                          0x78a4
_input_0x78a4                     DW                           0x78a2 0x78a0 0x75fc 

; Lazy Constants

; Code
_entryPoint_                      InitialiseOn                 
%define FONT_4X6
%define TEXT_SCROLL
%define VBLANK_INTERRUPT
%define TIME_HANDLER                                                                        ; INIT

                                  LDWI                         tickTime
                                  STW                          realTimeProc0
                                  CALLI                        setRealTimeProc0
                                  MOVQB                        giga_frameCount, 0xFF
                                  LDWI                         giga_vblankProc
                                  DOKEI                        realTimeStub                 ; init time, NORESET

                                  LDWI                         handleT_mode + 1
                                  POKEI                        13                           ; set TIME_MODE, 13

                                  ANDBI                        miscFlags, 0xfd              ; tscroll off

                                  ORBI                         miscFlags, 0x08              ; tclip off

                                  MOVQB                        fgbgColour, 0
                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                 
                                  ClearVertBlinds                                           ; set BG_COLOUR, 0 : mode 2 : cls

                                  MOVQB                        fgbgColour + 1, 32
                                  MOVQW                        drawRectF_x1, 0
                                  MOVQW                        drawRectF_y1, 0
                                  MOVQW                        drawRectF_x2, 159
                                  MOVQW                        drawRectF_y2, 27
                                  DrawRectF                                                 ; set FG_COLOUR, &h20 : rectf 0, 0, 159, 27

                                  MOVQB                        fgbgColour + 1, 16
                                  MOVQW                        drawRectF_x1, 2
                                  MOVQW                        drawRectF_y1, 2
                                  MOVQW                        drawRectF_x2, 157
                                  MOVQW                        drawRectF_y2, 25
                                  DrawRectF                                                 ; set FG_COLOUR, &h10 : rectf 2, 2, 157, 25

                                  MOVQB                        fgbgColour + 1, 32
                                  MOVQW                        drawRectF_x1, 0
                                  MOVQW                        drawRectF_y1, 91
                                  MOVQW                        drawRectF_x2, 159
                                  MOVQW                        drawRectF_y2, 119
                                  DrawRectF                                                 ; set FG_COLOUR, &h20 : rectf 0, 91, 159, 119

                                  MOVQB                        fgbgColour + 1, 16
                                  MOVQW                        drawRectF_x1, 2
                                  MOVQW                        drawRectF_y1, 93
                                  MOVQW                        drawRectF_x2, 157
                                  MOVQW                        drawRectF_y2, 117
                                  DrawRectF                                                 ; set FG_COLOUR, &h10 : rectf 2, 93, 157, 117

                                  MOVQB                        fgbgColour + 1, 32
                                  MOVQW                        drawRectF_x1, 0
                                  MOVQW                        drawRectF_y1, 28
                                  MOVQW                        drawRectF_x2, 1
                                  MOVQW                        drawRectF_y2, 90
                                  DrawRectF                                                 ; set FG_COLOUR, &h20 : rectf 0, 28, 1, 90

                                  MOVQB                        fgbgColour + 1, 32
                                  MOVQW                        drawRectF_x1, 158
                                  MOVQW                        drawRectF_y1, 28
                                  MOVQW                        drawRectF_x2, 159
                                  MOVQW                        drawRectF_y2, 90
                                  DrawRectF                                                 ; set FG_COLOUR, &h20 : rectf 158, 28, 159, 90

                                  CALLI                        _drawGiga                    ; gosub drawGiga

                                  LDWI                         3072
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h0C00

                                  MOVQW                        _y, 38                       ; y = LIST_Y

                                  MOVQW                        _i, 0                        ; for i=0 to 4

_next_0x0000                      MOVQB                        cursorXY, 24
                                  MOVB                         _y, cursorXY + 1
                                  AtTextCursor                 
                                  LDARRW                       _i, 0x7faa
                                  PrintAcString                
                                  NewLine                                                   ; at LIST_X0, y : print apps$(i)

                                  MOVQB                        cursorXY, 98
                                  MOVB                         _y, cursorXY + 1
                                  AtTextCursor                 
                                  LDW                          _i
                                  ADDI                         5
                                  ARRW                         0x7faa
                                  DEEK                         
                                  PrintAcString                
                                  NewLine                                                   ; at LIST_X1, y : print apps$(i + 5)

                                  ADDVI                        _y, _y, 8                    ; y = y + LIST_DY

                                  ForNextInc                   _i _next_0x0000 4            ; next i

                                  CALLI                        _page_0x0300
_page_0x0300                      LDWI                         10768
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h2A10

                                  MOVQB                        cursorXY, 36
                                  MOVQB                        cursorXY + 1, 95
                                  AtTextCursor                 
                                  PrintString                  _str_0x7ed0
                                  LDWI                         0x7ee0
                                  STW                          0xc4
                                  MOVQW                        0xc6, 0x3f
                                  CALLI                        _help
                                  PrintString                  _str_0x7ec5                  ; at 36, 95  : print "USE";   : call help, @help0$, &h3F : print "TO SELECT";

                                  MOVQB                        cursorXY, 40
                                  MOVQB                        cursorXY + 1, 103
                                  AtTextCursor                 
                                  PrintString                  _str_0x7ebe
                                  LDWI                         0x7fa3
                                  STW                          0xc4
                                  MOVQW                        0xc6, 0x3f
                                  CALLI                        _help
                                  PrintString                  _str_0x7eb2                  ; at 40, 103 : print "PRESS"; : call help, @help1$, &h3F : print "TO EXECUTE";

                                  MOVQB                        cursorXY, 36
                                  MOVQB                        cursorXY + 1, 111
                                  AtTextCursor                 
                                  PrintString                  _str_0x7eac
                                  LDWI                         0x7ed5
                                  STW                          0xc4
                                  MOVQW                        0xc6, 0x3f
                                  CALLI                        _help
                                  PrintString                  _str_0x7ea1
                                  NewLine                                                   ; at 36, 111 : print "HOLD";  : call help, @help2$, &h3F : print "FOR RESET"

                                  LDWI                         5376
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h1500

                                  MOVQB                        cursorXY, 3
                                  MOVQB                        cursorXY + 1, 85
                                  AtTextCursor                 
                                  PrintString                  _str_0x7df8                  ; at 3, 85 : print "ROMvX0";

                                  MOVQB                        cursorXY, 142
                                  MOVQB                        cursorXY + 1, 85
                                  AtTextCursor                 
                                  LDI                          121
                                  PrintAcString                
                                  PrintString                  _str_0x7fa0                  ; at 142, 85 : print string$(&h79);"K";

                                  MOVQW                        _x, 18
                                  MOVQW                        _y, 38                       ; x = CURS_X : y = CURS_Y

                                  LDI                          0
                                  STW                          _t
                                  STW                          _index
                                  STW                          _seconds
                                  STW                          _leds                        ; t = 0 : index = t : seconds = index : leds = seconds

                                  MOVQB                        waveType + 1, 3
                                  LDWI                         30112
                                  PlayMusic                                                 ; play music, &h75a0, 3

                                  CALLI                        _resetAudio                  ; gosub resetAudio

                                  CALLI                        _initStars                   ; call initStars

_repeat_0x0001                    LD                           giga_buttonState
                                  STW                          numericLabel
                                  MOVQW                        defaultLabel, 0
                                  GosubNumeric                                              ; gosub get("BUTTON_STATE")

                                  MOVB                         giga_jiffiesTick, fgbgColour + 1                                                                                         ; set FG_COLOUR, get("JIFFIES")

                                  PACKVW                       _x, _y, cursorXY
                                  AtTextCursor                 
                                  LDI                          62
                                  PrintAcChr                                                ; at x, y : put 62

                                  CALLI                        _printTime                   ; gosub printTime

                                  CALLI                        _drawStars                   ; call drawStars

                                  CALLI                        _blinkenLights               ; gosub blinkenLights

                                  INCWA                        _t                           ; inc t

                                  CALLI                        _repeat_0x0001               ; forever

_help                             PUSH                                                      ; proc help, text, colour

                                  MOVB                         _help_colour, fgbgColour + 1
                                  LDW                          _help_text
                                  PrintAcString                                             ; set FG_COLOUR, colour : print string$(text);

                                  MOVQB                        fgbgColour + 1, 42           ; set FG_COLOUR, &h2A

                                  Return                                                    ; endproc

_printTime                        PUSH                         
                                  LDWI                         _timeArray_ + 0
                                  PEEK                         
                                  XORW                         _seconds
                                  JEQ                          _endif_0x0002                ; if get("TIME_S") <> seconds

                                  LDWI                         _timeArray_ + 0
                                  PEEK                         
                                  CALLI                        _page_0x0400
_page_0x0400                      STW                          _seconds                     ; seconds = get("TIME_S")

                                  LDWI                         5376
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h1500

                                  MOVQB                        cursorXY, 64
                                  MOVQB                        cursorXY + 1, 85
                                  AtTextCursor                 
                                  TimeString                   
                                  PrintString                  _timeString_
                                  NewLine                                                   ; at 64, 85 : print time$

_endif_0x0002                     Return                                                    ; return

_blinkenLights                    PUSH                         
                                  ANDBK                        _t, 0x03
                                  JNE                          _endif_0x0003                ; if (t AND &h03) = 0

                                  LDARRB                       _leds, 0x7de0
                                  ST                           20                           ; poke XOUT_MASK, blnkns(leds)

                                  INCWA                        _leds                        ; inc leds

                                  CMPI                         _leds, 24
                                  JNE                          _if_0x0004
                                  MOVQW                        _leds, 0                     ; if leds = NUM_BLNKNS then leds = 0

_endif_0x0003                     Return                                                    ; return

_drawStars                        PUSH                                                      ; proc drawStars

                                  MOVQW                        _drawStars_i, 0              ; for i=0 to NUM_STARS-1

_next_0x0005                      LDARRW                       _drawStars_i, 0x7cc0
                                  STW                          _drawStars_xp
                                  STW                          _drawStars_xr                ; xp = xPos(i) : xr = xp

                                  LDARRW                       _drawStars_i, 0x7bc0
                                  STW                          _drawStars_yp
                                  STW                          _drawStars_yr                ; yp = yPos(i) : yr = yp

                                  LDARRW                       _drawStars_i, 0x7ac0
                                  STW                          _xv                          ; xv = xVel(i)

                                  LDARRW                       _drawStars_i, 0x79c0
                                  STW                          _yv                          ; yv = yVel(i)

                                  ADDVW                        _drawStars_xp, _xv, _drawStars_xp                                                                                        ; xp = xp + xv

                                  ADDVW                        _drawStars_yp, _yv, _drawStars_yp                                                                                        ; yp = yp + yv

                                  LDW                          _drawStars_xp
                                  STARRW                       _drawStars_i, 0x7cc0         ; xPos(i) = xp

                                  LDW                          _drawStars_yp
                                  STARRW                       _drawStars_i, 0x7bc0         ; yPos(i) = yp

                                  LDW                          _drawStars_yp
                                  ABSW                         
                                  SUBIW                        7936
                                  JGE                          _endif_0x0006                ; if abs(yp) > 31*256

                                  MOVWA                        _drawStars_i, 0xc4
                                  CALLI                        _newStar                     ; call newStar, i

                                  CALLI                        _skipAbsX                    ; goto skipAbsX

_endif_0x0006                     LDW                          _drawStars_xp
                                  ABSW                         
                                  SUBIW                        20224
                                  JGE                          _if_0x0007
                                  MOVWA                        _drawStars_i, 0xc4
                                  CALLI                        _newStar                     ; if abs(xp) > 79*256 then call newStar, i

_skipAbsX                         ADDBI                        _drawStars_xr + 1, _drawStars_pxy, 80                                                                                    ; pxy.lo = xr.hi + STARS_ORG_X

                                  ADDBI                        _drawStars_yr + 1, _drawStars_pxy + 1, 68                                                                                ; pxy.hi = yr.hi + STARS_ORG_Y + 8

                                  PEEKV                        _drawStars_pxy
                                  ANDI                         0x80
                                  JumpFalse                    _endif_0x0008                ; if peek(pxy) AND &h80

                                  LDW                          _drawStars_pxy
                                  POKEI                        0                            ; poke pxy, 0

_endif_0x0008                     LDARRB                       _drawStars_i, 0x7dc0
                                  STW                          _drawStars_ss                ; ss = star(i)

                                  ADDBI                        _drawStars_xp + 1, _drawStars_pxy, 80                                                                                    ; pxy.lo = xp.hi + STARS_ORG_X

                                  ADDBI                        _drawStars_yp + 1, _drawStars_pxy + 1, 68                                                                                ; pxy.hi = yp.hi + STARS_ORG_Y + 8

                                  PEEKV                        _drawStars_pxy
                                  JNE                          _endif_0x0009                ; if peek(pxy) = 0

                                  LDW                          _drawStars_ss
                                  SUBI                         20
                                  JLE                          _elseif_0x000a               ; if ss > 20

                                  LDW                          _drawStars_pxy
                                  POKEI                        191                          ; poke pxy, &h3F OR &h80

                                  CALLI                        _endif_0x000c
_elseif_0x000a                    LDW                          _drawStars_ss
                                  SUBI                         10
                                  JLE                          _elseif_0x000b               ; elseif ss > 10

                                  LDW                          _drawStars_pxy
                                  POKEI                        170                          ; poke pxy, &h2A OR &h80

                                  CALLI                        _endif_0x000c
_elseif_0x000b                    LDW                          _drawStars_ss
                                  SUBI                         4
                                  JLE                          _endif_0x000c                ; elseif ss > 4

                                  LDW                          _drawStars_pxy
                                  POKEI                        149                          ; poke pxy, &h15 OR &h80

_endif_0x000c                     LDW                          _drawStars_ss
                                  ADDI                         1
                                  STARRB                       _drawStars_i, 0x7dc0         ; star(i) = ss + 1

_endif_0x0009                     ForNextInc                   _drawStars_i _next_0x0005 31 ; next i

                                  Return                                                    ; endproc

_newStar                          PUSH                                                      ; proc newStar, i

                                  STARRI                       _newStar_i, 0x7dc0, 0        ; star(i) = 0

                                  CALLI                        _page_0x0500
_page_0x0500                      LDI                          0
                                  STARRW                       _newStar_i, 0x7cc0           ; xPos(i) = 0

                                  LDI                          0
                                  STARRW                       _newStar_i, 0x7bc0           ; yPos(i) = 0

_repeat_0x000d                    Rand                         
                                  ANDWI                        0x07ff
                                  SUBWI                        1024
                                  STARRW                       _newStar_i, 0x7ac0           ; xVel(i) = (rnd(0) AND 2047) - 1024

                                  Rand                         
                                  ANDWI                        0x07ff
                                  SUBWI                        1024
                                  STARRW                       _newStar_i, 0x79c0           ; yVel(i) = (rnd(0) AND 2047) - 1024

                                  LDARRW                       _newStar_i, 0x7ac0
                                  ABSW                         
                                  SUBI                         200
                                  TGT                          0xea
                                  LDARRW                       _newStar_i, 0x79c0
                                  ABSW                         
                                  SUBI                         200
                                  TGT                          giga_vAC
                                  ORW                          0xea
                                  JumpFalse                    _repeat_0x000d               ; until abs(xVel(i)) > 200  OR  abs(yVel(i)) > 200

                                  Return                                                    ; endproc

_initStars                        PUSH                                                      ; proc initStars

                                  MOVQW                        _initStars_i, 0              ; for i=0 to NUM_STARS-1

_next_0x000e                      MOVWA                        _initStars_i, 0xc4
                                  CALLI                        _newStar                     ; call newStar, i

                                  ForNextInc                   _initStars_i _next_0x000e 31 ; next i

                                  Return                                                    ; endproc

_drawGiga                         PUSH                         
                                  MOVQW                        _i, 0                        ; for i=0 to GIGA_NUM

_next_0x000f                      LDARRW                       _i, 0x78dc
                                  STW                          0xc4
                                  MOVQW                        0xc6, 0x00
                                  MOVQW                        0xc8, 0x02
                                  MOVQW                        0xca, 0x02
                                  LDARRW                       _i, 0x79a0
                                  STW                          0xcc
                                  LDARRW                       _i, 0x78ee
                                  STW                          0xce
                                  CALLI                        _drawLetter                  ; call drawLetter, GIGA_ADDR(i), &h00, 2, 2, GIGA_XPOS(i), GIGA_YPOS(i)

                                  LDARRW                       _i, 0x78dc
                                  STW                          0xc4
                                  MOVQW                        0xc6, 0x3f
                                  MOVQW                        0xc8, 0x00
                                  MOVQW                        0xca, 0x00
                                  LDARRW                       _i, 0x79a0
                                  STW                          0xcc
                                  LDARRW                       _i, 0x78ee
                                  STW                          0xce
                                  CALLI                        _drawLetter                  ; call drawLetter, GIGA_ADDR(i), &h3F, 0, 0, GIGA_XPOS(i), GIGA_YPOS(i)

                                  ForNextInc                   _i _next_0x000f 8            ; next i

                                  LDWI                         16144
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h3F10

                                  MOVQB                        cursorXY, 81
                                  MOVQB                        cursorXY + 1, 19
                                  AtTextCursor                 
                                  PrintString                  _str_0x78c9                  ; at 81, 19 : print "TTL microcomputer";

                                  Return                                                    ; return

_drawLetter                       PUSH                                                      ; proc drawLetter, letter, colour, ofsx, ofsy, x, y

                                  MOVB                         _drawLetter_colour, fgbgColour + 1                                                                                       ; set FG_COLOUR, colour

                                  ADDVI                        _drawLetter_ofsy, 0xe8, 1
                                  MOVWA                        _drawLetter_ofsy, _drawLetter_j
                                  ADDVI                        _drawLetter_ofsy, 0xd8, 1    ; for j = ofsy to ofsy + 1

_next_0x0010                      ADDVI                        _drawLetter_ofsx, 0xe8, 1
                                  MOVWA                        _drawLetter_ofsx, _drawLetter_i
                                  ADDVI                        _drawLetter_ofsx, 0xdc, 1    ; for i = ofsx to ofsx + 1

_next_0x0011                      LDI                          12
                                  ADDW                         _drawLetter_x
                                  ADDW                         _drawLetter_i
                                  ST                           cursorXY
                                  LDI                          19
                                  ADDW                         _drawLetter_y
                                  ADDW                         _drawLetter_j
                                  ST                           cursorXY + 1
                                  AtTextCursor                                              ; at GIGA_ORGX + x + i, GIGA_ORGY + y + j

                                  MOVWA                        _drawLetter_letter, drawPoly_addr
                                  DrawPolyRel                                               ; polyR letter

                                  ForNextVarInc                _drawLetter_i _next_0x0011 0xdc                                                                                          ; next i

                                  ForNextVarInc                _drawLetter_j _next_0x0010 0xd8                                                                                          ; next j

                                  Return                                                    ; endproc

_setTime                          PUSH                                                      ; proc setTime

                                  MOVQW                        _t, 0                        ; t = 0

                                  CALLI                        _page_0x0600
_page_0x0600                      MOVQB                        fgbgColour + 1, 21           ; set FG_COLOUR, &h15

                                  MOVQB                        cursorXY, 64
                                  MOVQB                        cursorXY + 1, 85
                                  AtTextCursor                 
                                  LDWI                         0x7ba0
                                  Input                                                     ; at 64, 85  : input H,"";2;

                                  MOVQB                        cursorXY, 72
                                  AtTextCursor                 
                                  LDWI                         0x78b0
                                  Input                                                     ; at 72      : input M,":";2;

                                  MOVQB                        cursorXY, 84
                                  AtTextCursor                 
                                  LDWI                         0x78a4
                                  Input                                                     ; at 84      : input S,":";2;

                                  MOVWA                        _setTime_H, giga_sysArg0
                                  MOVQW                        giga_sysArg2, 13
                                  CALLI                        divide16bit
                                  MOVWA                        giga_sysArg4, _setTime_H
                                  JNE                          _if_0x0012
                                  MOVQW                        _setTime_H, 12               ; H = H MOD 13 : if H = 0 then H = 12

_if_0x0012                        MOVWA                        _setTime_M, giga_sysArg0
                                  MOVQW                        giga_sysArg2, 60
                                  CALLI                        divide16bit
                                  MOVWA                        giga_sysArg4, _setTime_M     ; M = M MOD 60

                                  MOVWA                        _setTime_S, giga_sysArg0
                                  MOVQW                        giga_sysArg2, 60
                                  CALLI                        divide16bit
                                  MOVWA                        giga_sysArg4, _setTime_S     ; S = S MOD 60

                                  LDWI                         _timeArray_ + 2
                                  STW                          register0
                                  LDW                          _setTime_H
                                  POKE                         register0
                                  LDWI                         _timeArray_ + 1
                                  STW                          register0
                                  LDW                          _setTime_M
                                  POKE                         register0
                                  LDWI                         _timeArray_ + 0
                                  STW                          register0
                                  LDW                          _setTime_S
                                  POKE                         register0                    ; set TIME_H, H : set TIME_M, M : set TIME_S, S

                                  ANDBI                        miscFlags, 0xfd              ; tscroll off

                                  Return                                                    ; endproc

_execApp                          PUSH                                                      ; proc execApp

                                  ClearVertBlinds                                           ; cls

                                  LDWI                         502
                                  DOKEI                        0                            ; doke &h01F6, 0

                                  LDWI                         512
                                  STW                          _execApp_execAddr            ; execAddr = &h0200

                                  CMPI                         _index, 5
                                  JNE                          _if_0x0013
                                  MOVQW                        _execApp_execAddr, 168       ; if index = 5 then execAddr = &h00A8

_if_0x0013                        LDARRW                       _index, 0x7eec
                                  STW                          giga_sysArg0
                                  LDW                          _execApp_execAddr
                                  RomExec                                                   ; exec execs(index), execAddr

                                  Return                                                    ; endproc

_resetAudio                       PUSH                                                      ; asm

                                  MOVQB                        waveType+1,2                 ; MOVQB   waveType + 1, 2
                                  CALLI                        resetAudio                   ; CALLI   resetAudio

                                  Return                                                    ; return

_beep                             PUSH                                                      ; proc beep, duration

                                  LDWI                         8200                         ; LDWI    8200
                                  FREQI                        0                            ; FREQI   0
                                  MOVQB                        giga_soundTimer,2            ; MOVQB   giga_soundTimer, 2

                                  MOVQB                        giga_buttonState, 239        ; set BUTTON_STATE, &hEF

                                  Return                                                    ; endproc

_127                              PUSH                         
                                  MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  CALLI                        _execApp                     ; call execApp

                                  Return                                                    ; return

_10                               PUSH                         
                                  MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  CALLI                        _setTime                     ; call setTime

                                  MOVQB                        giga_buttonState, 239        ; set BUTTON_STATE, &hEF

                                  Return                                                    ; return

_254                              PUSH                         
                                  PACKVW                       _x, _y, cursorXY
                                  AtTextCursor                 
                                  LDI                          32
                                  PrintAcChr                                                ; at x, y : put 32

                                  CMPI                         _x, 92
                                  JNE                          _if_0x0014
                                  Return                                                    ; if x = (LIST_X1 - CURS_DX) then return

_if_0x0014                        MOVQW                        _x, 92                       ; x = (LIST_X1 - CURS_DX)

                                  MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  ADDVI                        _index, _index, 5            ; index = index + 5

                                  Return                                                    ; return

_253                              PUSH                         
                                  PACKVW                       _x, _y, cursorXY
                                  AtTextCursor                 
                                  LDI                          32
                                  CALLI                        _page_0x08a0
_page_0x08a0                      PrintAcChr                                                ; at x, y : put 32

                                  CMPI                         _x, 18
                                  JNE                          _if_0x0015
                                  Return                                                    ; if x = (LIST_X0 - CURS_DX) then return

_if_0x0015                        MOVQW                        _x, 18                       ; x = (LIST_X0 - CURS_DX)

                                  MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  SUBVI                        _index, _index, 5            ; index = index - 5

                                  Return                                                    ; return

_251                              PUSH                         
                                  PACKVW                       _x, _y, cursorXY
                                  AtTextCursor                 
                                  LDI                          32
                                  PrintAcChr                                                ; at x, y : put 32

                                  ADDVI                        _y, _y, 8                    ; y = y + LIST_DY

                                  LDW                          _y
                                  SUBI                         70
                                  JLE                          _endif_0x0016                ; if y > (LIST_Y + 4*LIST_DY)

                                  MOVQW                        _y, 70                       ; y = (LIST_Y + 4*LIST_DY)

                                  Return                                                    ; return

_endif_0x0016                     MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  ADDVI                        _index, _index, 1            ; index = index + 1

                                  CMPI                         _x, 18
                                  TEQ                          0xe8
                                  LDW                          _index
                                  SUBI                         4
                                  TGT                          giga_vAC
                                  ANDW                         0xe8
                                  JumpFalse                    _if_0x0017
                                  MOVQW                        _index, 4                    ; if (x = LIST_X0 - CURS_DX) AND index > 4 then index = 4

_if_0x0017                        CMPI                         _x, 92
                                  TEQ                          0xe8
                                  LDW                          _index
                                  SUBI                         9
                                  CALLI                        _page_0x09a0
_page_0x09a0                      TGT                          giga_vAC
                                  ANDW                         0xe8
                                  JumpFalse                    _if_0x0018
                                  MOVQW                        _index, 9                    ; if (x = LIST_X1 - CURS_DX) AND index > 9 then index = 9

_if_0x0018                        Return                                                    ; return

_247                              PUSH                         
                                  PACKVW                       _x, _y, cursorXY
                                  AtTextCursor                 
                                  LDI                          32
                                  PrintAcChr                                                ; at x, y : put 32

                                  SUBVI                        _y, _y, 8                    ; y = y - LIST_DY

                                  LDW                          _y
                                  SUBI                         38
                                  JGE                          _endif_0x0019                ; if y < LIST_Y

                                  MOVQW                        _y, 38                       ; y = LIST_Y

                                  Return                                                    ; return

_endif_0x0019                     MOVQW                        0xc4, 0x02
                                  CALLI                        _beep                        ; call beep, 2

                                  SUBVI                        _index, _index, 1            ; index = index - 1

                                  CMPI                         _x, 18
                                  TEQ                          0xe8
                                  LDW                          _index
                                  TLT                          giga_vAC
                                  ANDW                         0xe8
                                  JumpFalse                    _if_0x001a
                                  MOVQW                        _index, 0                    ; if (x = LIST_X0 - CURS_DX) AND index < 0 then index = 0

_if_0x001a                        CMPI                         _x, 92
                                  TEQ                          0xe8
                                  LDW                          _index
                                  SUBI                         5
                                  TLT                          giga_vAC
                                  ANDW                         0xe8
                                  JumpFalse                    _if_0x001b
                                  MOVQW                        _index, 5                    ; if (x = LIST_X1 - CURS_DX) AND index < 5 then index = 5

_if_0x001b                        Return                                                    ; return

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romExec                           EQU     0x65d2
realTimeStub                      EQU     0x68e0
setRealTimeProc0                  EQU     0x65f4
loadRegs8_15                      EQU     0x68a0
saveRegs8_15                      EQU     0x66bc
divide16bit                       EQU     0x6fa0
gosubNumericLabel                 EQU     0x6ace
scanlineMode                      EQU     0x65ea
waitVBlanks                       EQU     0x65d9
resetVideoFlags                   EQU     0x66f1
initClearFuncs                    EQU     0x66e3
clearVertBlinds                   EQU     0x6ca1
clearCursorRow4x6                 EQU     0x6ea4
drawLine                          EQU     0x74a6
drawRectF                         EQU     0x6fc2
drawPolyRel                       EQU     0x6dc9
setPolyRelFlipX                   EQU     0x74a0
setPolyRelFlipY                   EQU     0x73a0
resetAudio                        EQU     0x67eb
resetMusic                        EQU     0x6da0
playMusic                         EQU     0x6ec7
soundAllOff                       EQU     0x70a3
input                             EQU     0x72a1
inputExt1                         EQU     0x72ba
inputExt2                         EQU     0x75bf
inputCursor                       EQU     0x6ba1
inputKeys                         EQU     0x73a6
inputIntVar                       EQU     0x67c4
inputStrVar                       EQU     0x67b3
inputReturn                       EQU     0x6ccb
inputDelete                       EQU     0x71bc
inputPrint                        EQU     0x69a3
inputNewline                      EQU     0x66d5
printInit                         EQU     0x68ac
printInit4x6                      EQU     0x65e1
printText                         EQU     0x67d7
printChr                          EQU     0x66c8
printChar                         EQU     0x67a4
printChar4x6                      EQU     0x69bc
printClip4x6                      EQU     0x66b0
newLineScroll                     EQU     0x65cc
newLineScroll4x6                  EQU     0x70be
atTextCursor                      EQU     0x6da6
atTextCursor4x6                   EQU     0x71a0
integerStr                        EQU     0x6aa0
tickTime                          EQU     0x66a4
handleTime                        EQU     0x6bcd
timeDigits                        EQU     0x68c1
timeString                        EQU     0x69dd



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register12
defaultLabel        EQU     register13
lutLabs             EQU     register14
lutAddrs            EQU     register15
lutIndex            EQU     register16
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr



romExec             STW     giga_vLR
                    MOVQW   giga_sysFn, SYS_Exec_88             
                    SYS     88                                  


                    
                    
realTimeStub        RET                                         
                    ALLOC   -2
                    LDW     giga_sysArg6                        
                    STLW    0

realTimeStub0       CALLI   0x0000                              

realTimeStub1       BRA     realTS_exit
                    RET                                         

realTimeStub2       BRA     realTS_exit
                    RET                                         

realTS_exit         LDLW    0
                    STW     giga_sysArg6                        
                    ALLOC   2

realTS_rti          POP
                    MOVQB   giga_frameCount, 255                
                    LDWI    &h0400
                    LUP     0x00                                


setRealTimeProc0    LDWI    realTimeStub
                    POKEI   0x75                                
                    LDWI    realTimeStub0 + 1
                    DOKEA   realTimeProc0                       
                    RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    
divide16bit         LDW     giga_sysArg0                        
                    XORW    giga_sysArg2                        
                    STW     mathSign
                    ABSVW   giga_sysArg0
                    ABSVW   giga_sysArg2
                    MOVQW   giga_sysFn, SYS_Divide_s16_vX_80
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     80
                    LDW     mathSign
                    BGE     divide16_exit
                    NEGW    giga_sysArg0
                    
divide16_exit       LDW     giga_sysArg0
                    RET


                    
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs

gosubNL_loop        DEEKV   lutIndex
                    BNE     gosubNL_cont                        
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                        

gosubNL_exit        POP
                    RET

gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    ADDBI   lutIndex, lutIndex, 2
                    BRA     gosubNL_loop                        

gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                            
                    POP
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cycx     EQU     register0
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register16

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
%if FONT_BOTH
                    MOVQW   cursorXY, giga_CursorX              
%endif
%if FONT_6X8
                    MOVQW   cursorXY, giga_CursorX              
%endif
%if FONT_4X6
                    MOVQW   cursorXY, 0                         
%endif
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET


drawRectF           LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    SUBVW   drawRectF_y2, drawRectF_y1, drawRectF_ycnt 
                    BGE     drawRFY_cont
                    MOVB    drawRectF_y2, drawRectF_y1
                    NEGW    drawRectF_ycnt                              
                    
drawRFY_cont        ADDBI   drawRectF_y1, drawRectF_y1, 8               
                    INC     drawRectF_ycnt                              
                    LD      drawRectF_x2
                    SUBW    drawRectF_x1
                    BGE     drawRFX_cont                                
                    MOVB    drawRectF_x2, drawRectF_x1                  
                    NEGW    giga_vAC                                    
                    
drawRFX_cont        ADDI    1                                           
                    ST      drawRectF_xcnt
                    MOVB    fgbgColour + 1, giga_sysArg1                
                    MOVB    drawRectF_y1, giga_sysArg3                  
                    
drawRF_loop         MOVB    drawRectF_xcnt, giga_sysArg0                
                    MOVB    drawRectF_x1, giga_sysArg2                  
                    SYS     54                                          
                    INC     giga_sysArg3
                    DBNE    drawRectF_ycnt, drawRF_loop
                    RET



drawLine            PUSH
                    SUBVW   drawLine_x2, drawLine_x1, drawLine_sx       
                    SGNW
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                                
                    ABSVW   drawLine_sx                                 
                    SUBVW   drawLine_y2, drawLine_y1, drawLine_sy       
                    STW     drawLine_h                                  
                    SGNW
                    STW     drawLine_dy1                                
                    ABSVW   drawLine_sy                                 
                    MOVQW   drawLine_dy2, 0
                    LDW     drawLine_sx
                    SUBW    drawLine_sy
                    BGE     drawL_ext                                   
                    MOVQW   drawLine_dx2, 0                             
                    XCHGB   drawLine_sx, drawLine_sy                    
                    LDW     drawLine_h
                    SGNW    
                    STW     drawLine_dy2                                

drawL_ext           CNVXY   drawLine_x1, drawLine_y1, drawLine_xy1      
                    CNVXY   drawLine_x2, drawLine_y2, drawLine_xy2      
                    LD      drawLine_sx
                    LSRB    giga_vAC
                    ADDI    1
                    STW     drawLine_num                                
                    STW     drawLine_count                              
                    
                    LSL8    drawLine_dy1
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                               
    
                    LSL8    drawLine_dy2
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                               
                    
                    MOVQW   giga_sysFn, SYS_DrawLine_vX_86              
                    SYS     86                                          
                    POP
                    RET




drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    DEEKV+  drawPoly_addr
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                                 
                    STW     drawLine_x2
                    ST      cursorXY
                    DEEKV+  drawPoly_addr
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                                 
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    CALLI   drawLine
                    BRA     drawPR_loop
                    
drawPR_exit         MOVQB   drawPoly_mode, 0x99                         
                    CALLI   setPolyRelFlipX
                    CALLI   setPolyRelFlipY                             
                    POP
                    RET


setPolyRelFlipX     LDWI    drawPR_x2
                    POKEA   drawPoly_mode
                    RET


setPolyRelFlipY     LDWI    drawPR_y2
                    POKEA   drawPoly_mode
                    RET



midiId              EQU     register0
audioAddr           EQU     register1
waveType            EQU     register2
chnCount            EQU     register3
midiNote            EQU     register4                           
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


resetAudio          PUSH
                    CALLI   soundAllOff
                    POP
                    LD      waveType + 1
                    MODI   0                                    
                    MODI   1                                    
                    MODI   2                                    
                    MODI   3                                    
                    RET


resetMusic          PUSH
                    CALLI   resetAudio
                    POP
                    RET



waitVBlanks         WAITVV  frameCountPrev
                    DJNE    waitVBlankNum, waitVBlanks
                    RET


playMusic           PUSH
                    
playN_process       PEEKV+  musicStream                         
                    ST      musicCommand
                    ANDI    0xF0
                    XORI    0x90                                
                    BNE     playN_endnote
                    PEEKV+  musicStream                         
                    MIDI                                        
                    FREQM   musicCommand
                    BRA     playN_process
                    
playN_endnote       XORI    0x10                                
                    BNE     playN_segment
                    FREQM   musicCommand         			    
                    BRA     playN_process

playN_segment       XORI    0x50                                
                    BNE     playN_delay
                    DEEKV   musicStream                         
                    STW     musicStream                         
                    BNE     playN_process                       
                    POP
                    RET

playN_delay         LD      musicCommand
                    ST      giga_soundTimer                     
                    STW     waitVBlankNum
                    CALLI   waitVBlanks
                    BRA     playN_process


soundAllOff         LDI     0
                    FREQI   0                                   
                    FREQI   1                                   
                    FREQI   2                                   
                    FREQI   3                                   
                    OSCZ    0                                   
                    OSCZ    1                                   
                    OSCZ    2                                   
                    OSCZ    3                                   
                    RET



inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14
inpSndChan          EQU     register15
input               PUSH
                    STW     inpLutAddr
                    DEEKV+  inpLutAddr
                    STW     inpVarsAddr                         
                    DEEKV+  inpLutAddr
                    STW     inpStrsAddr                         
                    DEEKV   inpLutAddr
                    STW     inpTypesAddr                        
                    ANDBI   miscFlags, MISC_ENABLE_SCROLL_MSK   
                    MOVB    giga_serialRaw, serialRawPrev       
                    CALLI   inputExt1                           




swpSrcAddr          EQU     register0
swpDstAddr          EQU     register1
swpTmpData          EQU     register2
swapCount           EQU     register3
swpTmpAddr          EQU     register8
cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        
regsAddr            EQU     giga_sysArg6                        


                    
saveRegs8_15        LDWI    regsWorkArea
                    MOKEA   register8
                    ADDI    8
                    MOKEA   register12
                    RET



                    
loadRegs8_15        LDWI    regsWorkArea
                    MEEKA   register8
                    ADDI    8
                    MEEKA   register12
                    RET



inputExt1           DEEKV+  inpTypesAddr
                    BEQ     inputE1_exit                        
                    STW     inpTypeData                         
                    ANDI    0x40
                    BEQ     inputE1_print                       
                    CALLI   inputNewline                        
                    
inputE1_print       CALLI   saveRegs8_15
                    DEEKV+  inpStrsAddr
                    CALLI   printText                           
                    CALLI   loadRegs8_15
                    ANDBK   inpTypeData, 0x80
                    BEQ     inputE1_skip                        
                    CALLI   inputNewline                        
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr                         
                    MOVQW   inpTextOfs, 0                       
                    LDWI    textWorkArea
                    STW     inpTextEnd                          
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd                          
                    
                    MOVWA   cursorXY, inpCursXYBak
                    STW     inpPrnXYBak
                    CALLI   inputExt2                           

inputE1_exit        ORBI    miscFlags, MISC_ENABLE_SCROLL_BIT   
                    POP
                    RET




inputExt2           CALLI   saveRegs8_15
                    LDI     127
                    STW     textChr
                    CALLI   inputCursor
                    CALLI   loadRegs8_15
                    CALLI   inputKeys
                    BEQ     inputExt2                           

                    CALLI   inputExt1                           


inputCursor         PUSH
                    XORI    127
                    BNE     inputC_skip                         
                    ANDBK   giga_jiffiesTick, 32
                    BNE     inputC_skip
                    MOVQW   textChr, 32                         

inputC_skip         MOVWA   inpCursXYBak, cursorXY              
                    LDW     textChr
                    CALLI   printChr
                    POP
                    RET

inputBeep           CMPI    inpKeyBak, 0xFF
                    BEQ     inputB_exit
                    LDWI    8200
                    LSRB    giga_vAC
                    FREQI   0
                    MOVQB   giga_soundTimer, 2
                    
inputB_exit         RET





inputKeys           PUSH
                    MOVB    giga_serialRaw, inpKeyBak           
                    LD      serialRawPrev
                    SUBBA   inpKeyBak
                    BEQ     inputK_exit                         
                    CALLI   inputBeep
                    MOVB    inpKeyBak, serialRawPrev            
                    CMPI    inpKeyBak, 127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    CALLI   inputDelete                         
                    
inputK_ret          CMPI    inpKeyBak, 10
                    BNE     inputK_char
                    CALLI   inputReturn                         
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit                         
                    CMPI    inpKeyBak, 32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKEV+  inpTextAddr                         
                    LDW     inpTextAddr
                    POKEI   0                                   
                    CMPI    inpCursXYBak, giga_xres - 11
                    BLT     inputK_advance                      
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    CONDII  4, 6                                
                    
inputK_print        STW     inpCursXYOfs                        
                    CALLI   inputPrint                          
                    
inputK_exit         LDI     0                                   
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11                          
                    DEEKV+  inpVarsAddr
                    STW     register12                          

inputS_copy         PEEKV+  register11
                    POKEV+  register12
                    BNE     inputS_copy                         
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr                          
                    DEEKV+  inpVarsAddr
                    STW     register12                          
                    LDW     intSrcAddr
                    CALLI   integerStr
                    DOKE    register12                          
                    POP
                    RET


inputReturn         CALLI   saveRegs8_15
                    MOVQW   textChr, 32
                    CALLI   inputCursor
                    CALLI   loadRegs8_15
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0                           
                    ADDW    register0
                    ADDI    1
                    POKEI   0                                   
                    ANDBK   inpTypeData, 0x3F                   
                    SUBI    5                                   
                    BNE     inputR_int
                    CALLI   inputStrVar                         
                    BRA     inputR_exit
                    
inputR_int          CALLI   inputIntVar                         

inputR_exit         LDI     1                                   
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs                          
                    MOVQW   inpCursXYOfs, 0                     
                    LDW     inpTextAddr
                    POKEI   0                                   
                    DECWA   inpTextAddr                         
                    POKEI   32                                  
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit                         
                    ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    BNE     inputD_4x8
                    LDNI    6
                    BRA     inputD_skip

inputD_4x8          LDNI    4

inputD_skip         STW     inpCursXYOfs                        
                    LDI     32                  
                    POKEV+  inpTextAddr                         
                    LDW     inpTextAddr
                    POKEI   0                                   
                    SUBBI   inpTextAddr, inpTextAddr, 2         
                    LDW     inpTextAddr                 
                    POKEI   32                                  
                    
inputD_print        CALLI   inputPrint                          
                    
inputD_exit         LDI     0                                   
                    POP
                    RET


inputPrint          MOVWA   inpPrnXYBak, cursorXY               
                    CALLI   saveRegs8_15
                    LDWI    textWorkArea
                    ADDW    inpTextOfs
                    CALLI   printText
                    CALLI   loadRegs8_15
                    ADDVW   inpCursXYBak, inpCursXYOfs, inpCursXYBak
                    LDI     0                                   
                    POP
                    RET



inputNewline        PUSH
                    ORBI    miscFlags, MISC_ENABLE_SCROLL_BIT   
                    CALLI   newLineScroll4x6
                    ANDBI   miscFlags, MISC_ENABLE_SCROLL_MSK   
                    POP
                    RET




textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
printInit           ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printInit4x6                        
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET


printInit4x6        MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET



printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             

printT_char         PEEKV+  textStr             
                    BEQ     printT_exit                         
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET


printChr            PUSH
                    ST      textChr
                    CALLI   printInit
                    LD      textChr
                    CALLI   printChar
                    POP
                    RET



printChar           STW     textChr
                    CMPII   32, 132                             
                    BNE     printC_exit
                    PUSH
                    CALLI   printChar4x6
                    POP
printC_exit         RET



printChar4x6        FNT4X6  textFont, textChr
                    MOVQB   giga_sysArg2, 3                     
                    LDW     giga_sysArg4
                    PRN4X6  textFont
                    ADDBI   giga_sysArg4, giga_sysArg4, 4       
                    ADDBI   cursorXY, cursorXY, 4
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printC4x6_exit                      
                    PUSH
                    CALLI   printClip4x6
                    POP
printC4x6_exit      RET


printClip4x6        CMPI    cursorXY, giga_xres - 4             
                    BLE     printCl46_exit
                    PUSH
                    CALLI   newLineScroll4x6                    
                    POP
printCl46_exit      RET


newLineScroll       PUSH
                    CALLI   newLineScroll4x6
                    POP
                    RET



clearCursorRow4x6   PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, 6

clearCR46_loopy     MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR46_loopy
                    CALLI   printInit                           
                    POP
                    RET


newLineScroll4x6    PUSH
                    LDI     0                                   
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS46_cont0                       
                    RET
                    
newLS46_cont0       ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS46_cont1                       
                    ADDBI   cursorXY + 1, cursorXY + 1, 6
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS46_exit
                    MOVQB   cursorXY + 1, giga_yres - 6

newLS46_cont1       CALLI   clearCursorRow4x6
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, 6                     
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   

newLS46_exit        CALLI   printInit                           
                    POP
                    RET



atTextCursor        ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     atTextCursor4x6                     
                    CMPI    cursorXY, giga_xres - giga_xfont
                    BLE     atTC_checkY
                    MOVQB   cursorXY, 0
                    
atTC_checkY         CMPI    cursorXY + 1, giga_yres - giga_yfont
                    BLT     atTC_resbot
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC_resbot         ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET


atTextCursor4x6     CMPI    cursorXY, giga_xres - 4
                    BLE     atTC46_checkY
                    MOVQB   cursorXY, 0
                    
atTC46_checkY       CMPI    cursorXY + 1, giga_yres - 6
                    BLT     atTC46_resbot
                    MOVQB   cursorXY + 1, giga_yres - 6
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC46_resbot       ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11                          
bcdCarry            EQU     register12
bcdBorrow           EQU     register12                          
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    
integerStr          STW     intSrcAddr
                    MOVQW   intResult, 0
                    PEEKV   intSrcAddr
                    SUBI    45                                  
                    BNE     integerS_loop
                    INC     intSrcAddr                          

integerS_loop       PEEKV   intSrcAddr
                    SUBI    48                                  
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    MULW10
                    ADDW    intDigit
                    STW     intResult                           
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        ABSVW   intResult
                    LDW     intResult
                    RET



timeByte            EQU     register0
timeDigit           EQU     register1
timeStrAddr         EQU     register2
timeArrayExt        EQU     register3                           
timeArrayInt        EQU     register4                           


%if TIME_HANDLER
tickTime            LD      giga_jiffiesTick
                    BNE     tickT_exit

                    PUSH
                    CALLI   handleTime                          
                    POP
                    
tickT_exit          RET
%else
tickTime            RET
%endif



handleTime          LDWI    _timeArray_
                    STW     timeArrayInt
                    PEEK
                    ADDI    1
                    POKE    timeArrayInt                        
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKEV+  timeArrayInt                        
                    
                    PEEKV   timeArrayInt
                    ADDI    1
                    POKE    timeArrayInt                        
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKEV+  timeArrayInt                        
                    
                    PEEKV   timeArrayInt
                    ADDI    1
                    POKE    timeArrayInt                        
handleT_mode        SUBI    24                                  
                    BLT     handleT_exit
handleT_epoch       LDI     0                                   
                    POKE    timeArrayInt                        

handleT_exit        RET



timeDigits          STW     timeByte

timeD_index         SUBI    10
                    BLT     timeD_cont
                    STW     timeByte
                    INC     timeDigit                           
                    BRA     timeD_index
    
timeD_cont          ORBK    timeDigit, 0x30
                    POKEV+  timeStrAddr                         
                    ORBK    timeByte, 0x30
                    POKEV+  timeStrAddr                         
                    INC     timeStrAddr                         
                    MOVQB   timeDigit, 0x30                     
                    RET


                    
timeString          PUSH
                    MOVQW   timeDigit, 0
                    LDWI    _timeString_ + 1
                    STW     timeStrAddr                         

                    LDWI    _timeArray_ + 2
                    STW     timeArrayExt
                    PEEK                                        
                    CALLI   timeDigits

                    DEC     timeArrayExt
                    PEEKV   timeArrayExt                        
                    CALLI   timeDigits

                    DEC     timeArrayExt
                    PEEKV   timeArrayExt                        
                    CALLI   timeDigits
                    POP
                    RET

