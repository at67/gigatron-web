* source: /var/www/html/phpbb/ext/at67/gigatronrombuilder/romsrc/ROMv5a.asm.py
                                          157   enableListing()
                                          158   #-----------------------------------------------------------------------
                                          159   #
                                          160   #  Start of core
                                          161   #
                                          162   #-----------------------------------------------------------------------
                                          163
                                          164   # Pre-loading the formal interface as a way to get warnings when
                                          165   # accidentally redefined with a different value
                                          166   loadBindings('interface.json')
                                          167   loadBindings('Core/interface-dev.json') # Provisional values for DEVROM
                                          168
                                          169   # Gigatron clock
                                          170   cpuClock = 6.250e+06
                                          171
                                          172   # Output pin assignment for VGA
                                          173   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          174   syncBits = hSync+vSync # Both pulses negative
                                          175
                                          176   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          177   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          178   assert syncBits & hSync != 0
                                          179
                                          180   # VGA 640x480 defaults (to be adjusted below!)
                                          181   vFront = 10     # Vertical front porch
                                          182   vPulse = 2      # Vertical sync pulse
                                          183   vBack  = 33     # Vertical back porch
                                          184   vgaLines = vFront + vPulse + vBack + 480
                                          185   vgaClock = 25.175e+06
                                          186
                                          187   # Video adjustments for Gigatron
                                          188   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          189   #    accept the decreased frame rate, so we restore the frame rate to above
                                          190   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          191   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          192   vFront -= vFrontAdjust
                                          193   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          194   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          195   vPulseExtension = max(0, 8-vPulse)
                                          196   vPulse += vPulseExtension
                                          197   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          198   #    unaffected
                                          199   vBack -= vPulseExtension
                                          200
                                          201   # Start value of vertical blank counter
                                          202   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          203
                                          204   # Mismatch between video lines and sound channels
                                          205   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          206
                                          207   # QQVGA resolution
                                          208   qqVgaWidth      = 160
                                          209   qqVgaHeight     = 120
                                          210
                                          211   # Game controller bits (actual controllers in kit have negative output)
                                          212   # +----------------------------------------+
                                          213   # |       Up                        B*     |
                                          214   # |  Left    Right               B     A*  |
                                          215   # |      Down      Select Start     A      |
                                          216   # +----------------------------------------+ *=Auto fire
                                          217   buttonRight     = 1
                                          218   buttonLeft      = 2
                                          219   buttonDown      = 4
                                          220   buttonUp        = 8
                                          221   buttonStart     = 16
                                          222   buttonSelect    = 32
                                          223   buttonB         = 64
                                          224   buttonA         = 128
                                          225
                                          226   #-----------------------------------------------------------------------
                                          227   #
                                          228   #  RAM page 0: zero-page variables
                                          229   #
                                          230   #-----------------------------------------------------------------------
                                          231
                                          232   # Memory size in pages from auto-detect
                                          233   memSize         = zpByte()
                                          234
                                          235   # The current channel number for sound generation. Advanced every scan line
                                          236   # and independent of the vertical refresh to maintain constant oscillation.
                                          237   channel         = zpByte()
                                          238
                                          239   # Next sound sample being synthesized
                                          240   sample          = zpByte()
                                          241   # To save one instruction in the critical inner loop, `sample' is always
                                          242   # reset with its own address instead of, for example, the value 0. Compare:
                                          243   # 1 instruction reset
                                          244   #       st sample,[sample]
                                          245   # 2 instruction reset:
                                          246   #       ld 0
                                          247   #       st [sample]
                                          248   # The difference is not audible. This is fine when the reset/address
                                          249   # value is low and doesn't overflow with 4 channels added to it.
                                          250   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          251   #       st [sample],[sample]
                                          252   assert 4*63 + sample < 256
                                          253   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          254   assert sample == 3
                                          255
                                          256   # Former bootCount and bootCheck (<= ROMv3)
                                          257   zpReserved      = zpByte() # Recycled and still unused. Candidate future uses:
                                          258                              # - Video driver high address (for alternative video modes)
                                          259   vCpuSelect      = zpByte() # Active interpreter page
                                          260
                                          261   # Entropy harvested from SRAM startup and controller input
                                          262   entropy         = zpByte(3)
                                          263
                                          264   # Visible video
                                          265   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          266                              # Counts up (and is odd) during vertical blank
                                          267   videoModeB      = zpByte() # Handler for every 2nd line (pixel burst or vCPU)
                                          268   videoModeC      = zpByte() # Handler for every 3rd line (pixel burst or vCPU)
                                          269   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          270
                                          271   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          272   videoPulse      = nextVideo # Used for pulse width modulation
                                          273
                                          274   # Frame counter is good enough as system clock
                                          275   frameCount      = zpByte(1)
                                          276
                                          277   # Serial input (game controller)
                                          278   serialRaw       = zpByte() # New raw serial read
                                          279   serialLast      = zpByte() # Previous serial read
                                          280   buttonState     = zpByte() # Clearable button state
                                          281   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          282                              # XXX move to page 1 to free up space
                                          283
                                          284   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          285   # value must be present in AC during a rising hSync edge. It then gets
                                          286   # copied to the XOUT register by the hardware. The XOUT register is only
                                          287   # accessible in this indirect manner because it isn't part of the core
                                          288   # CPU architecture.
                                          289   xout            = zpByte()
                                          290   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          291
                                          292   # vCPU interpreter
                                          293   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          294   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          295   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          296   vLR             = zpByte(2) # Return address, for returning after CALL
                                          297   vSP             = zpByte(1) # Stack pointer
                                          298   vTmp            = zpByte()
                                          299   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          300
                                          301   # Scratch
                                          302   frameX          = zpByte() # Starting byte within page
                                          303   frameY          = zpByte() # Page of current pixel line (updated by videoA)
                                          304
                                          305   # Vertical blank (reuse some variables used in the visible part)
                                          306   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          307   videoSync1      = frameY   # Same during horizontal pulse (0x80 or 0x00)
                                          308
                                          309   # Versioning for GT1 compatibility
                                          310   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          311   romType         = zpByte(1)
                                          312
                                          313   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          314   # Valid bit combinations are:
                                          315   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          316   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          317   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          318   # The main application for this is to free up the high bytes of page 2,3,4.
                                          319   channelMask = symbol('channelMask_v4')
                                          320   assert romType == channelMask
                                          321
                                          322   # SYS function arguments and results/scratch
                                          323   sysFn           = zpByte(2)
                                          324   sysArgs         = zpByte(8)
                                          325
                                          326   # Play sound if non-zero, count down and stop sound when zero
                                          327   soundTimer      = zpByte()
                                          328
                                          329   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          330   ledTimer        = zpByte() # Number of ticks until next LED change
                                          331   ledState_v2     = zpByte() # Current LED state
                                          332   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          333
                                          334   # All bytes above, except 0x80, are free for temporary/scratch/stacks etc
                                          335   userVars        = zpByte(0)
                                          336
                                          337   #-----------------------------------------------------------------------
                                          338   #
                                          339   #  RAM page 1: video line table
                                          340   #
                                          341   #-----------------------------------------------------------------------
                                          342
                                          343   # Byte 0-239 define the video lines
                                          344   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          345
                                          346   vReset          = 0x01f0
                                          347   vIRQ_v5         = 0x01f6
                                          348   ctrlBits        = 0x01f8
                                          349   videoTop_v5     = 0x01f9 # Number of skip lines
                                          350
                                          351   # Highest bytes are for sound channel variables
                                          352   wavA = 250      # Waveform modulation with `adda'
                                          353   wavX = 251      # Waveform modulation with `xora'
                                          354   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          355   keyH = 253      # Frequency high 8 bits
                                          356   oscL = 254      # Phase low 7 bits
                                          357   oscH = 255      # Phase high 8 bits
                                          358
                                          359   #-----------------------------------------------------------------------
                                          360   #  Memory layout
                                          361   #-----------------------------------------------------------------------
                                          362
                                          363   userCode = 0x0200       # Application vCPU code
                                          364   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          365   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          366
                                          367   #-----------------------------------------------------------------------
                                          368   #  Application definitions
                                          369   #-----------------------------------------------------------------------
                                          370
                                          371   maxTicks = 28//2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          372   minTicks = 14//2                 # vcPU's fastest instruction
                                          373
                                          374   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          375   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          376
                                          377   def runVcpu(n, ref=None, returnTo=None):
                                          378     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          379
                                          380     - `n' is the number of available Gigatron cycles including overhead.
                                          381       This is converted into interpreter ticks and takes into account
                                          382       the vCPU calling overheads. A `nop' is inserted when necessary
                                          383       for alignment between cycles and ticks.
                                          384     - `returnTo' is where program flow continues after return. If not set
                                          385        explicitely, it will be the first instruction behind the expansion."""
                                          386
                                          387     overhead = runVcpu_overhead + vCPU_overhead
                                          388     if returnTo == 0x100:         # Special case for videoZ
                                          389       overhead -= 2
                                          390
                                          391     if n is None:
                                          392       # (Clumsily) create a maximum time slice, corresponding to a vTicks
                                          393       # value of 127 (giving 282 cycles). A higher value doesn't work because
                                          394       # then SYS functions that just need 28 cycles (0 excess) won't start.
                                          395       n = (127 + maxTicks) * 2 + overhead
                                          396
                                          397     n -= overhead
                                          398     assert n > 0
                                          399
                                          400     if n % 2 == 1:
                                          401       nop()                       # Tick alignment
                                          402       n -= 1
                                          403     assert n % 2 == 0
                                          404
                                          405     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          406
                                          407     if returnTo != 0x100:
                                          408       if returnTo is None:
                                          409         returnTo = pc() + 5       # Next instruction
                                          410       ld(lo(returnTo))            #0
                                          411       st([vReturn])               #1
                                          412
                                          413     n //= 2
                                          414     n -= maxTicks                 # First instruction always runs
                                          415     assert n < 128
                                          416
                                          417     ld([vCpuSelect],Y)            #2
                                          418     jmp(Y,'ENTER')                #3
                                          419     ld(n)                         #4
                                          420   assert runVcpu_overhead ==       5
                                          421
                                          422   #-----------------------------------------------------------------------
                                          423   #
                                          424   #  $0000 ROM page 0: Boot
                                          425   #
                                          426   #-----------------------------------------------------------------------
                                          427
                                          428   align(0x100, size=0x80)
                                          429
                                          430   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         431   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     432   ld(syncBits^hSync,OUT)          # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     433   ld(syncBits,OUT)                # hSync goes up, updating XOUT
                                          434
                                          435   # Setup I/O and RAM expander
              0003 c17c  rand $7c         436   ctrl(0b01111100)                # Disable SPI slaves, enable RAM, bank 1
                                          437   #      ^^^^^^^^
                                          438   #      |||||||`-- SCLK
                                          439   #      ||||||`--- Not connected
                                          440   #      |||||`---- /SS0
                                          441   #      ||||`----- /SS1
                                          442   #      |||`------ /SS2
                                          443   #      ||`------- /SS3
                                          444   #      |`-------- B0
                                          445   #      `--------- B1
                                          446   # bit15 --------- MOSI = 0
                                          447
                                          448   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0004 0001  ld   $01         449   ld(1)                           # Quick RAM test and count
                                          450   label('.countMem0')
.countMem0:   0005 d601  st   [$01],y     451   st([memSize],Y)                 # Store in RAM and load AC in Y
              0006 00ff  ld   $ff         452   ld(255)
              0007 6900  xora [y,$00]     453   xora([Y,0])                     # Invert value from memory
              0008 ca00  st   [y,$00]     454   st([Y,0])                       # Test RAM by writing the new value
              0009 c200  st   [$00]       455   st([0])                         # Copy result in [0]
              000a 6900  xora [y,$00]     456   xora([Y,0])                     # Read back and compare if written ok
              000b ec0b  bne  $000b       457   bne(pc())                       # Loop forever on RAM failure here
              000c 00ff  ld   $ff         458   ld(255)
              000d 6900  xora [y,$00]     459   xora([Y,0])                     # Invert memory value again
              000e ca00  st   [y,$00]     460   st([Y,0])                       # To restore original value
              000f 6100  xora [$00]       461   xora([0])                       # Compare with inverted copy
              0010 f014  beq  .countMem1  462   beq('.countMem1')               # If equal, we wrapped around
              0011 0101  ld   [$01]       463   ld([memSize])
              0012 fc05  bra  .countMem0  464   bra('.countMem0')               # Loop to test next address line
              0013 8200  adda ac          465   adda(AC)                        # Executes in the branch delay slot!
                                          466   label('.countMem1')
                                          467
                                          468   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          469   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          470   # Real-world switches normally bounce shorter than that.
                                          471   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          472   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          473   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          474
.countMem1:   0014 00ff  ld   $ff         475   ld(255)                         # Debounce reset button
                                          476   label('.debounce')
.debounce:    0015 c200  st   [$00]       477   st([0])
              0016 ec16  bne  $0016       478   bne(pc())
              0017 a001  suba $01         479   suba(1)                         # Branch delay slot
              0018 0100  ld   [$00]       480   ld([0])
              0019 ec15  bne  .debounce   481   bne('.debounce')
              001a a001  suba $01         482   suba(1)                         # Branch delay slot
                                          483
                                          484   # Update LEDs (memory is present and counted, reset is stable)
              001b 0001  ld   $01         485   ld(0b0001)                      # LEDs |*OOO|
              001c 1880  ld   $80,out     486   ld(syncBits^hSync,OUT)
              001d 18c0  ld   $c0,out     487   ld(syncBits,OUT)
                                          488
                                          489   # Scan the entire RAM space to collect entropy for a random number generator.
                                          490   # The 16-bit address space is scanned, even if less RAM was detected.
              001e 0000  ld   $00         491   ld(0)                           # Collect entropy from RAM
              001f d218  st   [$18],x     492   st([vAC+0],X)
              0020 d619  st   [$19],y     493   st([vAC+1],Y)
                                          494   label('.initEnt0')
.initEnt0:    0021 0106  ld   [$06]       495   ld([entropy+0])
              0022 f425  bge  .initEnt1   496   bpl('.initEnt1')
              0023 8d00  adda [y,x]       497   adda([Y,X])
              0024 60bf  xora $bf         498   xora(191)
                                          499   label('.initEnt1')
.initEnt1:    0025 c206  st   [$06]       500   st([entropy+0])
              0026 0107  ld   [$07]       501   ld([entropy+1])
              0027 f42a  bge  .initEnt2   502   bpl('.initEnt2')
              0028 8106  adda [$06]       503   adda([entropy+0])
              0029 60c1  xora $c1         504   xora(193)
                                          505   label('.initEnt2')
.initEnt2:    002a c207  st   [$07]       506   st([entropy+1])
              002b 8108  adda [$08]       507   adda([entropy+2])
              002c c208  st   [$08]       508   st([entropy+2])
              002d 0118  ld   [$18]       509   ld([vAC+0])
              002e 8001  adda $01         510   adda(1)
              002f ec21  bne  .initEnt0   511   bne('.initEnt0')
              0030 d218  st   [$18],x     512   st([vAC+0],X)
              0031 0119  ld   [$19]       513   ld([vAC+1])
              0032 8001  adda $01         514   adda(1)
              0033 ec21  bne  .initEnt0   515   bne('.initEnt0')
              0034 d619  st   [$19],y     516   st([vAC+1],Y)
                                          517
                                          518   # Update LEDs
              0035 0003  ld   $03         519   ld(0b0011)                      # LEDs |**OO|
              0036 1880  ld   $80,out     520   ld(syncBits^hSync,OUT)
              0037 18c0  ld   $c0,out     521   ld(syncBits,OUT)
                                          522
                                          523   # vCPU reset handler
              0038 00ee  ld   $ee         524   ld((vReset&255)-2)              # Setup vCPU reset handler
              0039 c216  st   [$16]       525   st([vPC])
              003a 9002  adda $02,x       526   adda(2,X)
              003b 0001  ld   $01         527   ld(vReset>>8)
              003c d617  st   [$17],y     528   st([vPC+1],Y)
              003d dc59  st   $59,[y,x++] 529   st('LDI',             [Y,Xpp])
              003e dc5e  st   $5e,[y,x++] 530   st('SYS_Reset_88',    [Y,Xpp])
              003f dc2b  st   $2b,[y,x++] 531   st('STW',             [Y,Xpp])
              0040 dc22  st   $22,[y,x++] 532   st(sysFn,             [Y,Xpp])
              0041 dcb4  st   $b4,[y,x++] 533   st('SYS',             [Y,Xpp])  # SYS -> SYS_Reset_88 -> SYS_Exec_88
              0042 dce2  st   $e2,[y,x++] 534   st(256-88//2+maxTicks,[Y,Xpp])
              0043 dc00  st   $00,[y,x++] 535   st(0,                 [Y,Xpp])  # vIRQ_v5: Disable interrupts
              0044 dc00  st   $00,[y,x++] 536   st(0,                 [Y,Xpp])  # vIRQ_v5
              0045 dcfc  st   $fc,[y,x++] 537   st(0b11111100,        [Y,Xpp])  # Control register
              0046 dc00  st   $00,[y,x++] 538   st(0,                 [Y,Xpp])  # videoTop
                                          539
              0047 0002  ld   $02         540   ld(hi('ENTER'))                 # Active interpreter = vCPU
              0048 c205  st   [$05]       541   st([vCpuSelect])
                                          542
              0049 00ff  ld   $ff         543   ld(255)                         # Setup serial input
              004a c20e  st   [$0e]       544   st([frameCount])
              004b c20f  st   [$0f]       545   st([serialRaw])
              004c c210  st   [$10]       546   st([serialLast])
              004d c211  st   [$11]       547   st([buttonState])
              004e c212  st   [$12]       548   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          549
              004f 0007  ld   $07         550   ld(0b0111)                      # LEDs |***O|
              0050 1880  ld   $80,out     551   ld(syncBits^hSync,OUT)
              0051 18c0  ld   $c0,out     552   ld(syncBits,OUT)
                                          553
              0052 0000  ld   $00         554   ld(0)
              0053 c200  st   [$00]       555   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
              0054 c202  st   [$02]       556   st([channel])
              0055 c22c  st   [$2c]       557   st([soundTimer])
                                          558
              0056 000f  ld   $0f         559   ld(0b1111)                      # LEDs |****|
              0057 1880  ld   $80,out     560   ld(syncBits^hSync,OUT)
              0058 18c0  ld   $c0,out     561   ld(syncBits,OUT)
              0059 c213  st   [$13]       562   st([xout])                      # Setup for control by video loop
              005a c214  st   [$14]       563   st([xoutMask])
                                          564
              005b 1401  ld   $01,y       565   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005c e003  jmp  y,$03       566   jmp(Y,'startVideo')
              005d c22e  st   [$2e]       567   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          568
                                          569   #-----------------------------------------------------------------------
                                          570   # Extension SYS_Reset_88: Soft reset
                                          571   #-----------------------------------------------------------------------
                                          572
                                          573   # SYS_Reset_88 initiates an immediate Gigatron reset from within the vCPU.
                                          574   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          575   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          576   # some vCPU bootstrapping code gets loaded with SYS_Exec_88.
                                          577   # !!! This function was REMOVED from interface.json
                                          578   # !!! Better use vReset as generic entry point for soft reset
                                          579
                                          580   # ROM type (see also Docs/GT1-files.txt)
                                          581   romTypeValue = symbol('romTypeValue_ROMv5')
                                          582
                                          583   label('SYS_Reset_88')
                                          584   assert pc()>>8 == 0
                                          585   assert (romTypeValue & 7) == 0
SYS_Reset_88: 005e 0040  ld   $40         586   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              005f c221  st   [$21]       587   st([romType])                   #16
              0060 0000  ld   $00         588   ld(0)                           #17
              0061 c21c  st   [$1c]       589   st([vSP])                       #18 vSP
              0062 1401  ld   $01,y       590   ld(hi('videoTop_v5'),Y)         #19
              0063 caf9  st   [y,$f9]     591   st([Y,lo('videoTop_v5')])       #20 Show all 120 pixel lines
              0064 caf6  st   [y,$f6]     592   st([Y,vIRQ_v5])                 #21 Disable vIRQ dispatch
              0065 caf7  st   [y,$f7]     593   st([Y,vIRQ_v5+1])               #22
              0066 c22c  st   [$2c]       594   st([soundTimer])                #23 soundTimer
                                          595   assert userCode&255 == 0
              0067 c21a  st   [$1a]       596   st([vLR])                       #24 vLR
              0068 0002  ld   $02         597   ld(userCode>>8)                 #25
              0069 c21b  st   [$1b]       598   st([vLR+1])                     #26
              006a 00f6  ld   $f6         599   ld('nopixels')                  #27 Video mode 3 (fast)
              006b c20a  st   [$0a]       600   st([videoModeB])                #28
              006c c20b  st   [$0b]       601   st([videoModeC])                #29
              006d c20c  st   [$0c]       602   st([videoModeD])                #30
              006e 00ad  ld   $ad         603   ld('SYS_Exec_88')               #31 SYS_Exec_88
              006f c222  st   [$22]       604   st([sysFn])                     #32 High byte (remains) 0
              0070 000e  ld   $0e         605   ld('Reset')                     #33 Reset.gt1 from EPROM
              0071 c224  st   [$24]       606   st([sysArgs+0])                 #34
              0072 000f  ld   $0f         607   ld(hi('Reset'))                 #35
              0073 c225  st   [$25]       608   st([sysArgs+1])                 #36
              0074 0116  ld   [$16]       609   ld([vPC])                       #37 Force second SYS call
              0075 a002  suba $02         610   suba(2)                         #38
              0076 c216  st   [$16]       611   st([vPC])                       #39
                                          612   # Return to interpreter
              0077 1403  ld   $03,y       613   ld(hi('NEXTY'),Y)               #40
              0078 e000  jmp  y,$00       614   jmp(Y,'NEXTY')                  #41
              0079 00ea  ld   $ea         615   ld(-44/2)                       #42
                                          616
                                          617   #-----------------------------------------------------------------------
                                          618   # Placeholders for future SYS functions. This works as a kind of jump
                                          619   # table. The indirection allows SYS implementations to be moved around
                                          620   # between ROM versions, at the expense of 2 clock cycles (or 1). When
                                          621   # the function is not present it just acts as a NOP. Of course, when a
                                          622   # SYS function must be patched or extended it needs to have budget for
                                          623   # that in its declared maximum cycle count.
                                          624   #
                                          625   # Technically the same goal can be achieved by starting each function
                                          626   # with 2 nop's, or by overdeclaring their duration in the first place
                                          627   # (a bit is still wise to do). But this can result in fragmentation
                                          628   # of future ROM images. The indirection avoids that.
                                          629   #
                                          630   # An added advantage of having these in ROM page 0 is that it saves one
                                          631   # byte when setting sysFn: LDI+STW (4 bytes) instead of LDWI+STW (5 bytes)
                                          632   #-----------------------------------------------------------------------
                                          633
              007a 0200  nop              634   align(0x80, size=0x80)
              007b 0200  nop
              007c 0200  nop
              * 6 times
                                          635   assert pc() == 0x80
                                          636
              0080 1403  ld   $03,y       637   ld(hi('REENTER'),Y)             #15 slot 0x80
              0081 e0cb  jmp  y,$cb       638   jmp(Y,'REENTER')                #16
              0082 00f6  ld   $f6         639   ld(-20/2)                       #17
                                          640
              0083 1403  ld   $03,y       641   ld(hi('REENTER'),Y)             #15 slot 0x83
              0084 e0cb  jmp  y,$cb       642   jmp(Y,'REENTER')                #16
              0085 00f6  ld   $f6         643   ld(-20/2)                       #17
                                          644
              0086 1403  ld   $03,y       645   ld(hi('REENTER'),Y)             #15 slot 0x86
              0087 e0cb  jmp  y,$cb       646   jmp(Y,'REENTER')                #16
              0088 00f6  ld   $f6         647   ld(-20/2)                       #17
                                          648
              0089 1403  ld   $03,y       649   ld(hi('REENTER'),Y)             #15 slot 0x89
              008a e0cb  jmp  y,$cb       650   jmp(Y,'REENTER')                #16
              008b 00f6  ld   $f6         651   ld(-20/2)                       #17
                                          652
              008c 1403  ld   $03,y       653   ld(hi('REENTER'),Y)             #15 slot 0x8c
              008d e0cb  jmp  y,$cb       654   jmp(Y,'REENTER')                #16
              008e 00f6  ld   $f6         655   ld(-20/2)                       #17
                                          656
              008f 1403  ld   $03,y       657   ld(hi('REENTER'),Y)             #15 slot 0x8f
              0090 e0cb  jmp  y,$cb       658   jmp(Y,'REENTER')                #16
              0091 00f6  ld   $f6         659   ld(-20/2)                       #17
                                          660
              0092 1403  ld   $03,y       661   ld(hi('REENTER'),Y)             #15 slot 0x92
              0093 e0cb  jmp  y,$cb       662   jmp(Y,'REENTER')                #16
              0094 00f6  ld   $f6         663   ld(-20/2)                       #17
                                          664
              0095 1403  ld   $03,y       665   ld(hi('REENTER'),Y)             #15 slot 0x95
              0096 e0cb  jmp  y,$cb       666   jmp(Y,'REENTER')                #16
              0097 00f6  ld   $f6         667   ld(-20/2)                       #17
                                          668
              0098 1403  ld   $03,y       669   ld(hi('REENTER'),Y)             #15 slot 0x98
              0099 e0cb  jmp  y,$cb       670   jmp(Y,'REENTER')                #16
              009a 00f6  ld   $f6         671   ld(-20/2)                       #17
                                          672
              009b 1403  ld   $03,y       673   ld(hi('REENTER'),Y)             #15 slot 0x9b
              009c e0cb  jmp  y,$cb       674   jmp(Y,'REENTER')                #16
              009d 00f6  ld   $f6         675   ld(-20/2)                       #17
                                          676
              009e 1403  ld   $03,y       677   ld(hi('REENTER'),Y)             #15 slot 0x9e
              009f e0cb  jmp  y,$cb       678   jmp(Y,'REENTER')                #16
              00a0 00f6  ld   $f6         679   ld(-20/2)                       #17
                                          680
              00a1 1403  ld   $03,y       681   ld(hi('REENTER'),Y)             #15 slot 0xa1
              00a2 e0cb  jmp  y,$cb       682   jmp(Y,'REENTER')                #16
              00a3 00f6  ld   $f6         683   ld(-20/2)                       #17
                                          684
              00a4 1403  ld   $03,y       685   ld(hi('REENTER'),Y)             #15 slot 0xa4
              00a5 e0cb  jmp  y,$cb       686   jmp(Y,'REENTER')                #16
              00a6 00f6  ld   $f6         687   ld(-20/2)                       #17
                                          688
              00a7 1403  ld   $03,y       689   ld(hi('REENTER'),Y)             #15 slot 0xa7
              00a8 e0cb  jmp  y,$cb       690   jmp(Y,'REENTER')                #16
              00a9 00f6  ld   $f6         691   ld(-20/2)                       #17
                                          692
              00aa 1403  ld   $03,y       693   ld(hi('REENTER'),Y)             #15 slot 0xaa
              00ab e0cb  jmp  y,$cb       694   jmp(Y,'REENTER')                #16
              00ac 00f6  ld   $f6         695   ld(-20/2)                       #17
                                          696
                                          697   #-----------------------------------------------------------------------
                                          698   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          699   #-----------------------------------------------------------------------
                                          700   #
                                          701   # This loads the vCPU code with consideration of the current vSP
                                          702   # Used during reset, but also for switching between applications or for
                                          703   # loading data from ROM from within an application (overlays).
                                          704   #
                                          705   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          706   # on top of lookup tables.
                                          707   #
                                          708   # Variables:
                                          709   #       sysArgs[0:1]    ROM pointer (in)
                                          710   #       sysArgs[2:3]    RAM pointer (changed)
                                          711   #       sysArgs[4]      State counter (changed)
                                          712   #       vLR             vCPU continues here (in)
                                          713
                                          714   label('SYS_Exec_88')
SYS_Exec_88:  00ad 140e  ld   $0e,y       715   ld(hi('sys_Exec'),Y)            #15
              00ae e04b  jmp  y,$4b       716   jmp(Y,'sys_Exec')               #16
              00af 0000  ld   $00         717   ld(0)                           #17 Address of loader on zero page
                                          718
                                          719   #-----------------------------------------------------------------------
                                          720   # More placeholders for future SYS functions
                                          721   #-----------------------------------------------------------------------
                                          722
              00b0 1403  ld   $03,y       723   ld(hi('REENTER'),Y)             #15 slot 0xb0
              00b1 e0cb  jmp  y,$cb       724   jmp(Y,'REENTER')                #16
              00b2 00f6  ld   $f6         725   ld(-20/2)                       #17
                                          726
              00b3 1403  ld   $03,y       727   ld(hi('REENTER'),Y)             #15 slot 0xb3
              00b4 e0cb  jmp  y,$cb       728   jmp(Y,'REENTER')                #16
              00b5 00f6  ld   $f6         729   ld(-20/2)                       #17
                                          730
              00b6 1403  ld   $03,y       731   ld(hi('REENTER'),Y)             #15 slot 0xb6
              00b7 e0cb  jmp  y,$cb       732   jmp(Y,'REENTER')                #16
              00b8 00f6  ld   $f6         733   ld(-20/2)                       #17
                                          734
              00b9 1403  ld   $03,y       735   ld(hi('REENTER'),Y)             #15 slot 0xb9
              00ba e0cb  jmp  y,$cb       736   jmp(Y,'REENTER')                #16
              00bb 00f6  ld   $f6         737   ld(-20/2)                       #17
                                          738
              00bc 1403  ld   $03,y       739   ld(hi('REENTER'),Y)             #15 slot 0xbc
              00bd e0cb  jmp  y,$cb       740   jmp(Y,'REENTER')                #16
              00be 00f6  ld   $f6         741   ld(-20/2)                       #17
                                          742
              00bf 1403  ld   $03,y       743   ld(hi('REENTER'),Y)             #15 slot 0xbf
              00c0 e0cb  jmp  y,$cb       744   jmp(Y,'REENTER')                #16
              00c1 00f6  ld   $f6         745   ld(-20/2)                       #17
                                          746
              00c2 1403  ld   $03,y       747   ld(hi('REENTER'),Y)             #15 slot 0xc2
              00c3 e0cb  jmp  y,$cb       748   jmp(Y,'REENTER')                #16
              00c4 00f6  ld   $f6         749   ld(-20/2)                       #17
                                          750
              00c5 1403  ld   $03,y       751   ld(hi('REENTER'),Y)             #15 slot 0xc5
              00c6 e0cb  jmp  y,$cb       752   jmp(Y,'REENTER')                #16
              00c7 00f6  ld   $f6         753   ld(-20/2)                       #17
                                          754
              00c8 1403  ld   $03,y       755   ld(hi('REENTER'),Y)             #15 slot 0xc8
              00c9 e0cb  jmp  y,$cb       756   jmp(Y,'REENTER')                #16
              00ca 00f6  ld   $f6         757   ld(-20/2)                       #17
                                          758
              00cb 1403  ld   $03,y       759   ld(hi('REENTER'),Y)             #15 slot 0xcb
              00cc e0cb  jmp  y,$cb       760   jmp(Y,'REENTER')                #16
              00cd 00f6  ld   $f6         761   ld(-20/2)                       #17
                                          762
              00ce 1403  ld   $03,y       763   ld(hi('REENTER'),Y)             #15 slot 0xce
              00cf e0cb  jmp  y,$cb       764   jmp(Y,'REENTER')                #16
              00d0 00f6  ld   $f6         765   ld(-20/2)                       #17
                                          766
              00d1 1403  ld   $03,y       767   ld(hi('REENTER'),Y)             #15 slot 0xd1
              00d2 e0cb  jmp  y,$cb       768   jmp(Y,'REENTER')                #16
              00d3 00f6  ld   $f6         769   ld(-20/2)                       #17
                                          770
              00d4 1403  ld   $03,y       771   ld(hi('REENTER'),Y)             #15 slot 0xd4
              00d5 e0cb  jmp  y,$cb       772   jmp(Y,'REENTER')                #16
              00d6 00f6  ld   $f6         773   ld(-20/2)                       #17
                                          774
              00d7 1403  ld   $03,y       775   ld(hi('REENTER'),Y)             #15 slot 0xd7
              00d8 e0cb  jmp  y,$cb       776   jmp(Y,'REENTER')                #16
              00d9 00f6  ld   $f6         777   ld(-20/2)                       #17
                                          778
              00da 1403  ld   $03,y       779   ld(hi('REENTER'),Y)             #15 slot 0xda
              00db e0cb  jmp  y,$cb       780   jmp(Y,'REENTER')                #16
              00dc 00f6  ld   $f6         781   ld(-20/2)                       #17
                                          782
              00dd 1403  ld   $03,y       783   ld(hi('REENTER'),Y)             #15 slot 0xdd
              00de e0cb  jmp  y,$cb       784   jmp(Y,'REENTER')                #16
              00df 00f6  ld   $f6         785   ld(-20/2)                       #17
                                          786
              00e0 1403  ld   $03,y       787   ld(hi('REENTER'),Y)             #15 slot 0xe0
              00e1 e0cb  jmp  y,$cb       788   jmp(Y,'REENTER')                #16
              00e2 00f6  ld   $f6         789   ld(-20/2)                       #17
                                          790
              00e3 1403  ld   $03,y       791   ld(hi('REENTER'),Y)             #15 slot 0xe3
              00e4 e0cb  jmp  y,$cb       792   jmp(Y,'REENTER')                #16
              00e5 00f6  ld   $f6         793   ld(-20/2)                       #17
                                          794
              00e6 1403  ld   $03,y       795   ld(hi('REENTER'),Y)             #15 slot 0xe6
              00e7 e0cb  jmp  y,$cb       796   jmp(Y,'REENTER')                #16
              00e8 00f6  ld   $f6         797   ld(-20/2)                       #17
                                          798
                                          799   #-----------------------------------------------------------------------
                                          800   # Extension SYS_StoreBytes_DEVROM_XXX
                                          801   #-----------------------------------------------------------------------
                                          802
              00e9 1403  ld   $03,y       803   ld(hi('REENTER'),Y)             #15 slot 0xe9
              00ea e0cb  jmp  y,$cb       804   jmp(Y,'REENTER')                #16
              00eb 00f6  ld   $f6         805   ld(-20/2)                       #17
                                          806
                                          807   #-----------------------------------------------------------------------
                                          808   # Extension SYS_LoadBytes_DEVROM_XXX
                                          809   #-----------------------------------------------------------------------
                                          810
                                          811   # Load object variables into zero-page
                                          812   # XXX Unfinished
                                          813   #
                                          814   # Variables
                                          815   #       vLR             Pointer to size byte + object variables
                                          816   #       $30...$30+n-1   Target location
                                          817
                                          818   label('SYS_LoadBytes_DEVROM_XXX')
SYS_LoadBytes_DEVROM_XXX:
              00ec 140e  ld   $0e,y       819   ld(hi('sys_LoadBytes'),Y)       #15
              00ed e0e9  jmp  y,$e9       820   jmp(Y,'sys_LoadBytes')          #16
              00ee 151b  ld   [$1b],y     821   ld([vLR+1],Y)                   #17
                                          822
                                          823   #-----------------------------------------------------------------------
                                          824   # Extension SYS_ReadRomDir_v5_80
                                          825   #-----------------------------------------------------------------------
                                          826
                                          827   # Get next entry from ROM file system. Use vAC=0 to get the first entry.
                                          828
                                          829   # Variables:
                                          830   #       vAC             Start address of current entry (inout)
                                          831   #       sysArgs[0:7]    File name, padded with zeroes (out)
                                          832
                                          833   label('SYS_ReadRomDir_v5_80')
SYS_ReadRomDir_v5_80:
              00ef 142a  ld   $2a,y       834   ld(hi('sys_ReadRomDir'),Y)      #15
              00f0 e03f  jmp  y,$3f       835   jmp(Y,'sys_ReadRomDir')         #16
              00f1 0119  ld   [$19]       836   ld([vAC+1])                     #17
                                          837
              00f2 0200  nop              838   fillers(until=symbol('SYS_Out_22') & 255)
              00f3 0200  nop
                                          839
                                          840   #-----------------------------------------------------------------------
                                          841   # Extension SYS_Out_22
                                          842   #-----------------------------------------------------------------------
                                          843
                                          844   # Send byte to output port
                                          845   #
                                          846   # Variables:
                                          847   #       vAC
                                          848
                                          849   label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   850   ld([sysArgs+0],OUT)             #15
              00f5 0200  nop              851   nop()                           #16
              00f6 1403  ld   $03,y       852   ld(hi('REENTER'),Y)             #17
              00f7 e0cb  jmp  y,$cb       853   jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         854   ld(-22/2)                       #19
                                          855
                                          856   #-----------------------------------------------------------------------
                                          857   # Extension SYS_In_24
                                          858   #-----------------------------------------------------------------------
                                          859
                                          860   # Read a byte from the input port
                                          861   #
                                          862   # Variables:
                                          863   #       vAC
                                          864
                                          865   label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    866   st(IN, [vAC])                   #15
              00fa 0000  ld   $00         867   ld(0)                           #16
              00fb c219  st   [$19]       868   st([vAC+1])                     #17
              00fc 0200  nop              869   nop()                           #18
              00fd 1403  ld   $03,y       870   ld(hi('REENTER'),Y)             #19
              00fe e0cb  jmp  y,$cb       871   jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         872   ld(-24/2)                       #21
                                          873
                                          874   assert pc()&255 == 0
                                          875
                                          876   #-----------------------------------------------------------------------
                                          877   #
                                          878   #  $0100 ROM page 1: Video loop vertical blank
                                          879   #
                                          880   #-----------------------------------------------------------------------
                                          881   align(0x100, size=0x100)
                                          882
                                          883   # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          884   # For benchmarking purposes. This still has the overhead for the vTicks
                                          885   # administration, time slice granularity etc.
                                          886   label('videoZ')
                                          887   videoZ = pc()
videoZ:       0100 1505  ld   [$05],y     888   runVcpu(None, '---- novideo', returnTo=videoZ)
              0101 e0ff  jmp  y,$ff
              0102 007f  ld   $7f
                                          889
                                          890   label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         891   ld(syncBits)
                                          892
                                          893   # Start of vertical blank interval
                                          894   label('vBlankStart')
vBlankStart:  0104 c21f  st   [$1f]       895   st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         896   ld(syncBits^hSync)              #33
              0106 c220  st   [$20]       897   st([videoSync1])                #34
                                          898
                                          899   # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         900   ld(videoYline0)                 #35
              0108 c209  st   [$09]       901   st([videoY])                    #36
                                          902
                                          903   # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         904   ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       905   st([0x80])                      #38
              010b 810e  adda [$0e]       906   adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       907   st([frameCount])                #40
                                          908
                                          909   # Mix entropy (11 cycles)
              010d 6107  xora [$07]       910   xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       911   xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       912   adda([entropy+0])               #43
              0110 c206  st   [$06]       913   st([entropy+0])                 #44
              0111 8108  adda [$08]       914   adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       915   st([entropy+2])                 #46
              0113 e816  blt  $0116       916   bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       917   bra(pc()+3)                     #48
              0115 6053  xora $53         918   xora(64+16+2+1)                 #49
              0116 606c  xora $6c         919   xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       920   adda([entropy+1])               #50
              0118 c207  st   [$07]       921   st([entropy+1])                 #51
                                          922
                                          923   # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       924   ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       925   beq(pc()+3)                     #53
              011b fc1e  bra  $011e       926   bra(pc()+3)                     #54
              011c a001  suba $01         927   suba(1)                         #55
              011d 012f  ld   [$2f]       928   ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       929   st([ledTimer])                  #56
              011f f022  beq  $0122       930   beq(pc()+3)                     #57
              0120 fc23  bra  $0123       931   bra(pc()+3)                     #58
              0121 0000  ld   $00         932   ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         933   ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       934   adda([ledState_v2])             #60
              0124 ec27  bne  $0127       935   bne(pc()+3)                     #61
              0125 fc28  bra  $0128       936   bra(pc()+3)                     #62
              0126 00e8  ld   $e8         937   ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    938   bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       939   st([ledState_v2])               #64
              0129 8048  adda $48         940   adda('.leds#69')                #65
              012a fe00  bra  ac          941   bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    942   bra('.leds#69')                 #67 Single-instruction subroutine
                                          943
                                          944   label('.leds#65')
.leds#65:     012c 000f  ld   $0f         945   ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       946   st([ledState_v2])               #66
              012e fc48  bra  .leds#69    947   bra('.leds#69')                 #67
              012f 2114  anda [$14]       948   anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          949
              0130 000f  ld   $0f         950   ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         951   ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         952   ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         953   ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         954   ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         955   ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         956   ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         957   ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         958   ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         959   ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         960   ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         961   ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         962   ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         963   ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         964   ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         965   ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         966   ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         967   ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         968   ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         969   ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         970   ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         971   ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         972   ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         973   ld(0b1110)                      #68 LEDs |O***| offset -1
                                          974   label('.leds#69')
.leds#69:     0148 c214  st   [$14]       975   st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         976   ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20d  st   [$0d]       977   st([videoPulse])                #71
                                          978
                                          979   # When the total number of scan lines per frame is not an exact multiple of the
                                          980   # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          981   # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          982   # partial samples after transitioning into vertical blank. This is easiest if
                                          983   # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          984   # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          985   # last case there is no solution yet: give a warning.
                                          986   extra = 0
                                          987   if soundDiscontinuity == 2:
                                          988     st(sample, [sample])          # Sound continuity
                                          989     extra += 1
                                          990   if soundDiscontinuity > 2:
                                          991     highlight('Warning: sound discontinuity not suppressed')
                                          992
                                          993   # vCPU interrupt
              014b 010e  ld   [$0e]       994   ld([frameCount])                #72
                                          995   beq('vBlankFirst#75')           #73
              014c f052  beq  vBlankFirst#75
                                          996
              014d 0055  ld   $55         997   runVcpu(186-74-extra,           #74 Application cycles (scan line 0)
              014e c21e  st   [$1e]
              014f 1505  ld   [$05],y
              0150 e0ff  jmp  y,$ff
              0151 0023  ld   $23
                                          998       '---D line 0 no timeout',
                                          999       returnTo='vBlankFirst#186')
                                          1000
                                          1001  label('vBlankFirst#75')
vBlankFirst#75:
              0152 140e  ld   $0e,y       1002  ld(hi('vBlankFirst#78'),Y)      #75
              0153 e000  jmp  y,$00       1003  jmp(Y,'vBlankFirst#78')         #76
              0154 1401  ld   $01,y       1004  ld(hi(vIRQ_v5),Y)               #77
                                          1005  label('vBlankFirst#186')
                                          1006
                                          1007  # Mitigation for rogue channelMask (3 cycles)
vBlankFirst#186:
              0155 0121  ld   [$21]       1008  ld([channelMask])               #186 Normalize channelMask, for robustness
              0156 20fb  anda $fb         1009  anda(0b11111011)                #187
              0157 c221  st   [$21]       1010  st([channelMask])               #188
                                          1011
                                          1012  # Sound on/off (6 cycles)
              0158 012c  ld   [$2c]       1013  ld([soundTimer])                #189 Sound on/off
              0159 ec5c  bne  $015c       1014  bne(pc()+3)                     #190
              015a fc5d  bra  $015d       1015  bra(pc()+3)                     #191
              015b 0000  ld   $00         1016  ld(0)                           #192 Keeps sound unchanged (should be off here)
              015c 00f0  ld   $f0         1017  ld(0xf0)                        #192(!) Turns sound back on
              015d 4114  ora  [$14]       1018  ora([xoutMask])                 #193
              015e c214  st   [$14]       1019  st([xoutMask])                  #194
                                          1020
                                          1021  # Sound timer count down (5 cycles)
              015f 012c  ld   [$2c]       1022  ld([soundTimer])                #195 Sound timer
              0160 f063  beq  $0163       1023  beq(pc()+3)                     #196
              0161 fc64  bra  $0164       1024  bra(pc()+3)                     #197
              0162 a001  suba $01         1025  suba(1)                         #198
              0163 0000  ld   $00         1026  ld(0)                           #198
              0164 c22c  st   [$2c]       1027  st([soundTimer])                #199
                                          1028
              0165 191f  ld   [$1f],out   1029  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1030  label('sound1')
sound1:       0166 0102  ld   [$02]       1031  ld([channel])                   #1 Advance to next sound channel
              0167 2121  anda [$21]       1032  anda([channelMask])             #2
              0168 8001  adda $01         1033  adda(1)                         #3
              0169 1920  ld   [$20],out   1034  ld([videoSync1],OUT)            #4 Start horizontal pulse
              016a d602  st   [$02],y     1035  st([channel],Y)                 #5
              016b 007f  ld   $7f         1036  ld(0x7f)                        #6 Update sound channel
              016c 29fe  anda [y,$fe]     1037  anda([Y,oscL])                  #7
              016d 89fc  adda [y,$fc]     1038  adda([Y,keyL])                  #8
              016e cafe  st   [y,$fe]     1039  st([Y,oscL])                    #9
              016f 3080  anda $80,x       1040  anda(0x80,X)                    #10
              0170 0500  ld   [x]         1041  ld([X])                         #11
              0171 89ff  adda [y,$ff]     1042  adda([Y,oscH])                  #12
              0172 89fd  adda [y,$fd]     1043  adda([Y,keyH])                  #13
              0173 caff  st   [y,$ff]     1044  st([Y,oscH])                    #14
              0174 20fc  anda $fc         1045  anda(0xfc)                      #15
              0175 69fb  xora [y,$fb]     1046  xora([Y,wavX])                  #16
              0176 1200  ld   ac,x        1047  ld(AC,X)                        #17
              0177 09fa  ld   [y,$fa]     1048  ld([Y,wavA])                    #18
              0178 1407  ld   $07,y       1049  ld(soundTable>>8,Y)             #19
              0179 8d00  adda [y,x]       1050  adda([Y,X])                     #20
              017a e87d  blt  $017d       1051  bmi(pc()+3)                     #21
              017b fc7e  bra  $017e       1052  bra(pc()+3)                     #22
              017c 203f  anda $3f         1053  anda(63)                        #23
              017d 003f  ld   $3f         1054  ld(63)                          #23(!)
              017e 8103  adda [$03]       1055  adda([sample])                  #24
              017f c203  st   [$03]       1056  st([sample])                    #25
                                          1057
              0180 0113  ld   [$13]       1058  ld([xout])                      #26 Gets copied to XOUT
              0181 140e  ld   $0e,y       1059  ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              0182 191f  ld   [$1f],out   1060  ld([videoSync0],OUT)            #28 End horizontal pulse
                                          1061
                                          1062  # Count through the vertical blank interval until its last scan line
              0183 0109  ld   [$09]       1063  ld([videoY])                    #29
                                          1064  bpl('.vBlankLast#32')           #30
              0184 f4b1  bge  .vBlankLast#32
              0185 8002  adda $02         1065  adda(2)                         #31
              0186 c209  st   [$09]       1066  st([videoY])                    #32
                                          1067
                                          1068  # Determine if we're in the vertical sync pulse
              0187 a0bd  suba $bd         1069  suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0188 ec8d  bne  .prepSync36 1070  bne('.prepSync36')              #34 Tests for start of vPulse
              0189 a10d  suba [$0d]       1071  suba([videoPulse])              #35
              018a 0040  ld   $40         1072  ld(syncBits^vSync)              #36 Entering vertical sync pulse
              018b fc92  bra  .prepSync39 1073  bra('.prepSync39')              #37
              018c c21f  st   [$1f]       1074  st([videoSync0])                #38
                                          1075  label('.prepSync36')
.prepSync36:  018d ec91  bne  .prepSync38 1076  bne('.prepSync38')              #36 Tests for end of vPulse
              018e 00c0  ld   $c0         1077  ld(syncBits)                    #37
              018f fc93  bra  .prepSync40 1078  bra('.prepSync40')              #38 Entering vertical back porch
              0190 c21f  st   [$1f]       1079  st([videoSync0])                #39
                                          1080  label('.prepSync38')
.prepSync38:  0191 011f  ld   [$1f]       1081  ld([videoSync0])                #38 Load current value
                                          1082  label('.prepSync39')
.prepSync39:  0192 0200  nop              1083  nop()                           #39
                                          1084  label('.prepSync40')
.prepSync40:  0193 6040  xora $40         1085  xora(hSync)                     #40 Precompute, as during the pulse there is no time
              0194 c220  st   [$20]       1086  st([videoSync1])                #41
                                          1087
                                          1088  # Capture the serial input before the '595 shifts it out
              0195 0109  ld   [$09]       1089  ld([videoY])                    #42 Capture serial input
              0196 60cf  xora $cf         1090  xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0197 ec9a  bne  $019a       1091  bne(pc()+3)                     #44
              0198 fc9b  bra  $019b       1092  bra(pc()+3)                     #45
              0199 c30f  st   in,[$0f]    1093  st(IN, [serialRaw])             #46
              019a c000  st   $00,[$00]   1094  st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          1095
                                          1096  # Update [xout] with the next sound sample every 4 scan lines.
                                          1097  # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              019b 0109  ld   [$09]       1098  ld([videoY])                    #47
              019c 2006  anda $06         1099  anda(6)                         #48
                                          1100  beq('vBlankSample')             #49
              019d f0a6  beq  vBlankSample
              019e 0103  ld   [$03]       1101  ld([sample])                    #50
                                          1102
                                          1103  label('vBlankNormal')
vBlankNormal: 019f 00a4  ld   $a4         1104  runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
              01a0 c21e  st   [$1e]
              01a1 1505  ld   [$05],y
              01a2 e0ff  jmp  y,$ff
              01a3 0035  ld   $35
              01a4 fc66  bra  sound1      1105  bra('sound1')                   #199
              01a5 191f  ld   [$1f],out   1106  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1107
                                          1108  label('vBlankSample')
vBlankSample: 01a6 400f  ora  $0f         1109  ora(0x0f)                       #51 New sound sample is ready
              01a7 2114  anda [$14]       1110  anda([xoutMask])                #52
              01a8 c213  st   [$13]       1111  st([xout])                      #53
              01a9 c003  st   $03,[$03]   1112  st(sample, [sample])            #54 Reset for next sample
                                          1113
              01aa 00af  ld   $af         1114  runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01ab c21e  st   [$1e]
              01ac 1505  ld   [$05],y
              01ad e0ff  jmp  y,$ff
              01ae 0033  ld   $33
              01af fc66  bra  sound1      1115  bra('sound1')                   #199
              01b0 191f  ld   [$1f],out   1116  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1117
                                          1118  #-----------------------------------------------------------------------
                                          1119
                                          1120  label('.vBlankLast#32')
.vBlankLast#32:
              01b1 e02e  jmp  y,$2e       1121  jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          1122  #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01b2 1401  ld   $01,y       1123  ld(hi(pc()),Y)                  #33
                                          1124
                                          1125  label('vBlankLast#52')
                                          1126
                                          1127  # Respond to reset button (14 cycles)
                                          1128  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1129  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1130  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1131  # - This starts vReset -> SYS_Reset_88 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1132  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1133  # - This requires a full cycle (4s) in the warm boot scenario
                                          1134  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1135  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1136  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1137  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1138  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1139  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1140
vBlankLast#52:
              01b3 0111  ld   [$11]       1141  ld([buttonState])               #52 Check [Start] for soft reset
              01b4 60ef  xora $ef         1142  xora(~buttonStart)              #53
              01b5 ecbe  bne  .restart#56 1143  bne('.restart#56')              #54
              01b6 0112  ld   [$12]       1144  ld([resetTimer])                #55 As long as button pressed
              01b7 a001  suba $01         1145  suba(1)                         #56 ... count down the timer
              01b8 c212  st   [$12]       1146  st([resetTimer])                #57
              01b9 207f  anda $7f         1147  anda(127)                       #58
              01ba f0c6  beq  .restart#61 1148  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01bb 00ee  ld   $ee         1149  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01bc fcc5  bra  .restart#63 1150  bra('.restart#63')              #61 ... otherwise do nothing yet
              01bd fcc4  bra  .restart#64 1151  bra('.restart#64')              #62
                                          1152  label('.restart#56')
.restart#56:  01be 0001  ld   $01         1153  wait(62-56)                     #56
              01bf ecbf  bne  $01bf
              01c0 a001  suba $01
              01c1 0200  nop
              01c2 0080  ld   $80         1154  ld(128)                         #62 Not pressed, reset the timer
              01c3 c212  st   [$12]       1155  st([resetTimer])                #63
                                          1156  label('.restart#64')
.restart#64:  01c4 fccb  bra  .restart#66 1157  bra('.restart#66')              #64
                                          1158  label('.restart#63')
.restart#63:  01c5 0200  nop              1159  nop()                           #63,65
                                          1160  label('.restart#61')
.restart#61:  01c6 c216  st   [$16]       1161  st([vPC])                       #61 Point vPC at vReset
              01c7 0001  ld   $01         1162  ld(vReset>>8)                   #62
              01c8 c217  st   [$17]       1163  st([vPC+1])                     #63
              01c9 0002  ld   $02         1164  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
              01ca c205  st   [$05]       1165  st([vCpuSelect])                #65
                                          1166  label('.restart#66')
                                          1167
                                          1168  # Switch video mode when (only) select is pressed (16 cycles)
                                          1169  # XXX We could make this a vCPU interrupt
.restart#66:  01cb 0111  ld   [$11]       1170  ld([buttonState])               #66 Check [Select] to switch modes
              01cc 60df  xora $df         1171  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01cd ece2  bne  .select#70  1172  bne('.select#70')               #68
              01ce 010b  ld   [$0b]       1173  ld([videoModeC])                #69
              01cf e8d5  blt  .select#72  1174  bmi('.select#72')               #70 Branch when line C is off
              01d0 010a  ld   [$0a]       1175  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01d1 c20b  st   [$0b]       1176  st([videoModeC])                #72
              01d2 010c  ld   [$0c]       1177  ld([videoModeD])                #73
              01d3 c20a  st   [$0a]       1178  st([videoModeB])                #74
              01d4 fcda  bra  .select#77  1179  bra('.select#77')               #75
                                          1180  label('.select#72')
.select#72:   01d5 00f6  ld   $f6         1181  ld('nopixels')                  #72,76
              01d6 000a  ld   $0a         1182  ld('pixels')                    #73 Reset: On->D->B->C
              01d7 c20b  st   [$0b]       1183  st([videoModeC])                #74
              01d8 c20a  st   [$0a]       1184  st([videoModeB])                #75
              01d9 0200  nop              1185  nop()                           #76
                                          1186  label('.select#77')
.select#77:   01da c20c  st   [$0c]       1187  st([videoModeD])                #77
              01db 0035  ld   $35         1188  wait(188-78)                    #78 Don't waste code space expanding runVcpu here
              01dc ecdc  bne  $01dc
              01dd a001  suba $01
              01de 0200  nop
                                          1189  # AC==255 now
              01df c211  st   [$11]       1190  st([buttonState])               #188
                                          1191  bra('vBlankEnd#191')            #189
              01e0 fcea  bra  vBlankEnd#191
              01e1 0000  ld   $00         1192  ld(0)                           #190
                                          1193  label('.select#70')
                                          1194
                                          1195  # Mitigation of runaway channel variable
.select#70:   01e2 0102  ld   [$02]       1196  ld([channel])                   #70 Normalize channel, for robustness
              01e3 2003  anda $03         1197  anda(0b00000011)                #71
              01e4 c202  st   [$02]       1198  st([channel])                   #72 Stop wild channel updates
                                          1199
              01e5 00ea  ld   $ea         1200  runVcpu(191-73, '---D line 40') #73 Application cycles (scan line 40)
              01e6 c21e  st   [$1e]
              01e7 1505  ld   [$05],y
              01e8 e0ff  jmp  y,$ff
              01e9 0026  ld   $26
                                          1201
                                          1202  # AC==0 now
                                          1203  label('vBlankEnd#191')
vBlankEnd#191:
              01ea 1401  ld   $01,y       1204  ld(videoTop_v5>>8,Y)            #191
              01eb 09f9  ld   [y,$f9]     1205  ld([Y,videoTop_v5])             #192
              01ec c209  st   [$09]       1206  st([videoY])                    #193
              01ed c21f  st   [$1f]       1207  st([frameX])                    #194
              01ee ecf1  bne  $01f1       1208  bne(pc()+3)                     #195
              01ef fcf2  bra  $01f2       1209  bra(pc()+3)                     #196
              01f0 0001  ld   $01         1210  ld('videoA')                    #197
              01f1 00ec  ld   $ec         1211  ld('videoF')                    #197(!)
              01f2 c20d  st   [$0d]       1212  st([nextVideo])                 #198
              01f3 0102  ld   [$02]       1213  ld([channel])                   #199 Advance to next sound channel
              01f4 2121  anda [$21]       1214  anda([channelMask])             #0 <New scan line start>
              01f5 8001  adda $01         1215  adda(1)                         #1
              01f6 1402  ld   $02,y       1216  ld(hi('sound2'),Y)              #2
              01f7 e0b1  jmp  y,$b1       1217  jmp(Y,'sound2')                 #3
              01f8 1880  ld   $80,out     1218  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1219
              01f9 0200  nop              1220  fillers(until=0xff)
              01fa 0200  nop
              01fb 0200  nop
              * 6 times
                                          1221
                                          1222  #-----------------------------------------------------------------------
                                          1223  # Return point for vCPU slices during visible screen area
                                          1224  #-----------------------------------------------------------------------
                                          1225
                                          1226  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1227  bra('sound3')                   #200,0 <New scan line start>
                                          1228
                                          1229  #-----------------------------------------------------------------------
                                          1230  #
                                          1231  #  $0200 ROM page 2: Video loop visible scanlines
                                          1232  #
                                          1233  #-----------------------------------------------------------------------
                                          1234  align(0x100, size=0x100)
              0200 0102  ld   [$02]       1235  ld([channel])                   #1 Advance to next sound channel
                                          1236
                                          1237  # Back porch A: first of 4 repeated scan lines
                                          1238  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1239  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1240  label('videoA')
videoA:       0201 00ca  ld   $ca         1241  ld('videoB')                    #29 1st scanline of 4 (always visible)
              0202 c20d  st   [$0d]       1242  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1243  ld(videoTable>>8,Y)             #31
              0204 1109  ld   [$09],x     1244  ld([videoY],X)                  #32
              0205 0d00  ld   [y,x]       1245  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1246  st([Y,Xpp])                     #34 Just X++
              0207 c220  st   [$20]       1247  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1248  ld([Y,X])                       #36
              0209 911f  adda [$1f],x     1249  adda([frameX],X)                #37
                                          1250  label('pixels')
pixels:       020a 1520  ld   [$20],y     1251  ld([frameY],Y)                  #38
              020b 00c0  ld   $c0         1252  ld(syncBits)                    #39
                                          1253
                                          1254  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1255  # Superimpose the sync signal bits to be robust against misprogramming
                                          1256  for i in range(qqVgaWidth):
              020c 5d00  ora  [y,x++],out 1257    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1258  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1259
                                          1260  # Front porch
              02ad 0102  ld   [$02]       1261  ld([channel])                   #1 Advance to next sound channel
                                          1262  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1263  anda([channelMask])             #2
              02af 8001  adda $01         1264  adda(1)                         #3
              02b0 1880  ld   $80,out     1265  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1266
                                          1267  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1268  label('sound2')
sound2:       02b1 d602  st   [$02],y     1269  st([channel],Y)                 #5
              02b2 007f  ld   $7f         1270  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1271  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1272  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1273  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1274  anda(0x80,X)                    #10
              02b7 0500  ld   [x]         1275  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1276  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1277  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1278  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1279  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1280  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1281  ld(AC,X)                        #17
              02be 09fa  ld   [y,$fa]     1282  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1283  ld(soundTable>>8,Y)             #19
              02c0 8d00  adda [y,x]       1284  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1285  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1286  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1287  anda(63)                        #23
              02c4 003f  ld   $3f         1288  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1289  adda([sample])                  #24
              02c6 c203  st   [$03]       1290  st([sample])                    #25
                                          1291
              02c7 0113  ld   [$13]       1292  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0d  bra  [$0d]       1293  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1294  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1295
                                          1296  # Back porch B: second of 4 repeated scan lines
                                          1297  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1298  label('videoB')
videoB:       02ca 00d3  ld   $d3         1299  ld('videoC')                    #29 2nd scanline of 4
              02cb c20d  st   [$0d]       1300  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1301  ld(videoTable>>8,Y)             #31
              02cd 0109  ld   [$09]       1302  ld([videoY])                    #32
              02ce 9001  adda $01,x       1303  adda(1,X)                       #33
              02cf 011f  ld   [$1f]       1304  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1305  adda([Y,X])                     #35
              02d1 fd0a  bra  [$0a]       1306  bra([videoModeB])               #36
              02d2 d21f  st   [$1f],x     1307  st([frameX],X)                  #37 Store in RAM and X
                                          1308
                                          1309  # Back porch C: third of 4 repeated scan lines
                                          1310  # - Nothing new to for video do as Yi and Xi are known,
                                          1311  # - This is the time to emit and reset the next sound sample
                                          1312  label('videoC')
videoC:       02d3 00dc  ld   $dc         1313  ld('videoD')                    #29 3rd scanline of 4
              02d4 c20d  st   [$0d]       1314  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1315  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
              02d6 400f  ora  $0f         1316  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1317  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1318  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1319  st(sample, [sample])            #35 Reset for next sample
              02da fd0b  bra  [$0b]       1320  bra([videoModeC])               #36
              02db 111f  ld   [$1f],x     1321  ld([frameX],X)                  #37
                                          1322
                                          1323  # Back porch D: last of 4 repeated scan lines
                                          1324  # - Calculate the next frame index
                                          1325  # - Decide if this is the last line or not
                                          1326  label('videoD')                 # Default video mode
videoD:       02dc 111f  ld   [$1f],x     1327  ld([frameX], X)                 #29 4th scanline of 4
              02dd 0109  ld   [$09]       1328  ld([videoY])                    #30
              02de a0ee  suba $ee         1329  suba((120-1)*2)                 #31
                                          1330  beq('.lastpixels#34')           #32
              02df f0e5  beq  .lastpixels#34
              02e0 80f0  adda $f0         1331  adda(120*2)                     #33 More pixel lines to go
              02e1 c209  st   [$09]       1332  st([videoY])                    #34
              02e2 0001  ld   $01         1333  ld('videoA')                    #35
              02e3 fd0c  bra  [$0c]       1334  bra([videoModeD])               #36
              02e4 c20d  st   [$0d]       1335  st([nextVideo])                 #37
                                          1336
                                          1337  label('.lastpixels#34')
                                          1338  if soundDiscontinuity == 1:
.lastpixels#34:
              02e5 c003  st   $03,[$03]   1339    st(sample, [sample])          #34 Sound continuity
                                          1340  else:
                                          1341    nop()                         #34
              02e6 00e9  ld   $e9         1342  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0c  bra  [$0c]       1343  bra([videoModeD])               #36
              02e8 c20d  st   [$0d]       1344  st([nextVideo])                 #37
                                          1345
                                          1346  # Back porch "E": after the last line
                                          1347  # - Go back and and enter vertical blank (program page 2)
                                          1348  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1349  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1350  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1351  ld(syncBits)                    #31
                                          1352
                                          1353  # Video mode that blacks out one or more pixel lines from the top of screen.
                                          1354  # This yields some speed, but also frees up screen memory for other purposes.
                                          1355  # Note: Sound output becomes choppier the more pixel lines are skipped
                                          1356  # Note: The vertical blank driver leaves 0x80 behind in [videoSync1]
                                          1357  label('videoF')
videoF:       02ec 0120  ld   [$20]       1358  ld([videoSync1])                #29 Completely black pixel line
              02ed 8080  adda $80         1359  adda(0x80)                      #30
              02ee d220  st   [$20],x     1360  st([videoSync1],X)              #31
              02ef 011f  ld   [$1f]       1361  ld([frameX])                    #32
              02f0 a500  suba [x]         1362  suba([X])                       #33 Decrements every two VGA scanlines
              02f1 f0f4  beq  .videoF#36  1363  beq('.videoF#36')               #34
              02f2 c21f  st   [$1f]       1364  st([frameX])                    #35
              02f3 fcf6  bra  nopixels    1365  bra('nopixels')                 #36
                                          1366  label('.videoF#36')
.videoF#36:   02f4 0001  ld   $01         1367  ld('videoA')                    #36,37 Transfer to visible screen area
              02f5 c20d  st   [$0d]       1368  st([nextVideo])                 #37
                                          1369  #
                                          1370  # Alternative for pixel burst: faster application mode
                                          1371  label('nopixels')
nopixels:     02f6 00ff  ld   $ff         1372  runVcpu(200-38, 'ABCD line 40-520',
              02f7 c21e  st   [$1e]
              02f8 1505  ld   [$05],y
              02f9 e0ff  jmp  y,$ff
              02fa 003c  ld   $3c
                                          1373    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
                                          1374
                                          1375  #-----------------------------------------------------------------------
                                          1376  #
                                          1377  #  $0300 ROM page 3: Application interpreter primary page
                                          1378  #
                                          1379  #-----------------------------------------------------------------------
                                          1380
                                          1381  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1382  #
                                          1383  # This routine will execute as many as possible instructions in the
                                          1384  # allotted time. When time runs out, it synchronizes such that the total
                                          1385  # duration matches the caller's request. Durations are counted in `ticks',
                                          1386  # which are multiples of 2 clock cycles.
                                          1387  #
                                          1388  # Synopsis: Use the runVcpu() macro as entry point
                                          1389
                                          1390  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1391  # precious space in the packed interpreter code page. Although ENTER's
                                          1392  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1393  # in this case it will still jump into the right space, because branches
                                          1394  # from $xxFF land in the next page anyway.
                                          1395  while pc()&255 < 255:
              02fb 0200  nop              1396    nop()
              02fc 0200  nop
              02fd 0200  nop
              02fe 0200  nop
                                          1397  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1398  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1399  # --- Page boundary ---
                                          1400  align(0x100,size=0x100)
                                          1401  label('NEXTY')                  # Alternative for REENTER
NEXTY:        0300 1517  ld   [$17],y     1402  ld([vPC+1],Y)                   #1
                                          1403
                                          1404  # Fetch next instruction and execute it, but only if there are sufficient
                                          1405  # ticks left for the slowest instruction.
                                          1406  label('NEXT')
NEXT:         0301 8115  adda [$15]       1407  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1408  blt('EXIT')                     #1 Escape near time out
                                          1409  label('.next2')
.next2:       0303 c215  st   [$15]       1410  st([vTicks])                    #2
              0304 0116  ld   [$16]       1411  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1412  adda(2)                         #4
              0306 d216  st   [$16],x     1413  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1414  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1415  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1416  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1417  ld([Y,X])                       #9 Prefetch operand
                                          1418
                                          1419  # Resync with video driver and transfer control
                                          1420  label('EXIT')
EXIT:         030b 800e  adda $0e         1421  adda(maxTicks)                  #3
                                          1422  label('RESYNC')
RESYNC:       030c e40c  bgt  RESYNC      1423  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1424  suba(1)                         #5
              030e 1401  ld   $01,y       1425  ld(hi('vBlankStart'),Y)         #6
              030f e11e  jmp  y,[$1e]     1426  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1427  ld(0)                           #8 AC should be 0 already. Still..
                                          1428  assert vCPU_overhead ==          9
                                          1429
                                          1430  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1431  label('LDWI')
LDWI:         0311 c218  st   [$18]       1432  st([vAC])                       #10
              0312 de00  st   [y,x++]     1433  st([Y,Xpp])                     #11 Just X++
              0313 0d00  ld   [y,x]       1434  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1435  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1436  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1437  adda(1)                         #15
              0317 c216  st   [$16]       1438  st([vPC])                       #16
              0318 00f6  ld   $f6         1439  ld(-20/2)                       #17
              0319 fc01  bra  NEXT        1440  bra('NEXT')                     #18
                                          1441  #dummy()                        #19 Overlap
                                          1442  #
                                          1443  # Instruction LD: Load byte from zero page (vAC=[D]), 22 cycles
                                          1444  label('LD')
LD:           031a 1200  ld   ac,x        1445  ld(AC,X)                        #10,19
              031b 0500  ld   [x]         1446  ld([X])                         #11
              031c 1404  ld   $04,y       1447  ld(hi('ld#15'),Y)               #12
              031d e013  jmp  y,$13       1448  jmp(Y,'ld#15')                  #13
              031e c218  st   [$18]       1449  st([vAC])                       #14
                                          1450
                                          1451  # Instruction CMPHS: Adjust high byte for signed compare (vACH=XXX), 28 cycles
                                          1452  label('CMPHS_v5')
CMPHS_v5:     031f 140b  ld   $0b,y       1453  ld(hi('cmphs#13'),Y)            #10
              0320 e0bc  jmp  y,$bc       1454  jmp(Y,'cmphs#13')               #11
                                          1455  #ld(AC,X)                       #12 Overlap
                                          1456  #
                                          1457  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1458  label('LDW')
LDW:          0321 1200  ld   ac,x        1459  ld(AC,X)                        #10,12
              0322 8001  adda $01         1460  adda(1)                         #11
              0323 c21d  st   [$1d]       1461  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1462  ld([X])                         #13
              0325 c218  st   [$18]       1463  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1464  ld([vTmp],X)                    #15
              0327 0500  ld   [x]         1465  ld([X])                         #16
              0328 c219  st   [$19]       1466  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1467  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1468  ld(-20/2)                       #19
                                          1469
                                          1470  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1471  label('STW')
STW:          032b 1200  ld   ac,x        1472  ld(AC,X)                        #10,20
              032c 8001  adda $01         1473  adda(1)                         #11
              032d c21d  st   [$1d]       1474  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1475  ld([vAC])                       #13
              032f c600  st   [x]         1476  st([X])                         #14
              0330 111d  ld   [$1d],x     1477  ld([vTmp],X)                    #15
              0331 0119  ld   [$19]       1478  ld([vAC+1])                     #16
              0332 c600  st   [x]         1479  st([X])                         #17
              0333 fc01  bra  NEXT        1480  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1481  ld(-20/2)                       #19
                                          1482
                                          1483  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1484  label('BCC')
BCC:          0335 0119  ld   [$19]       1485  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .bcc#13     1486  bne('.bcc#13')                  #11
              0337 c21d  st   [$1d]       1487  st([vTmp])                      #12
              0338 0118  ld   [$18]       1488  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .bcc#16     1489  beq('.bcc#16')                  #14
              033a 0001  ld   $01         1490  ld(1)                           #15
              033b c21d  st   [$1d]       1491  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1492  ld([Y,X])                       #17 Operand is the conditional
                                          1493  label('.bcc#18')
.bcc#18:      033d fe00  bra  ac          1494  bra(AC)                         #18
              033e 011d  ld   [$1d]       1495  ld([vTmp])                      #19
                                          1496
                                          1497  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1498  label('EQ')
EQ:           033f ec45  bne  .bcc#22     1499  bne('.bcc#22')                  #20
                                          1500  label('.bcc#13')
.bcc#13:      0340 f048  beq  .bcc#23     1501  beq('.bcc#23')                  #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1502  ld([Y,X])                       #22,14 Overlap with BCC
                                          1503  #
                                          1504  # (continue BCC)
                                          1505  #label('.bcc#13')
                                          1506  #dummy()                        #13
                                          1507  #dummy()                        #14
              0342 0200  nop              1508  nop()                           #15
                                          1509  label('.bcc#16')
.bcc#16:      0343 fc3d  bra  .bcc#18     1510  bra('.bcc#18')                  #16
              0344 0d00  ld   [y,x]       1511  ld([Y,X])                       #17 Operand is the conditional
                                          1512  label('.bcc#22')
.bcc#22:      0345 0116  ld   [$16]       1513  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .bcc#25     1514  bra('.bcc#25')                  #23
              0347 8001  adda $01         1515  adda(1)                         #24
                                          1516  label('.bcc#23')
.bcc#23:      0348 de00  st   [y,x++]     1517  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1518  ld([Y,X])                       #24
                                          1519  label('.bcc#25')
.bcc#25:      034a c216  st   [$16]       1520  st([vPC])                       #25
              034b fc01  bra  NEXT        1521  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1522  ld(-28/2)                       #27
                                          1523
                                          1524  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1525  label('GT')
GT:           034d f845  ble  .bcc#22     1526  ble('.bcc#22')                  #20
              034e e448  bgt  .bcc#23     1527  bgt('.bcc#23')                  #21
              034f 0d00  ld   [y,x]       1528  ld([Y,X])                       #22
                                          1529
                                          1530  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1531  label('LT')
LT:           0350 f445  bge  .bcc#22     1532  bge('.bcc#22')                  #20
              0351 e848  blt  .bcc#23     1533  blt('.bcc#23')                  #21
              0352 0d00  ld   [y,x]       1534  ld([Y,X])                       #22
                                          1535
                                          1536  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1537  label('GE')
GE:           0353 e845  blt  .bcc#22     1538  blt('.bcc#22')                  #20
              0354 f448  bge  .bcc#23     1539  bge('.bcc#23')                  #21
              0355 0d00  ld   [y,x]       1540  ld([Y,X])                       #22
                                          1541
                                          1542  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1543  label('LE')
LE:           0356 e445  bgt  .bcc#22     1544  bgt('.bcc#22')                  #20
              0357 f848  ble  .bcc#23     1545  ble('.bcc#23')                  #21
              0358 0d00  ld   [y,x]       1546  ld([Y,X])                       #22
                                          1547
                                          1548  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1549  label('LDI')
LDI:          0359 c218  st   [$18]       1550  st([vAC])                       #10
              035a 0000  ld   $00         1551  ld(0)                           #11
              035b c219  st   [$19]       1552  st([vAC+1])                     #12
              035c fc00  bra  NEXTY       1553  bra('NEXTY')                    #13
              035d 00f8  ld   $f8         1554  ld(-16/2)                       #14
                                          1555
                                          1556  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1557  label('ST')
ST:           035e 1200  ld   ac,x        1558  ld(AC,X)                        #10,15
              035f 0118  ld   [$18]       1559  ld([vAC])                       #11
              0360 c600  st   [x]         1560  st([X])                         #12
              0361 fc00  bra  NEXTY       1561  bra('NEXTY')                    #13
              0362 00f8  ld   $f8         1562  ld(-16/2)                       #14
                                          1563
                                          1564  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1565  label('POP')
POP:          0363 111c  ld   [$1c],x     1566  ld([vSP],X)                     #10,15
              0364 0500  ld   [x]         1567  ld([X])                         #11
              0365 c21a  st   [$1a]       1568  st([vLR])                       #12
              0366 011c  ld   [$1c]       1569  ld([vSP])                       #13
              0367 9001  adda $01,x       1570  adda(1,X)                       #14
              0368 0500  ld   [x]         1571  ld([X])                         #15
              0369 c21b  st   [$1b]       1572  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1573  ld([vSP])                       #17
              036b 8002  adda $02         1574  adda(2)                         #18
              036c c21c  st   [$1c]       1575  st([vSP])                       #19
                                          1576  label('.pop#20')
.pop#20:      036d 0116  ld   [$16]       1577  ld([vPC])                       #20
              036e a001  suba $01         1578  suba(1)                         #21
              036f c216  st   [$16]       1579  st([vPC])                       #22
              0370 fc00  bra  NEXTY       1580  bra('NEXTY')                    #23
              0371 00f3  ld   $f3         1581  ld(-26/2)                       #24
                                          1582
                                          1583  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1584  label('NE')
NE:           0372 f045  beq  .bcc#22     1585  beq('.bcc#22')                  #20,25
              0373 ec48  bne  .bcc#23     1586  bne('.bcc#23')                  #21
              0374 0d00  ld   [y,x]       1587  ld([Y,X])                       #22
                                          1588
                                          1589  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1590  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1591  ld([vSP])                       #10
              0376 b001  suba $01,x       1592  suba(1,X)                       #11
              0377 011b  ld   [$1b]       1593  ld([vLR+1])                     #12
              0378 c600  st   [x]         1594  st([X])                         #13
              0379 011c  ld   [$1c]       1595  ld([vSP])                       #14
              037a a002  suba $02         1596  suba(2)                         #15
              037b d21c  st   [$1c],x     1597  st([vSP],X)                     #16
              037c 011a  ld   [$1a]       1598  ld([vLR])                       #17
              037d fc6d  bra  .pop#20     1599  bra('.pop#20')                  #18
              037e c600  st   [x]         1600  st([X])                         #19
                                          1601
                                          1602  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1603  label('LUP')
LUP:          037f 1519  ld   [$19],y     1604  ld([vAC+1],Y)                   #10
              0380 e0fb  jmp  y,$fb       1605  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1606  adda([vAC])                     #12
                                          1607
                                          1608  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 22 cycles
                                          1609  label('ANDI')
ANDI:         0382 1404  ld   $04,y       1610  ld(hi('andi#13'),Y)             #10
              0383 e011  jmp  y,$11       1611  jmp(Y,'andi#13')                #11
              0384 2118  anda [$18]       1612  anda([vAC])                     #12
                                          1613
                                          1614  # Instruction CALLI: Goto immediate address and remember vPC (vLR,vPC=vPC+3,$HHLL-2), 28 cycles
                                          1615  label('CALLI_v5')
CALLI_v5:     0385 140b  ld   $0b,y       1616  ld(hi('calli#13'),Y)            #10
              0386 e0b0  jmp  y,$b0       1617  jmp(Y,'calli#13')               #11
              0387 0116  ld   [$16]       1618  ld([vPC])                       #12
                                          1619
                                          1620  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1621  label('ORI')
ORI:          0388 4118  ora  [$18]       1622  ora([vAC])                      #10
              0389 c218  st   [$18]       1623  st([vAC])                       #11
              038a fc01  bra  NEXT        1624  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1625  ld(-14/2)                       #13
                                          1626
                                          1627  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1628  label('XORI')
XORI:         038c 6118  xora [$18]       1629  xora([vAC])                     #10
              038d c218  st   [$18]       1630  st([vAC])                       #11
              038e fc01  bra  NEXT        1631  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1632  ld(-14/2)                       #13
                                          1633
                                          1634  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1635  label('BRA')
BRA:          0390 c216  st   [$16]       1636  st([vPC])                       #10
              0391 fc00  bra  NEXTY       1637  bra('NEXTY')                    #11
              0392 00f9  ld   $f9         1638  ld(-14/2)                       #12
                                          1639
                                          1640  # Instruction INC: Increment zero page byte ([D]++), 20 cycles
                                          1641  label('INC')
INC:          0393 1200  ld   ac,x        1642  ld(AC,X)                        #10,13
              0394 1404  ld   $04,y       1643  ld(hi('inc#14'),Y)              #11
              0395 e0e4  jmp  y,$e4       1644  jmp(Y,'inc#14')                 #12
              0396 0001  ld   $01         1645  ld(1)                           #13
                                          1646
                                          1647  # Instruction CMPHU: Adjust high byte for unsigned compare (vACH=XXX), 28 cycles
                                          1648  label('CMPHU_v5')
CMPHU_v5:     0397 140b  ld   $0b,y       1649  ld(hi('cmphu#13'),Y)            #10
              0398 e0c8  jmp  y,$c8       1650  jmp(Y,'cmphu#13')               #11
                                          1651  #ld(AC,X)                       #12 Overlap
                                          1652  #
                                          1653  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1654  label('ADDW')
                                          1655  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1656  # But a smaller size is better so more instructions fit in this code page.
                                          1657  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1658  ld(AC,X)                        #10,12 Address of low byte to be added
              039a 8001  adda $01         1659  adda(1)                         #11
              039b c21d  st   [$1d]       1660  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1661  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1662  adda([X])                       #14
              039e c218  st   [$18]       1663  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw#18    1664  bmi('.addw#18')                 #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1665  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw#20    1666  bra('.addw#20')                 #18
              03a2 4500  ora  [x]         1667  ora([X])                        #19 Carry in bit 7
                                          1668  label('.addw#18')
.addw#18:     03a3 2500  anda [x]         1669  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1670  nop()                           #19
                                          1671  label('.addw#20')
.addw#20:     03a5 3080  anda $80,x       1672  anda(0x80,X)                    #20 Move carry to bit 0
              03a6 0500  ld   [x]         1673  ld([X])                         #21
              03a7 8119  adda [$19]       1674  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1675  ld([vTmp],X)                    #23
              03a9 8500  adda [x]         1676  adda([X])                       #24
              03aa c219  st   [$19]       1677  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1678  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1679  ld(-28/2)                       #27
                                          1680
                                          1681  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1682  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1683  ld(hi('peek'),Y)                #10
              03ae e062  jmp  y,$62       1684  jmp(Y,'peek')                   #11
                                          1685  #ld([vPC])                      #12 Overlap
                                          1686  #
                                          1687  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1688  #
                                          1689  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1690  # the operand. As long as there are insufficient ticks available in the current
                                          1691  # time slice, the instruction will be retried. This will effectively wait for
                                          1692  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1693  # native code is made. This code can do whatever it wants, but it must return
                                          1694  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1695  # of) the actual consumed number of whole ticks for the entire virtual
                                          1696  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1697  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1698  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1699  # need. The GCL compiler automatically makes this calculation from gross number
                                          1700  # of cycles to excess number of ticks.
                                          1701  # SYS functions can modify vPC to implement repetition. For example to split
                                          1702  # up work into multiple chucks.
                                          1703  label('.sys#13')
.sys#13:      03af 0116  ld   [$16]       1704  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1705  suba(2)                         #14
              03b1 c216  st   [$16]       1706  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1707  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1708  ld(-20/2)                       #17
                                          1709  label('SYS')
SYS:          03b4 8115  adda [$15]       1710  adda([vTicks])                  #10
              03b5 e8af  blt  .sys#13     1711  blt('.sys#13')                  #11
              03b6 1523  ld   [$23],y     1712  ld([sysFn+1],Y)                 #12
              03b7 e122  jmp  y,[$22]     1713  jmp(Y,[sysFn])                  #13
                                          1714  #dummy()                        #14 Overlap
                                          1715  #
                                          1716  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1717  # All cases can be done in 26 cycles, but the code will become much larger
                                          1718  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1719  ld(AC,X)                        #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1720  adda(1)                         #11
              03ba c21d  st   [$1d]       1721  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1722  ld([vAC])                       #13
              03bc e8c1  blt  .subw#16    1723  bmi('.subw#16')                 #14
              03bd a500  suba [x]         1724  suba([X])                       #15
              03be c218  st   [$18]       1725  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw#19    1726  bra('.subw#19')                 #17
              03c0 4500  ora  [x]         1727  ora([X])                        #18 Carry in bit 7
                                          1728  label('.subw#16')
.subw#16:     03c1 c218  st   [$18]       1729  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1730  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1731  nop()                           #18
                                          1732  label('.subw#19')
.subw#19:     03c4 3080  anda $80,x       1733  anda(0x80,X)                    #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1734  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1735  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1736  ld([vTmp],X)                    #22
              03c8 a500  suba [x]         1737  suba([X])                       #23
              03c9 c219  st   [$19]       1738  st([vAC+1])                     #24
                                          1739  label('REENTER_28')
REENTER_28:   03ca 00f2  ld   $f2         1740  ld(-28/2)                       #25
                                          1741  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1742  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1743  ld([vPC+1],Y)                   #27
                                          1744
                                          1745  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 24 cycles
                                          1746  label('DEF')
DEF:          03cd 1404  ld   $04,y       1747  ld(hi('def#13'),Y)              #10
              03ce e007  jmp  y,$07       1748  jmp(Y,'def#13')                 #11
                                          1749  #st([vTmp])                     #12 Overlap
                                          1750  #
                                          1751  # Instruction CALL: Goto address and remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1752  label('CALL')
CALL:         03cf c21d  st   [$1d]       1753  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1754  ld([vPC])                       #11
              03d1 8002  adda $02         1755  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1756  st([vLR])                       #13
              03d3 0117  ld   [$17]       1757  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1758  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1759  ld([vTmp],X)                    #16
              03d6 0500  ld   [x]         1760  ld([X])                         #17
              03d7 a002  suba $02         1761  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1762  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1763  ld([vTmp])                      #20
              03da 9001  adda $01,x       1764  adda(1,X)                       #21
              03db 0500  ld   [x]         1765  ld([X])                         #22
              03dc d617  st   [$17],y     1766  st([vPC+1],Y)                   #23
              03dd fc01  bra  NEXT        1767  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1768  ld(-26/2)                       #25
                                          1769
                                          1770  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1771  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1772  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1773  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1774  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1775  ld(-14/2)                       #13
                                          1776
                                          1777  # The instructions below are all implemented in the second code page. Jumping
                                          1778  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1779  # primary page for the instructions above. Most of them are in fact not very
                                          1780  # critical, as evidenced by the fact that they weren't needed for the first
                                          1781  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1782  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1783
                                          1784  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1785  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1786  ld(hi('addi'),Y)                #10
              03e4 e018  jmp  y,$18       1787  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1788  st([vTmp])                      #12
                                          1789
                                          1790  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1791  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1792  ld(hi('subi'),Y)                #10
              03e7 e026  jmp  y,$26       1793  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1794  st([vTmp])                      #12
                                          1795
                                          1796  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1797  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1798  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1799  ld(hi('lslw'),Y)                #10
              03ea e035  jmp  y,$35       1800  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1801  ld([vAC])                       #12
                                          1802
                                          1803  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1804  label('STLW')
STLW:         03ec 1404  ld   $04,y       1805  ld(hi('stlw'),Y)                #10
              03ed e041  jmp  y,$41       1806  jmp(Y,'stlw')                   #11
                                          1807  #dummy()                        #12 Overlap
                                          1808  #
                                          1809  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          1810  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       1811  ld(hi('ldlw'),Y)                #10,12
              03ef e04c  jmp  y,$4c       1812  jmp(Y,'ldlw')                   #11
                                          1813  #dummy()                        #12 Overlap
                                          1814  #
                                          1815  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          1816  label('POKE')
POKE:         03f0 1404  ld   $04,y       1817  ld(hi('poke'),Y)                #10,12
              03f1 e057  jmp  y,$57       1818  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       1819  st([vTmp])                      #12
                                          1820
                                          1821  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          1822  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       1823  ld(hi('doke'),Y)                #10
              03f4 e06d  jmp  y,$6d       1824  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       1825  st([vTmp])                      #12
                                          1826
                                          1827  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          1828  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       1829  ld(hi('deek'),Y)                #10
              03f7 e07a  jmp  y,$7a       1830  jmp(Y,'deek')                   #11
                                          1831  #dummy()                        #12 Overlap
                                          1832  #
                                          1833  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          1834  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       1835  ld(hi('andw'),Y)                #10,12
              03f9 e086  jmp  y,$86       1836  jmp(Y,'andw')                   #11
                                          1837  #dummy()                        #12 Overlap
                                          1838  #
                                          1839  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          1840  label('ORW')
ORW:          03fa 1404  ld   $04,y       1841  ld(hi('orw'),Y)                 #10,12
              03fb e091  jmp  y,$91       1842  jmp(Y,'orw')                    #11
                                          1843  #dummy()                        #12 Overlap
                                          1844  #
                                          1845  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          1846  label('XORW')
XORW:         03fc 1404  ld   $04,y       1847  ld(hi('xorw'),Y)                #10,12
              03fd e09c  jmp  y,$9c       1848  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       1849  st([vTmp])                      #12
                                          1850  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          1851  # can be useful for comparing numbers for equality a tiny
                                          1852  # bit faster than with SUBW
                                          1853
                                          1854  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          1855  label('RET')
RET:          03ff 011a  ld   [$1a]       1856  ld([vLR])                       #10
                                          1857  assert pc()&255 == 0
                                          1858
                                          1859  #-----------------------------------------------------------------------
                                          1860  #
                                          1861  #  $0400 ROM page 4: Application interpreter extension
                                          1862  #
                                          1863  #-----------------------------------------------------------------------
                                          1864  align(0x100, size=0x100)
                                          1865
                                          1866  # (Continue RET)
              0400 a002  suba $02         1867  suba(2)                         #11
              0401 c216  st   [$16]       1868  st([vPC])                       #12
              0402 011b  ld   [$1b]       1869  ld([vLR+1])                     #13
              0403 c217  st   [$17]       1870  st([vPC+1])                     #14
              0404 1403  ld   $03,y       1871  ld(hi('REENTER'),Y)             #15
              0405 e0cb  jmp  y,$cb       1872  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         1873  ld(-20/2)                       #17
                                          1874
                                          1875  # DEF implementation
                                          1876  label('def#13')
def#13:       0407 0116  ld   [$16]       1877  ld([vPC])                       #13
              0408 8002  adda $02         1878  adda(2)                         #14
              0409 c218  st   [$18]       1879  st([vAC])                       #15
              040a 0117  ld   [$17]       1880  ld([vPC+1])                     #16
              040b c219  st   [$19]       1881  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       1882  ld([vTmp])                      #18
              040d c216  st   [$16]       1883  st([vPC])                       #19
              040e 1403  ld   $03,y       1884  ld(hi('NEXTY'),Y)               #20
              040f e000  jmp  y,$00       1885  jmp(Y,'NEXTY')                  #21
              0410 00f4  ld   $f4         1886  ld(-24/2)                       #22
                                          1887
                                          1888  # Clear vACH (continuation of ANDI and LD instructions)
                                          1889  label('andi#13')
andi#13:      0411 0200  nop              1890  nop()                           #13
              0412 c218  st   [$18]       1891  st([vAC])                       #14
                                          1892  #
                                          1893  label('ld#15')
ld#15:        0413 0000  ld   $00         1894  ld(0)                           #15 Clear high byte
              0414 c219  st   [$19]       1895  st([vAC+1])                     #16
              0415 1403  ld   $03,y       1896  ld(hi('REENTER'),Y)             #17
              0416 e0cb  jmp  y,$cb       1897  jmp(Y,'REENTER')                #18
              0417 00f5  ld   $f5         1898  ld(-22/2)                       #19
                                          1899
                                          1900  # ADDI implementation
                                          1901  label('addi')
addi:         0418 8118  adda [$18]       1902  adda([vAC])                     #13
              0419 c218  st   [$18]       1903  st([vAC])                       #14 Store low result
              041a e81e  blt  .addi#17    1904  bmi('.addi#17')                 #15 Now figure out if there was a carry
              041b a11d  suba [$1d]       1905  suba([vTmp])                    #16 Gets back the initial value of vAC
              041c fc20  bra  .addi#19    1906  bra('.addi#19')                 #17
              041d 411d  ora  [$1d]       1907  ora([vTmp])                     #18 Carry in bit 7
                                          1908  label('.addi#17')
.addi#17:     041e 211d  anda [$1d]       1909  anda([vTmp])                    #17 Carry in bit 7
              041f 0200  nop              1910  nop()                           #18
                                          1911  label('.addi#19')
.addi#19:     0420 3080  anda $80,x       1912  anda(0x80,X)                    #19 Move carry to bit 0
              0421 0500  ld   [x]         1913  ld([X])                         #20
              0422 8119  adda [$19]       1914  adda([vAC+1])                   #21 Add the high bytes with carry
              0423 1403  ld   $03,y       1915  ld(hi('REENTER_28'),Y)          #22
              0424 e0ca  jmp  y,$ca       1916  jmp(Y,'REENTER_28')             #23
              0425 c219  st   [$19]       1917  st([vAC+1])                     #24 Store high result
                                          1918
                                          1919  # SUBI implementation
                                          1920  label('subi')
subi:         0426 0118  ld   [$18]       1921  ld([vAC])                       #13
              0427 e82c  blt  .subi#16    1922  bmi('.subi#16')                 #14
              0428 a11d  suba [$1d]       1923  suba([vTmp])                    #15
              0429 c218  st   [$18]       1924  st([vAC])                       #16 Store low result
              042a fc2f  bra  .subi#19    1925  bra('.subi#19')                 #17
              042b 411d  ora  [$1d]       1926  ora([vTmp])                     #18 Carry in bit 7
                                          1927  label('.subi#16')
.subi#16:     042c c218  st   [$18]       1928  st([vAC])                       #16 Store low result
              042d 211d  anda [$1d]       1929  anda([vTmp])                    #17 Carry in bit 7
              042e 0200  nop              1930  nop()                           #18
                                          1931  label('.subi#19')
.subi#19:     042f 3080  anda $80,x       1932  anda(0x80,X)                    #19 Move carry to bit 0
              0430 0119  ld   [$19]       1933  ld([vAC+1])                     #20
              0431 a500  suba [x]         1934  suba([X])                       #21
              0432 1403  ld   $03,y       1935  ld(hi('REENTER_28'),Y)          #22
              0433 e0ca  jmp  y,$ca       1936  jmp(Y,'REENTER_28')             #23
              0434 c219  st   [$19]       1937  st([vAC+1])                     #24
                                          1938
                                          1939  # LSLW implementation
                                          1940  label('lslw')
lslw:         0435 3080  anda $80,x       1941  anda(128,X)                     #13
              0436 8118  adda [$18]       1942  adda([vAC])                     #14
              0437 c218  st   [$18]       1943  st([vAC])                       #15
              0438 0500  ld   [x]         1944  ld([X])                         #16
              0439 8119  adda [$19]       1945  adda([vAC+1])                   #17
              043a 8119  adda [$19]       1946  adda([vAC+1])                   #18
              043b c219  st   [$19]       1947  st([vAC+1])                     #19
              043c 0116  ld   [$16]       1948  ld([vPC])                       #20
              043d a001  suba $01         1949  suba(1)                         #21
              043e 1403  ld   $03,y       1950  ld(hi('REENTER_28'),Y)          #22
              043f e0ca  jmp  y,$ca       1951  jmp(Y,'REENTER_28')             #23
              0440 c216  st   [$16]       1952  st([vPC])                       #24
                                          1953
                                          1954  # STLW implementation
                                          1955  label('stlw')
stlw:         0441 811c  adda [$1c]       1956  adda([vSP])                     #13
              0442 c21d  st   [$1d]       1957  st([vTmp])                      #14
              0443 9001  adda $01,x       1958  adda(1,X)                       #15
              0444 0119  ld   [$19]       1959  ld([vAC+1])                     #16
              0445 c600  st   [x]         1960  st([X])                         #17
              0446 111d  ld   [$1d],x     1961  ld([vTmp],X)                    #18
              0447 0118  ld   [$18]       1962  ld([vAC])                       #19
              0448 c600  st   [x]         1963  st([X])                         #20
              0449 1403  ld   $03,y       1964  ld(hi('REENTER'),Y)             #21
              044a e0cb  jmp  y,$cb       1965  jmp(Y,'REENTER')                #22
              044b 00f3  ld   $f3         1966  ld(-26/2)                       #23
                                          1967
                                          1968  # LDLW implementation
                                          1969  label('ldlw')
ldlw:         044c 811c  adda [$1c]       1970  adda([vSP])                     #13
              044d c21d  st   [$1d]       1971  st([vTmp])                      #14
              044e 9001  adda $01,x       1972  adda(1,X)                       #15
              044f 0500  ld   [x]         1973  ld([X])                         #16
              0450 c219  st   [$19]       1974  st([vAC+1])                     #17
              0451 111d  ld   [$1d],x     1975  ld([vTmp],X)                    #18
              0452 0500  ld   [x]         1976  ld([X])                         #19
              0453 c218  st   [$18]       1977  st([vAC])                       #20
              0454 1403  ld   $03,y       1978  ld(hi('REENTER'),Y)             #21
              0455 e0cb  jmp  y,$cb       1979  jmp(Y,'REENTER')                #22
              0456 00f3  ld   $f3         1980  ld(-26/2)                       #23
                                          1981
                                          1982  # POKE implementation
                                          1983  label('poke')
poke:         0457 9001  adda $01,x       1984  adda(1,X)                       #13
              0458 0500  ld   [x]         1985  ld([X])                         #14
              0459 1600  ld   ac,y        1986  ld(AC,Y)                        #15
              045a 111d  ld   [$1d],x     1987  ld([vTmp],X)                    #16
              045b 0500  ld   [x]         1988  ld([X])                         #17
              045c 1200  ld   ac,x        1989  ld(AC,X)                        #18
              045d 0118  ld   [$18]       1990  ld([vAC])                       #19
              045e ce00  st   [y,x]       1991  st([Y,X])                       #20
              045f 1403  ld   $03,y       1992  ld(hi('REENTER'),Y)             #21
              0460 e0cb  jmp  y,$cb       1993  jmp(Y,'REENTER')                #22
              0461 00f3  ld   $f3         1994  ld(-26/2)                       #23
                                          1995
                                          1996  # PEEK implementation
                                          1997  label('peek')
peek:         0462 a001  suba $01         1998  suba(1)                         #13
              0463 c216  st   [$16]       1999  st([vPC])                       #14
              0464 1118  ld   [$18],x     2000  ld([vAC],X)                     #15
              0465 1519  ld   [$19],y     2001  ld([vAC+1],Y)                   #16
              0466 0d00  ld   [y,x]       2002  ld([Y,X])                       #17
              0467 c218  st   [$18]       2003  st([vAC])                       #18
                                          2004  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0468 0000  ld   $00         2005  ld(0)                           #19
              0469 c219  st   [$19]       2006  st([vAC+1])                     #20
              046a 1403  ld   $03,y       2007  ld(hi('REENTER'),Y)             #21
              046b e0cb  jmp  y,$cb       2008  jmp(Y,'REENTER')                #22
              046c 00f3  ld   $f3         2009  ld(-26/2)                       #23
                                          2010
                                          2011  # DOKE implementation
                                          2012  label('doke')
doke:         046d 9001  adda $01,x       2013  adda(1,X)                       #13
              046e 0500  ld   [x]         2014  ld([X])                         #14
              046f 1600  ld   ac,y        2015  ld(AC,Y)                        #15
              0470 111d  ld   [$1d],x     2016  ld([vTmp],X)                    #16
              0471 0500  ld   [x]         2017  ld([X])                         #17
              0472 1200  ld   ac,x        2018  ld(AC,X)                        #18
              0473 0118  ld   [$18]       2019  ld([vAC])                       #19
              0474 de00  st   [y,x++]     2020  st([Y,Xpp])                     #20
              0475 0119  ld   [$19]       2021  ld([vAC+1])                     #21
              0476 ce00  st   [y,x]       2022  st([Y,X])                       #22 Incompatible with REENTER_28
              0477 1403  ld   $03,y       2023  ld(hi('REENTER'),Y)             #23
              0478 e0cb  jmp  y,$cb       2024  jmp(Y,'REENTER')                #24
              0479 00f2  ld   $f2         2025  ld(-28/2)                       #25
                                          2026
                                          2027  # DEEK implementation
                                          2028  label('deek')
deek:         047a 0116  ld   [$16]       2029  ld([vPC])                       #13
              047b a001  suba $01         2030  suba(1)                         #14
              047c c216  st   [$16]       2031  st([vPC])                       #15
              047d 1118  ld   [$18],x     2032  ld([vAC],X)                     #16
              047e 1519  ld   [$19],y     2033  ld([vAC+1],Y)                   #17
              047f 0d00  ld   [y,x]       2034  ld([Y,X])                       #18
              0480 de00  st   [y,x++]     2035  st([Y,Xpp])                     #19 Just X++
              0481 c218  st   [$18]       2036  st([vAC])                       #20
              0482 0d00  ld   [y,x]       2037  ld([Y,X])                       #21
              0483 1403  ld   $03,y       2038  ld(hi('REENTER_28'),Y)          #22
              0484 e0ca  jmp  y,$ca       2039  jmp(Y,'REENTER_28')             #23
              0485 c219  st   [$19]       2040  st([vAC+1])                     #24
                                          2041
                                          2042  # ANDW implementation
                                          2043  label('andw')
andw:         0486 c21d  st   [$1d]       2044  st([vTmp])                      #13
              0487 9001  adda $01,x       2045  adda(1,X)                       #14
              0488 0500  ld   [x]         2046  ld([X])                         #15
              0489 2119  anda [$19]       2047  anda([vAC+1])                   #16
              048a c219  st   [$19]       2048  st([vAC+1])                     #17
              048b 111d  ld   [$1d],x     2049  ld([vTmp],X)                    #18
              048c 0500  ld   [x]         2050  ld([X])                         #19
              048d 2118  anda [$18]       2051  anda([vAC])                     #20
              048e c218  st   [$18]       2052  st([vAC])                       #21
              048f 1403  ld   $03,y       2053  ld(hi('REENTER_28'),Y)          #22
              0490 e0ca  jmp  y,$ca       2054  jmp(Y,'REENTER_28')             #23
                                          2055  #dummy()                        #24 Overlap
                                          2056  #
                                          2057  # ORW implementation
                                          2058  label('orw')
orw:          0491 c21d  st   [$1d]       2059  st([vTmp])                      #13,24
              0492 9001  adda $01,x       2060  adda(1,X)                       #14
              0493 0500  ld   [x]         2061  ld([X])                         #15
              0494 4119  ora  [$19]       2062  ora([vAC+1])                    #16
              0495 c219  st   [$19]       2063  st([vAC+1])                     #17
              0496 111d  ld   [$1d],x     2064  ld([vTmp],X)                    #18
              0497 0500  ld   [x]         2065  ld([X])                         #19
              0498 4118  ora  [$18]       2066  ora([vAC])                      #20
              0499 c218  st   [$18]       2067  st([vAC])                       #21
              049a 1403  ld   $03,y       2068  ld(hi('REENTER_28'),Y)          #22
              049b e0ca  jmp  y,$ca       2069  jmp(Y,'REENTER_28')             #23
                                          2070  #dummy()                        #24 Overlap
                                          2071  #
                                          2072  # XORW implementation
                                          2073  label('xorw')
xorw:         049c 9001  adda $01,x       2074  adda(1,X)                       #13,24
              049d 0500  ld   [x]         2075  ld([X])                         #14
              049e 6119  xora [$19]       2076  xora([vAC+1])                   #15
              049f c219  st   [$19]       2077  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     2078  ld([vTmp],X)                    #17
              04a1 0500  ld   [x]         2079  ld([X])                         #18
              04a2 6118  xora [$18]       2080  xora([vAC])                     #19
              04a3 c218  st   [$18]       2081  st([vAC])                       #20
              04a4 1403  ld   $03,y       2082  ld(hi('REENTER'),Y)             #21
              04a5 e0cb  jmp  y,$cb       2083  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         2084  ld(-26/2)                       #23
                                          2085
                                          2086  #-----------------------------------------------------------------------
                                          2087  #
                                          2088  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          2089  #
                                          2090  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          2091  #
                                          2092  #  With <N> the maximum number of cycles the function will run
                                          2093  #  (counted from NEXT to NEXT). This is the same number that must
                                          2094  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          2095  #  appear in the GCL code upon use.
                                          2096  #
                                          2097  #  If a SYS extension got introduced after ROM v1, the version number of
                                          2098  #  introduction is included in the name. This helps the programmer to be
                                          2099  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          2100  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          2101  #
                                          2102  #-----------------------------------------------------------------------
                                          2103
                                          2104  #-----------------------------------------------------------------------
                                          2105  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          2106  #-----------------------------------------------------------------------
                                          2107
                                          2108  # This same algorithm runs automatically once per vertical blank.
                                          2109  # Use this function to get numbers at a higher rate.
                                          2110  #
                                          2111  # Variables:
                                          2112  #       vAC
                                          2113
                                          2114  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       2115  ld([frameCount])                #15
              04a8 6107  xora [$07]       2116  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       2117  xora([serialRaw])               #17
              04aa 8106  adda [$06]       2118  adda([entropy+0])               #18
              04ab c206  st   [$06]       2119  st([entropy+0])                 #19
              04ac c218  st   [$18]       2120  st([vAC+0])                     #20
              04ad 8108  adda [$08]       2121  adda([entropy+2])               #21
              04ae c208  st   [$08]       2122  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    2123  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    2124  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         2125  xora(64+16+2+1)                 #25
                                          2126  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         2127  xora(64+32+8+4)                 #25
                                          2128  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       2129  adda([entropy+1])               #26
              04b4 c207  st   [$07]       2130  st([entropy+1])                 #27
              04b5 c219  st   [$19]       2131  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       2132  ld(hi('REENTER'),Y)             #29
              04b7 e0cb  jmp  y,$cb       2133  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         2134  ld(-34/2)                       #31
                                          2135
                                          2136  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       2137  ld([vAC])                       #15
              04ba 3080  anda $80,x       2138  anda(128,X)                     #16
              04bb 0119  ld   [$19]       2139  ld([vAC+1])                     #17
              04bc 8200  adda ac          2140  adda(AC)                        #18
              04bd 4500  ora  [x]         2141  ora([X])                        #19
              04be c218  st   [$18]       2142  st([vAC])                       #20
              04bf 0119  ld   [$19]       2143  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       2144  anda(128,X)                     #22
              04c1 0500  ld   [x]         2145  ld([X])                         #23
              04c2 c219  st   [$19]       2146  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       2147  ld(hi('REENTER'),Y)             #25
              04c4 e0cb  jmp  y,$cb       2148  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         2149  ld(-30/2)                       #27
                                          2150
                                          2151  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       2152  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       2153  st([vAC])                       #16
              04c8 0000  ld   $00         2154  ld(0)                           #17
              04c9 c219  st   [$19]       2155  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       2156  ld(hi('REENTER'),Y)             #19
              04cb e0cb  jmp  y,$cb       2157  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         2158  ld(-24/2)                       #21
                                          2159
                                          2160  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       2161  ld([vAC])                       #15
              04ce c219  st   [$19]       2162  st([vAC+1])                     #16
              04cf 0000  ld   $00         2163  ld(0)                           #17
              04d0 c218  st   [$18]       2164  st([vAC])                       #18
              04d1 1403  ld   $03,y       2165  ld(hi('REENTER'),Y)             #19
              04d2 e0cb  jmp  y,$cb       2166  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         2167  ld(-24/2)                       #21
                                          2168
                                          2169  #-----------------------------------------------------------------------
                                          2170  # Extension SYS_Draw4_30
                                          2171  #-----------------------------------------------------------------------
                                          2172
                                          2173  # Draw 4 pixels on screen, horizontally next to each other
                                          2174  #
                                          2175  # Variables:
                                          2176  #       sysArgs[0:3]    Pixels (in)
                                          2177  #       sysArgs[4:5]    Position on screen (in)
                                          2178
                                          2179  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2180  ld([sysArgs+4],X)               #15
              04d5 1529  ld   [$29],y     2181  ld([sysArgs+5],Y)               #16
              04d6 0124  ld   [$24]       2182  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2183  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2184  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2185  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2186  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2187  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2188  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2189  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2190  ld(hi('REENTER'),Y)             #25
              04df e0cb  jmp  y,$cb       2191  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2192  ld(-30/2)                       #27
                                          2193
                                          2194  #-----------------------------------------------------------------------
                                          2195  # Extension SYS_VDrawBits_134:
                                          2196  #-----------------------------------------------------------------------
                                          2197
                                          2198  # Draw slice of a character, 8 pixels vertical
                                          2199  #
                                          2200  # Variables:
                                          2201  #       sysArgs[0]      Color 0 "background" (in)
                                          2202  #       sysArgs[1]      Color 1 "pen" (in)
                                          2203  #       sysArgs[2]      8 bits, highest bit first (in, changed)
                                          2204  #       sysArgs[4:5]    Position on screen (in)
                                          2205
                                          2206  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 140e  ld   $0e,y       2207  ld(hi('sys_VDrawBits'),Y)       #15
              04e2 e08f  jmp  y,$8f       2208  jmp(Y,'sys_VDrawBits')          #16
              04e3 1128  ld   [$28],x     2209  ld([sysArgs+4],X)               #17
                                          2210
                                          2211  #-----------------------------------------------------------------------
                                          2212
                                          2213  # INC implementation
                                          2214  label('inc#14')
inc#14:       04e4 8500  adda [x]         2215  adda([X])                       #14
              04e5 c600  st   [x]         2216  st([X])                         #15
              04e6 1403  ld   $03,y       2217  ld(hi('NEXTY'),Y)               #16
              04e7 e000  jmp  y,$00       2218  jmp(Y,'NEXTY')                  #17
              04e8 00f6  ld   $f6         2219  ld(-20/2)                       #18
                                          2220
                                          2221  # Interrupt handler:
                                          2222  #       ST   $xx        -> optionally store vCpuSelect
                                          2223  #       ... IRQ payload ...
                                          2224  # either:
                                          2225  #       LDWI $400
                                          2226  #       LUP  0          -> vRTI and don't switch interpreter (immediate resume)
                                          2227  # or:
                                          2228  #       LDWI $400
                                          2229  #       LUP  $xx        -> vRTI and switch interpreter type as stored in [$xx]
              04e9 0200  nop              2230  fillers(until=251-11)
              04ea 0200  nop
              04eb 0200  nop
              * 7 times
                                          2231  label('vRTI#15')
vRTI#15:      04f0 0130  ld   [$30]       2232  ld([0x30])                      #15 Continue with vCPU in the same timeslice (faster)
              04f1 c216  st   [$16]       2233  st([vPC])                       #16
              04f2 0131  ld   [$31]       2234  ld([0x31])                      #17
              04f3 c217  st   [$17]       2235  st([vPC+1])                     #18
              04f4 0132  ld   [$32]       2236  ld([0x32])                      #19
              04f5 c218  st   [$18]       2237  st([vAC])                       #20
              04f6 0133  ld   [$33]       2238  ld([0x33])                      #21
              04f7 c219  st   [$19]       2239  st([vAC+1])                     #22
              04f8 1403  ld   $03,y       2240  ld(hi('REENTER'),Y)             #23
              04f9 e0cb  jmp  y,$cb       2241  jmp(Y,'REENTER')                #24
              04fa 00f2  ld   $f2         2242  ld(-28/2)                       #25
                                          2243  # vRTI entry point
                                          2244  assert(pc()&255 == 251)         # The landing offset 251 for LUP trampoline is fixed
              04fb f0f0  beq  vRTI#15     2245  beq('vRTI#15')                  #13 vRTI sequence
              04fc 9001  adda $01,x       2246  adda(1,X)                       #14
              04fd 140e  ld   $0e,y       2247  ld(hi('vRTI#18'),Y)             #15 Switch and wait for end of timeslice (slower)
              04fe e020  jmp  y,$20       2248  jmp(Y,'vRTI#18')                #16
              04ff c21d  st   [$1d]       2249  st([vTmp])                      #17
                                          2250
                                          2251  #-----------------------------------------------------------------------
                                          2252  #
                                          2253  #  $0500 ROM page 5-6: Shift table and code
                                          2254  #
                                          2255  #-----------------------------------------------------------------------
                                          2256
                                          2257  align(0x100, size=0x200)
                                          2258
                                          2259  # Lookup table for i>>n, with n in 1..6
                                          2260  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2261  #       ...
                                          2262  #       ld   <.ret
                                          2263  #       st   [vTmp]
                                          2264  #       ld   >shiftTable,y
                                          2265  #       <calculate ix>
                                          2266  #       jmp  y,ac
                                          2267  #       bra  $ff
                                          2268  # .ret: ...
                                          2269  #
                                          2270  # i >> 7 can be always be done with RAM: [i&128]
                                          2271  #       ...
                                          2272  #       anda $80,x
                                          2273  #       ld   [x]
                                          2274  #       ...
                                          2275
                                          2276  label('shiftTable')
                                          2277  shiftTable = pc()
                                          2278
                                          2279  for ix in range(255):
                                          2280    for n in range(1,7): # Find first zero
                                          2281      if ~ix & (1 << (n-1)):
                                          2282        break
                                          2283    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2284    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b00xxxxxx >> 6
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0001  ld   $01         ;0b01xxxxxx >> 6
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0002  ld   $02         ;0b10xxxxxx >> 6
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2285
                                          2286  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2287  bra([vTmp])                     # Jumps back into next page
                                          2288
                                          2289  label('SYS_LSRW1_48')
                                          2290  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2291  nop()                           #15
              0601 1405  ld   $05,y       2292  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2293  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2294  st([vTmp])                      #18
              0604 0118  ld   [$18]       2295  ld([vAC])                       #19
              0605 20fe  anda $fe         2296  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2297  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2298  bra(255)                        #22 bra shiftTable+255
                                          2299  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2300  st([vAC])                       #26
              0609 0119  ld   [$19]       2301  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2302  anda(1)                         #28
              060b 807f  adda $7f         2303  adda(127)                       #29
              060c 2080  anda $80         2304  anda(128)                       #30
              060d 4118  ora  [$18]       2305  ora([vAC])                      #31
              060e c218  st   [$18]       2306  st([vAC])                       #32
              060f 0015  ld   $15         2307  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2308  st([vTmp])                      #34
              0611 0119  ld   [$19]       2309  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2310  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2311  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2312  bra(255)                        #38 bra shiftTable+255
                                          2313  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2314  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2315  ld(hi('REENTER'),Y)             #43
              0617 e0cb  jmp  y,$cb       2316  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2317  ld(-48/2)                       #45
                                          2318
                                          2319  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2320  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2321  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2322  st([vTmp])                      #17
              061c 0118  ld   [$18]       2323  ld([vAC])                       #18
              061d 20fc  anda $fc         2324  anda(0b11111100)                #19
              061e 4001  ora  $01         2325  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2326  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2327  bra(255)                        #22 bra shiftTable+255
                                          2328  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2329  st([vAC])                       #26
              0622 0119  ld   [$19]       2330  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2331  adda(AC)                        #28
              0624 8200  adda ac          2332  adda(AC)                        #29
              0625 8200  adda ac          2333  adda(AC)                        #30
              0626 8200  adda ac          2334  adda(AC)                        #31
              0627 8200  adda ac          2335  adda(AC)                        #32
              0628 8200  adda ac          2336  adda(AC)                        #33
              0629 4118  ora  [$18]       2337  ora([vAC])                      #34
              062a c218  st   [$18]       2338  st([vAC])                       #35
              062b 0032  ld   $32         2339  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2340  st([vTmp])                      #37
              062d 0119  ld   [$19]       2341  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2342  anda(0b11111100)                #39
              062f 4001  ora  $01         2343  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2344  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2345  bra(255)                        #42 bra shiftTable+255
                                          2346  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2347  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2348  ld(hi('REENTER'),Y)             #47
              0634 e0cb  jmp  y,$cb       2349  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2350  ld(-52/2)                       #49
                                          2351
                                          2352  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2353  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2354  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2355  st([vTmp])                      #17
              0639 0118  ld   [$18]       2356  ld([vAC])                       #18
              063a 20f8  anda $f8         2357  anda(0b11111000)                #19
              063b 4003  ora  $03         2358  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2359  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2360  bra(255)                        #22 bra shiftTable+255
                                          2361  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2362  st([vAC])                       #26
              063f 0119  ld   [$19]       2363  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2364  adda(AC)                        #28
              0641 8200  adda ac          2365  adda(AC)                        #29
              0642 8200  adda ac          2366  adda(AC)                        #30
              0643 8200  adda ac          2367  adda(AC)                        #31
              0644 8200  adda ac          2368  adda(AC)                        #32
              0645 4118  ora  [$18]       2369  ora([vAC])                      #33
              0646 c218  st   [$18]       2370  st([vAC])                       #34
              0647 004e  ld   $4e         2371  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2372  st([vTmp])                      #36
              0649 0119  ld   [$19]       2373  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2374  anda(0b11111000)                #38
              064b 4003  ora  $03         2375  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2376  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2377  bra(255)                        #41 bra shiftTable+255
                                          2378  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2379  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2380  ld(-52/2)                       #46
              0650 1403  ld   $03,y       2381  ld(hi('REENTER'),Y)             #47
              0651 e0cb  jmp  y,$cb       2382  jmp(Y,'REENTER')                #48
                                          2383  #nop()                          #49
                                          2384
                                          2385  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2386  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2387  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2388  st([vTmp])                      #17
              0655 0118  ld   [$18]       2389  ld([vAC])                       #18
              0656 20f0  anda $f0         2390  anda(0b11110000)                #19
              0657 4007  ora  $07         2391  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2392  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2393  bra(255)                        #22 bra shiftTable+255
                                          2394  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2395  st([vAC])                       #26
              065b 0119  ld   [$19]       2396  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2397  adda(AC)                        #28
              065d 8200  adda ac          2398  adda(AC)                        #29
              065e 8200  adda ac          2399  adda(AC)                        #30
              065f 8200  adda ac          2400  adda(AC)                        #31
              0660 4118  ora  [$18]       2401  ora([vAC])                      #32
              0661 c218  st   [$18]       2402  st([vAC])                       #33
              0662 0069  ld   $69         2403  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2404  st([vTmp])                      #35
              0664 0119  ld   [$19]       2405  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2406  anda(0b11110000)                #37
              0666 4007  ora  $07         2407  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2408  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2409  bra(255)                        #40 bra shiftTable+255
                                          2410  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2411  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2412  ld(hi('REENTER'),Y)             #45
              066b e0cb  jmp  y,$cb       2413  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2414  ld(-50/2)                       #47
                                          2415
                                          2416  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2417  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2418  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2419  st([vTmp])                      #17
              0670 0118  ld   [$18]       2420  ld([vAC])                       #18
              0671 20e0  anda $e0         2421  anda(0b11100000)                #19
              0672 400f  ora  $0f         2422  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2423  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2424  bra(255)                        #22 bra shiftTable+255
                                          2425  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2426  st([vAC])                       #26
              0676 0119  ld   [$19]       2427  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2428  adda(AC)                        #28
              0678 8200  adda ac          2429  adda(AC)                        #29
              0679 8200  adda ac          2430  adda(AC)                        #30
              067a 4118  ora  [$18]       2431  ora([vAC])                      #31
              067b c218  st   [$18]       2432  st([vAC])                       #32
              067c 0083  ld   $83         2433  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2434  st([vTmp])                      #34
              067e 0119  ld   [$19]       2435  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2436  anda(0b11100000)                #36
              0680 400f  ora  $0f         2437  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2438  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2439  bra(255)                        #39 bra shiftTable+255
                                          2440  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2441  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2442  ld(-50/2)                       #45
              0685 1403  ld   $03,y       2443  ld(hi('REENTER'),Y)             #46
              0686 e0cb  jmp  y,$cb       2444  jmp(Y,'REENTER')                #47
                                          2445  #nop()                          #48
                                          2446
                                          2447  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2448  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2449  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2450  st([vTmp])                      #17
              068a 0118  ld   [$18]       2451  ld([vAC])                       #18
              068b 20c0  anda $c0         2452  anda(0b11000000)                #19
              068c 401f  ora  $1f         2453  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2454  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2455  bra(255)                        #22 bra shiftTable+255
                                          2456  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2457  st([vAC])                       #26
              0690 0119  ld   [$19]       2458  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2459  adda(AC)                        #28
              0692 8200  adda ac          2460  adda(AC)                        #29
              0693 4118  ora  [$18]       2461  ora([vAC])                      #30
              0694 c218  st   [$18]       2462  st([vAC])                       #31
              0695 009c  ld   $9c         2463  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2464  st([vTmp])                      #33
              0697 0119  ld   [$19]       2465  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2466  anda(0b11000000)                #35
              0699 401f  ora  $1f         2467  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2468  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2469  bra(255)                        #38 bra shiftTable+255
                                          2470  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2471  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2472  ld(hi('REENTER'),Y)             #43
              069e e0cb  jmp  y,$cb       2473  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2474  ld(-48/2)                       #45
                                          2475
                                          2476  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2477  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2478  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2479  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2480  ld([vAC+1])                     #18
              06a4 8200  adda ac          2481  adda(AC)                        #19
              06a5 8200  adda ac          2482  adda(AC)                        #20
              06a6 8200  adda ac          2483  adda(AC)                        #21
              06a7 8200  adda ac          2484  adda(AC)                        #22
              06a8 c219  st   [$19]       2485  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2486  ld([vAC])                       #24
              06aa 20f0  anda $f0         2487  anda(0b11110000)                #25
              06ab 4007  ora  $07         2488  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2489  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2490  bra(255)                        #28 bra shiftTable+255
                                          2491  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2492  ora([vAC+1])                    #32
              06af c219  st   [$19]       2493  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2494  ld([vAC])                       #34
              06b1 8200  adda ac          2495  adda(AC)                        #35
              06b2 8200  adda ac          2496  adda(AC)                        #36
              06b3 8200  adda ac          2497  adda(AC)                        #37
              06b4 8200  adda ac          2498  adda(AC)                        #38
              06b5 c218  st   [$18]       2499  st([vAC])                       #39
              06b6 00e9  ld   $e9         2500  ld(-46/2)                       #40
              06b7 1403  ld   $03,y       2501  ld(hi('REENTER'),Y)             #41
              06b8 e0cb  jmp  y,$cb       2502  jmp(Y,'REENTER')                #42
                                          2503  #nop()                          #43
                                          2504
                                          2505  #-----------------------------------------------------------------------
                                          2506  # Extension SYS_Read3_40
                                          2507  #-----------------------------------------------------------------------
                                          2508
                                          2509  # Read 3 consecutive bytes from ROM
                                          2510  #
                                          2511  # Note: This function a bit obsolete, as it has very limited use. It's
                                          2512  #       effectively an application-specific SYS function for the Pictures
                                          2513  #       application from ROM v1. It requires the ROM data be organized
                                          2514  #       with trampoline3a and trampoline3b fragments, and their address
                                          2515  #       in ROM to be known. Better avoid using this.
                                          2516  #
                                          2517  # Variables:
                                          2518  #       sysArgs[0:2]    Bytes (out)
                                          2519  #       sysArgs[6:7]    ROM pointer (in)
                                          2520
                                          2521  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2522  ld([sysArgs+7],Y)               #15,32
              06ba e079  jmp  y,$79       2523  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2524  ld([sysArgs+6])                 #17
                                          2525  label('txReturn')
txReturn:     06bc c226  st   [$26]       2526  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2527  ld(hi('REENTER'),Y)             #35
              06be e0cb  jmp  y,$cb       2528  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2529  ld(-40/2)                       #37
                                          2530
                                          2531  def trampoline3a():
                                          2532    """Read 3 bytes from ROM page"""
                                          2533    while pc()&255 < 128-7:
                                          2534      nop()
                                          2535    bra(AC)                       #18
                                          2536    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2537    bra(123)                      #19
                                          2538    st([sysArgs+0])               #21
                                          2539    ld([sysArgs+6])               #22
                                          2540    adda(1)                       #23
                                          2541    bra(AC)                       #24
                                          2542    bra(250)                      #25 trampoline3b
                                          2543    align(1, size=0x80)
                                          2544
                                          2545  def trampoline3b():
                                          2546    """Read 3 bytes from ROM page (continue)"""
                                          2547    while pc()&255 < 256-6:
                                          2548      nop()
                                          2549    st([sysArgs+1])               #27
                                          2550    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2551    ld([sysArgs+6])               #28
                                          2552    adda(2)                       #29
                                          2553    ld(hi('txReturn'),Y)          #30
                                          2554    bra(AC)                       #31
                                          2555    jmp(Y,'txReturn')             #32
                                          2556    align(1, size=0x100)
                                          2557
                                          2558  #-----------------------------------------------------------------------
                                          2559  # Extension SYS_Unpack_56
                                          2560  #-----------------------------------------------------------------------
                                          2561
                                          2562  # Unpack 3 bytes into 4 pixels
                                          2563  #
                                          2564  # Variables:
                                          2565  #       sysArgs[0:2]    Packed bytes (in)
                                          2566  #       sysArgs[0:3]    Pixels (out)
                                          2567
                                          2568  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2569  ld(soundTable>>8,Y)             #15
              06c1 0126  ld   [$26]       2570  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2571  ora(0x03,X)                     #17
              06c3 0d00  ld   [y,x]       2572  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2573  st([sysArgs+3])                 #19 -> Pixel 3
                                          2574
              06c5 0126  ld   [$26]       2575  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2576  anda(0x03)                      #21
              06c7 8200  adda ac          2577  adda(AC)                        #22
              06c8 8200  adda ac          2578  adda(AC)                        #23
              06c9 8200  adda ac          2579  adda(AC)                        #24
              06ca 8200  adda ac          2580  adda(AC)                        #25
              06cb c226  st   [$26]       2581  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2582  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2583  ora(0x03,X)                     #28
              06ce 0d00  ld   [y,x]       2584  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2585  ora(0x03,X)                     #30
              06d0 0d00  ld   [y,x]       2586  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2587  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2588  st([sysArgs+2])                 #33 -> Pixel 2
                                          2589
              06d3 0125  ld   [$25]       2590  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2591  anda(0x0f)                      #35
              06d5 8200  adda ac          2592  adda(AC)                        #36
              06d6 8200  adda ac          2593  adda(AC)                        #37
              06d7 c225  st   [$25]       2594  st([sysArgs+1])                 #38
                                          2595
              06d8 0124  ld   [$24]       2596  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2597  ora(0x03,X)                     #40
              06da 0d00  ld   [y,x]       2598  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2599  ora(0x03,X)                     #42
              06dc 0d00  ld   [y,x]       2600  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2601  ora(0x03,X)                     #44
              06de 0d00  ld   [y,x]       2602  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2603  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2604  st([sysArgs+1])                 #47 -> Pixel 1
                                          2605
              06e1 0124  ld   [$24]       2606  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2607  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2608  st([sysArgs+0])                 #50 -> Pixel 0
                                          2609
              06e4 1403  ld   $03,y       2610  ld(hi('REENTER'),Y)             #51
              06e5 e0cb  jmp  y,$cb       2611  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2612  ld(-56/2)                       #53
                                          2613
                                          2614
                                          2615  #-----------------------------------------------------------------------
                                          2616  #       Reserved
                                          2617  #-----------------------------------------------------------------------
                                          2618
                                          2619  # XXX Reserve space for LSRW?
                                          2620
                                          2621  #-----------------------------------------------------------------------
                                          2622  #
                                          2623  #  $0700 ROM page 7-8: Gigatron font data
                                          2624  #
                                          2625  #-----------------------------------------------------------------------
                                          2626
              06e7 0200  nop              2627  align(0x100, size=0x100)
              06e8 0200  nop
              06e9 0200  nop
              * 25 times
                                          2628
                                          2629  label('font32up')
                                          2630  for ch in range(32, 32+50):
                                          2631    comment = 'Char %s' % repr(chr(ch))
                                          2632    for byte in font.font[ch-32]:
                                          2633      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0030  ld   $30
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2634      comment = C(comment)
                                          2635
              07fa 0200  nop              2636  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e068  jmp  y,$68       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2637
                                          2638  #-----------------------------------------------------------------------
                                          2639
                                          2640  align(0x100, size=0x100)
                                          2641
                                          2642  label('font82up')
                                          2643  for ch in range(32+50, 132):
                                          2644    comment = 'Char %s' % repr(chr(ch))
                                          2645    for byte in font.font[ch-32]:
                                          2646      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0018  ld   $18
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2647      comment = C(comment)
                                          2648
              08fa 0200  nop              2649  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e068  jmp  y,$68       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2650
                                          2651  #-----------------------------------------------------------------------
                                          2652  #
                                          2653  #  $0900 ROM page 9: Key table for music
                                          2654  #
                                          2655  #-----------------------------------------------------------------------
                                          2656
                                          2657  align(0x100, size=0x100)
                                          2658  notes = 'CCDDEFFGGAAB'
                                          2659  sampleRate = cpuClock / 200.0 / 4
                                          2660  label('notesTable')
notesTable:   0900 0000  ld   $00         2661  ld(0)
              0901 0000  ld   $00         2662  ld(0)
                                          2663  for i in range(0, 250, 2):
                                          2664    j = i//2-1
                                          2665    freq = 440.0*2.0**((j-57)/12.0)
                                          2666    if j>=0 and freq <= sampleRate/2.0:
                                          2667      key = int(round(32768 * freq / sampleRate))
                                          2668      octave, note = j//12, notes[j%12]
                                          2669      sharp = '-' if notes[j%12-1] != note else '#'
                                          2670      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2671      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2672
              09c0 0200  nop              2673  trampoline()
              09c1 0200  nop
              09c2 0200  nop
              * 59 times
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e068  jmp  y,$68       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2674
                                          2675  #-----------------------------------------------------------------------
                                          2676  #
                                          2677  #  $0a00 ROM page 10: Inversion table
                                          2678  #
                                          2679  #-----------------------------------------------------------------------
                                          2680
                                          2681  align(0x100, size=0x100)
                                          2682  label('invTable')
                                          2683
                                          2684  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2685  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2686    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2687
                                          2688  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e068  jmp  y,$68       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2689
                                          2690  #-----------------------------------------------------------------------
                                          2691  #
                                          2692  #  $0d00 ROM page 11: More SYS functions
                                          2693  #
                                          2694  #-----------------------------------------------------------------------
                                          2695
                                          2696  align(0x100, size=0x100)
                                          2697
                                          2698  #-----------------------------------------------------------------------
                                          2699  # Extension SYS_SetMode_v2_80
                                          2700  #-----------------------------------------------------------------------
                                          2701
                                          2702  # Set video mode to 0 to 3 black scanlines per pixel line.
                                          2703  #
                                          2704  # Mainly for making the MODE command available in Tiny BASIC, so that
                                          2705  # the user can experiment. It's adviced to refrain from using
                                          2706  # SYS_SetMode_v2_80 in regular applications. Video mode is a deeply
                                          2707  # personal preference, and the programmer shouldn't overrule the user
                                          2708  # in that choice. The Gigatron philisophy is that the end user has
                                          2709  # the final say on what happens on the system, not the application,
                                          2710  # even if that implies a degraded performance. This doesn't mean that
                                          2711  # all applications must work well in all video modes: mode 1 is still
                                          2712  # the default. If an application really doesn't work at all in that
                                          2713  # mode, it's acceptable to change mode once after loading.
                                          2714  #
                                          2715  # There's no "SYS_GetMode" function.
                                          2716  #
                                          2717  # Variables:
                                          2718  #       vAC bit 0:1     Mode:
                                          2719  #                         0      "ABCD" -> Full mode (slowest)
                                          2720  #                         1      "ABC-" -> Default mode after reset
                                          2721  #                         2      "A-C-" -> at67's mode
                                          2722  #                         3      "A---" -> HGM's mode
                                          2723  #       vAC bit 2:15    Ignored bits and should be 0
                                          2724  #
                                          2725  # Special values (ROM v4):
                                          2726  #       vAC = 1975      Zombie mode (no video signals, no input,
                                          2727  #                        no blinkenlights).
                                          2728  #       vAC = -1        Leave zombie mode and restore previous mode.
                                          2729
                                          2730  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2731  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2732  ld(hi('sys_SetMode'),Y)         #15
              0b01 e054  jmp  y,$54       2733  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2734  ld([vReturn])                   #17
                                          2735
                                          2736  #-----------------------------------------------------------------------
                                          2737  # Extension SYS_SetMemory_v2_54
                                          2738  #-----------------------------------------------------------------------
                                          2739
                                          2740  # SYS function for setting 1..256 bytes
                                          2741  #
                                          2742  # sysArgs[0]   Copy count (in, changed)
                                          2743  # sysArgs[1]   Copy value (in)
                                          2744  # sysArgs[2:3] Destination address (in, changed)
                                          2745  #
                                          2746  # Sets up to 8 bytes per invocation before restarting itself through vCPU.
                                          2747  # Doesn't wrap around page boundary. Can run 3 times per 148-cycle time slice.
                                          2748  # All combined that gives a 300% speedup over ROMv4 and before.
                                          2749
                                          2750  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:
              0b03 0124  ld   [$24]       2751  ld([sysArgs+0])                 #15
                                          2752  bra('sys_SetMemory#18')         #16
              0b04 fc18  bra  sys_SetMemory#18
              0b05 1126  ld   [$26],x     2753  ld([sysArgs+2],X)               #17
                                          2754
                                          2755  #-----------------------------------------------------------------------
                                          2756  # Extension SYS_SendSerial1_v3_80
                                          2757  #-----------------------------------------------------------------------
                                          2758
                                          2759  # SYS function for sending data over serial controller port using
                                          2760  # pulse width modulation of the vertical sync signal.
                                          2761  #
                                          2762  # Variables:
                                          2763  #       sysArgs[0:1]    Source address               (in, changed)
                                          2764  #       sysArgs[2]      Start bit mask (typically 1) (in, changed)
                                          2765  #       sysArgs[3]      Number of send frames X      (in, changed)
                                          2766  #
                                          2767  # The sending will abort if input data is detected on the serial port.
                                          2768  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2769  #
                                          2770  # This modulates the next upcoming X vertical pulses with the supplied
                                          2771  # data. A zero becomes a 7 line vPulse, a one will be 9 lines.
                                          2772  # After that, the vPulse width falls back to 8 lines (idle).
                                          2773
                                          2774  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2775  ld([videoY])                    #15
                                          2776  bra('sys_SendSerial1')          #16
              0b07 fc83  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2777  xora(videoYline0)               #17 First line of vertical blank
                                          2778
                                          2779  #-----------------------------------------------------------------------
                                          2780  # Extension SYS_ExpanderControl_v4_40
                                          2781  #-----------------------------------------------------------------------
                                          2782
                                          2783  # Sets the I/O and RAM expander's control register
                                          2784  #
                                          2785  # Variables:
                                          2786  #       vAC bit 2       Device enable /SS0
                                          2787  #           bit 3       Device enable /SS1
                                          2788  #           bit 4       Device enable /SS2
                                          2789  #           bit 5       Device enable /SS3
                                          2790  #           bit 6       Banking B0
                                          2791  #           bit 7       Banking B1
                                          2792  #           bit 15      Data out MOSI
                                          2793  #       sysArgs[7]      Cache for control state (written to)
                                          2794  #
                                          2795  # Intended for prototyping, and probably too low-level for most applications
                                          2796  # Still there's a safeguard: it's not possible to disable RAM using this
                                          2797
                                          2798  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140c  ld   $0c,y       2799  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e0fb  jmp  y,$fb       2800  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 00fc  ld   $fc         2801  ld(0b11111100)                  #17 Safety (SCLK=0)
                                          2802  #    ^^^^^^^^
                                          2803  #    |||||||`-- SCLK
                                          2804  #    ||||||`--- Not connected
                                          2805  #    |||||`---- /SS0
                                          2806  #    ||||`----- /SS1
                                          2807  #    |||`------ /SS2
                                          2808  #    ||`------- /SS3
                                          2809  #    |`-------- B0
                                          2810  #    `--------- B1
                                          2811
                                          2812
                                          2813  label('SPARE0')
SPARE0:       0b0c 140b  ld   $0b,y       2814  ld(hi('SPARE0'),Y)           #15
              0b0d e00c  jmp  y,$0c       2815  jmp(Y,'SPARE0')              #16
              0b0e 000b  ld   $0b         2816  ld(hi('SPARE0'))             #17
                                          2817
                                          2818
                                          2819  #-----------------------------------------------------------------------
                                          2820  # Extension SYS_ResetWaveforms_v4_50
                                          2821  #-----------------------------------------------------------------------
                                          2822
                                          2823  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          2824  # soundTable[4x+1] = pulse
                                          2825  # soundTable[4x+2] = triangle
                                          2826  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          2827
                                          2828  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 140e  ld   $0e,y       2829  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e0ae  jmp  y,$ae       2830  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       2831  ld(soundTable>>8,Y)             #17
                                          2832
                                          2833  #-----------------------------------------------------------------------
                                          2834  # Extension SYS_ShuffleNoise_v4_46
                                          2835  #-----------------------------------------------------------------------
                                          2836
                                          2837  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          2838
                                          2839  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 140e  ld   $0e,y       2840  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e0cf  jmp  y,$cf       2841  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       2842  ld(soundTable>>8,Y)             #17
                                          2843
                                          2844  #-----------------------------------------------------------------------
                                          2845  # Extension SYS_SpiExchangeBytes_v4_134
                                          2846  #-----------------------------------------------------------------------
                                          2847
                                          2848  # Send AND receive 1..256 bytes over SPI interface
                                          2849
                                          2850  # Variables:
                                          2851  #       sysArgs[0]      Page index start, for both send/receive (in, changed)
                                          2852  #       sysArgs[1]      Memory page for send data (in)
                                          2853  #       sysArgs[2]      Page index stop (in)
                                          2854  #       sysArgs[3]      Memory page for receive data (in)
                                          2855  #       sysArgs[4]      Scratch (changed)
                                          2856
                                          2857  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       2858  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e009  jmp  y,$09       2859  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1401  ld   $01,y       2860  ld(hi(ctrlBits),Y)              #17 Control state as saved by SYS_ExpanderControl
                                          2861
                                          2862  #-----------------------------------------------------------------------
                                          2863  #  Implementations
                                          2864  #-----------------------------------------------------------------------
                                          2865
                                          2866  # SYS_SetMemory_54 implementation
                                          2867  label('sys_SetMemory#18')
sys_SetMemory#18:
              0b18 1527  ld   [$27],y     2868  ld([sysArgs+3],Y)               #18
              0b19 f83c  ble  .sysSb#21   2869  ble('.sysSb#21')                #19 Enter fast lane if >=128 or at 0 (-> 256)
              0b1a a008  suba $08         2870  suba(8)                         #20
              0b1b f43e  bge  .sysSb#23   2871  bge('.sysSb#23')                #21 Or when >=8
              0b1c c224  st   [$24]       2872  st([sysArgs+0])                 #22
              0b1d 2004  anda $04         2873  anda(4)                         #23
              0b1e f025  beq  .sysSb#26   2874  beq('.sysSb#26')                #24
              0b1f 0125  ld   [$25]       2875  ld([sysArgs+1])                 #25 Set 4 pixels
              0b20 de00  st   [y,x++]     2876  st([Y,Xpp])                     #26
              0b21 de00  st   [y,x++]     2877  st([Y,Xpp])                     #27
              0b22 de00  st   [y,x++]     2878  st([Y,Xpp])                     #28
              0b23 fc28  bra  .sysSb#31   2879  bra('.sysSb#31')                #29
              0b24 de00  st   [y,x++]     2880  st([Y,Xpp])                     #30
                                          2881  label('.sysSb#26')
.sysSb#26:    0b25 0001  ld   $01         2882  wait(31-26)                     #26
              0b26 ec26  bne  $0b26
              0b27 a001  suba $01
                                          2883  label('.sysSb#31')
.sysSb#31:    0b28 0124  ld   [$24]       2884  ld([sysArgs+0])                 #31
              0b29 2002  anda $02         2885  anda(2)                         #32
              0b2a f02f  beq  .sysSb#35   2886  beq('.sysSb#35')                #33
              0b2b 0125  ld   [$25]       2887  ld([sysArgs+1])                 #34 Set 2 pixels
              0b2c de00  st   [y,x++]     2888  st([Y,Xpp])                     #35
              0b2d fc32  bra  .sysSb#38   2889  bra('.sysSb#38')                #36
              0b2e de00  st   [y,x++]     2890  st([Y,Xpp])                     #37
                                          2891  label('.sysSb#35')
.sysSb#35:    0b2f 0200  nop              2892  wait(38-35)                     #35
              0b30 0200  nop
              0b31 0200  nop
                                          2893  label('.sysSb#38')
.sysSb#38:    0b32 0124  ld   [$24]       2894  ld([sysArgs+0])                 #38
              0b33 2001  anda $01         2895  anda(1)                         #39
              0b34 f037  beq  $0b37       2896  beq(pc()+3)                     #40
              0b35 fc38  bra  $0b38       2897  bra(pc()+3)                     #41
              0b36 0125  ld   [$25]       2898  ld([sysArgs+1])                 #42 Set 1 pixel
              0b37 0d00  ld   [y,x]       2899  ld([Y,X])                       #42(!) No change
              0b38 ce00  st   [y,x]       2900  st([Y,X])                       #43
              0b39 1403  ld   $03,y       2901  ld(hi('NEXTY'),Y)               #44 Return
              0b3a e000  jmp  y,$00       2902  jmp(Y,'NEXTY')                  #45 All done
              0b3b 00e8  ld   $e8         2903  ld(-48/2)                       #46
                                          2904  label('.sysSb#21')
.sysSb#21:    0b3c 0200  nop              2905  nop()                           #21
              0b3d c224  st   [$24]       2906  st([sysArgs+0])                 #22
                                          2907  label('.sysSb#23')
.sysSb#23:    0b3e 0125  ld   [$25]       2908  ld([sysArgs+1])                 #23 Set 8 pixels
              0b3f de00  st   [y,x++]     2909  st([Y,Xpp])                     #24
              0b40 de00  st   [y,x++]     2910  st([Y,Xpp])                     #25
              0b41 de00  st   [y,x++]     2911  st([Y,Xpp])                     #26
              0b42 de00  st   [y,x++]     2912  st([Y,Xpp])                     #27
              0b43 de00  st   [y,x++]     2913  st([Y,Xpp])                     #28
              0b44 de00  st   [y,x++]     2914  st([Y,Xpp])                     #29
              0b45 de00  st   [y,x++]     2915  st([Y,Xpp])                     #30
              0b46 de00  st   [y,x++]     2916  st([Y,Xpp])                     #31
              0b47 0126  ld   [$26]       2917  ld([sysArgs+2])                 #32 Advance write pointer
              0b48 8008  adda $08         2918  adda(8)                         #33
              0b49 c226  st   [$26]       2919  st([sysArgs+2])                 #34
              0b4a 0124  ld   [$24]       2920  ld([sysArgs+0])                 #35
              0b4b f04e  beq  $0b4e       2921  beq(pc()+3)                     #36
              0b4c fc4f  bra  $0b4f       2922  bra(pc()+3)                     #37
              0b4d 00fe  ld   $fe         2923  ld(-2)                          #38 Self-restart when more to do
              0b4e 0000  ld   $00         2924  ld(0)                           #38(!)
              0b4f 8116  adda [$16]       2925  adda([vPC])                     #39
              0b50 c216  st   [$16]       2926  st([vPC])                       #40
              0b51 1403  ld   $03,y       2927  ld(hi('REENTER'),Y)             #41
              0b52 e0cb  jmp  y,$cb       2928  jmp(Y,'REENTER')                #42
              0b53 00e9  ld   $e9         2929  ld(-46/2)                       #43
                                          2930
                                          2931  # SYS_SetMode_80 implementation
                                          2932  label('sys_SetMode')
sys_SetMode:  0b54 ec57  bne  $0b57       2933  bne(pc()+3)                     #18
              0b55 fc57  bra  $0b57       2934  bra(pc()+2)                     #19
              0b56 0003  ld   $03         2935  ld('startVideo')                #20 First enable video if disabled
              0b57 c21e  st   [$1e]       2936  st([vReturn])                   #20,21
              0b58 0119  ld   [$19]       2937  ld([vAC+1])                     #22
              0b59 f063  beq  .sysSm#25   2938  beq('.sysSm#25')                #23
              0b5a 1403  ld   $03,y       2939  ld(hi('REENTER'),Y)             #24
              0b5b 6118  xora [$18]       2940  xora([vAC])                     #25
              0b5c 60b0  xora $b0         2941  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b5d ec60  bne  $0b60       2942  bne(pc()+3)                     #27
              0b5e fc61  bra  $0b61       2943  bra(pc()+3)                     #28
                                          2944  assert videoZ == 0x0100
              0b5f c21e  st   [$1e]       2945  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b60 0200  nop              2946  nop()                           #29(!) Ignore and return
              0b61 e0cb  jmp  y,$cb       2947  jmp(Y,'REENTER')                #30
              0b62 00ef  ld   $ef         2948  ld(-34/2)                       #31
                                          2949  label('.sysSm#25')
.sysSm#25:    0b63 0118  ld   [$18]       2950  ld([vAC])                       #25 Mode 0,1,2,3
              0b64 2003  anda $03         2951  anda(3)                         #26
              0b65 8068  adda $68         2952  adda('.sysSm#30')               #27
              0b66 fe00  bra  ac          2953  bra(AC)                         #28
              0b67 fc6c  bra  .sysSm#31   2954  bra('.sysSm#31')                #29
                                          2955  label('.sysSm#30')
.sysSm#30:    0b68 000a  ld   $0a         2956  ld('pixels')                    #30 videoB lines
              0b69 000a  ld   $0a         2957  ld('pixels')                    #30
              0b6a 00f6  ld   $f6         2958  ld('nopixels')                  #30
              0b6b 00f6  ld   $f6         2959  ld('nopixels')                  #30
                                          2960  label('.sysSm#31')
.sysSm#31:    0b6c c20a  st   [$0a]       2961  st([videoModeB])                #31
              0b6d 0118  ld   [$18]       2962  ld([vAC])                       #32
              0b6e 2003  anda $03         2963  anda(3)                         #33
              0b6f 8072  adda $72         2964  adda('.sysSm#37')               #34
              0b70 fe00  bra  ac          2965  bra(AC)                         #35
              0b71 fc76  bra  .sysSm#38   2966  bra('.sysSm#38')                #36
                                          2967  label('.sysSm#37')
.sysSm#37:    0b72 000a  ld   $0a         2968  ld('pixels')                    #37 videoC lines
              0b73 000a  ld   $0a         2969  ld('pixels')                    #37
              0b74 000a  ld   $0a         2970  ld('pixels')                    #37
              0b75 00f6  ld   $f6         2971  ld('nopixels')                  #37
                                          2972  label('.sysSm#38')
.sysSm#38:    0b76 c20b  st   [$0b]       2973  st([videoModeC])                #38
              0b77 0118  ld   [$18]       2974  ld([vAC])                       #39
              0b78 2003  anda $03         2975  anda(3)                         #40
              0b79 807c  adda $7c         2976  adda('.sysSm#44')               #41
              0b7a fe00  bra  ac          2977  bra(AC)                         #42
              0b7b fc80  bra  .sysSm#45   2978  bra('.sysSm#45')                #43
                                          2979  label('.sysSm#44')
.sysSm#44:    0b7c 000a  ld   $0a         2980  ld('pixels')                    #44 videoD lines
              0b7d 00f6  ld   $f6         2981  ld('nopixels')                  #44
              0b7e 00f6  ld   $f6         2982  ld('nopixels')                  #44
              0b7f 00f6  ld   $f6         2983  ld('nopixels')                  #44
                                          2984  label('.sysSm#45')
.sysSm#45:    0b80 c20c  st   [$0c]       2985  st([videoModeD])                #45
              0b81 e0cb  jmp  y,$cb       2986  jmp(Y,'REENTER')                #46
              0b82 00e7  ld   $e7         2987  ld(-50/2)                       #47
                                          2988
                                          2989  # SYS_SendSerial1_v3_80 implementation
                                          2990  label('sys_SendSerial1')
sys_SendSerial1:
              0b83 f08a  beq  .sysSs#20   2991  beq('.sysSs#20')                #18
              0b84 1124  ld   [$24],x     2992  ld([sysArgs+0],X)               #19
              0b85 0116  ld   [$16]       2993  ld([vPC])                       #20 Wait for vBlank
              0b86 a002  suba $02         2994  suba(2)                         #21
              0b87 1403  ld   $03,y       2995  ld(hi('REENTER_28'),Y)          #22
              0b88 e0ca  jmp  y,$ca       2996  jmp(Y,'REENTER_28')             #23
              0b89 c216  st   [$16]       2997  st([vPC])                       #24
                                          2998  label('.sysSs#20')
.sysSs#20:    0b8a 1525  ld   [$25],y     2999  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b8b 0d00  ld   [y,x]       3000  ld([Y,X])                       #21 Copy next bit
              0b8c 2126  anda [$26]       3001  anda([sysArgs+2])               #22
              0b8d ec90  bne  $0b90       3002  bne(pc()+3)                     #23
              0b8e fc91  bra  $0b91       3003  bra(pc()+3)                     #24
              0b8f 000e  ld   $0e         3004  ld(7*2)                         #25
              0b90 0012  ld   $12         3005  ld(9*2)                         #25
              0b91 c20d  st   [$0d]       3006  st([videoPulse])                #26
              0b92 0126  ld   [$26]       3007  ld([sysArgs+2])                 #27 Rotate input bit
              0b93 8200  adda ac          3008  adda(AC)                        #28
              0b94 ec97  bne  $0b97       3009  bne(pc()+3)                     #29
              0b95 fc97  bra  $0b97       3010  bra(pc()+2)                     #30
              0b96 0001  ld   $01         3011  ld(1)                           #31
              0b97 c226  st   [$26]       3012  st([sysArgs+2])                 #31,32 (must be idempotent)
              0b98 2001  anda $01         3013  anda(1)                         #33 Optionally increment pointer
              0b99 8124  adda [$24]       3014  adda([sysArgs+0])               #34
              0b9a d224  st   [$24],x     3015  st([sysArgs+0],X)               #35
              0b9b 0127  ld   [$27]       3016  ld([sysArgs+3])                 #36 Frame counter
              0b9c a001  suba $01         3017  suba(1)                         #37
              0b9d f0ac  beq  .sysSs#40   3018  beq('.sysSs#40')                #38
              0b9e 1403  ld   $03,y       3019  ld(hi('REENTER'),Y)             #39
              0b9f c227  st   [$27]       3020  st([sysArgs+3])                 #40
              0ba0 010f  ld   [$0f]       3021  ld([serialRaw])                 #41 Test for anything being sent back
              0ba1 60ff  xora $ff         3022  xora(255)                       #42
              0ba2 f0a7  beq  .sysSs#45   3023  beq('.sysSs#45')                #43
              0ba3 c218  st   [$18]       3024  st([vAC])                       #44 Abort after key press with non-zero error
              0ba4 c219  st   [$19]       3025  st([vAC+1])                     #45
              0ba5 e0cb  jmp  y,$cb       3026  jmp(Y,'REENTER')                #46
              0ba6 00e7  ld   $e7         3027  ld(-50/2)                       #47
                                          3028  label('.sysSs#45')
.sysSs#45:    0ba7 0116  ld   [$16]       3029  ld([vPC])                       #45 Continue sending bits
              0ba8 a002  suba $02         3030  suba(2)                         #46
              0ba9 c216  st   [$16]       3031  st([vPC])                       #47
              0baa e0cb  jmp  y,$cb       3032  jmp(Y,'REENTER')                #48
              0bab 00e6  ld   $e6         3033  ld(-52/2)                       #49
                                          3034  label('.sysSs#40')
.sysSs#40:    0bac c218  st   [$18]       3035  st([vAC])                       #40 Stop sending bits, no error
              0bad c219  st   [$19]       3036  st([vAC+1])                     #41
              0bae e0cb  jmp  y,$cb       3037  jmp(Y,'REENTER')                #42
              0baf 00e9  ld   $e9         3038  ld(-46/2)                       #43
                                          3039
                                          3040  # CALLI implementation (vCPU instruction)
                                          3041  label('calli#13')
calli#13:     0bb0 8003  adda $03         3042  adda(3)                         #13,43
              0bb1 c21a  st   [$1a]       3043  st([vLR])                       #14
              0bb2 0117  ld   [$17]       3044  ld([vPC+1])                     #15
              0bb3 d61b  st   [$1b],y     3045  st([vLR+1],Y)                   #16
              0bb4 0d00  ld   [y,x]       3046  ld([Y,X])                       #17
              0bb5 de00  st   [y,x++]     3047  st([Y,Xpp])                     #18 Just X++
              0bb6 a002  suba $02         3048  suba(2)                         #19
              0bb7 c216  st   [$16]       3049  st([vPC])                       #20
              0bb8 0d00  ld   [y,x]       3050  ld([Y,X])                       #21
              0bb9 1403  ld   $03,y       3051  ld(hi('REENTER_28'),Y)          #22
              0bba e0ca  jmp  y,$ca       3052  jmp(Y,'REENTER_28')             #23
              0bbb c217  st   [$17]       3053  st([vPC+1])                     #24
                                          3054
                                          3055  # -------------------------------------------------------------
                                          3056  # vCPU instructions for comparisons between two 16-bit operands
                                          3057  # -------------------------------------------------------------
                                          3058  #
                                          3059  # vCPU's conditional branching (BCC) always compares vAC against 0,
                                          3060  # treating vAC as a two's complement 16-bit number. When we need to
                                          3061  # compare two arbitrary numnbers we normally first take their difference
                                          3062  # with SUBW.  However, when this difference is too large, the subtraction
                                          3063  # overflows and we get the wrong outcome. To get it right over the
                                          3064  # entire range, an elaborate sequence is needed. TinyBASIC uses this
                                          3065  # blurp for its relational operators. (It compares stack variable $02
                                          3066  # with zero page variable $3a.)
                                          3067  #
                                          3068  #       0461  ee 02            LDLW  $02
                                          3069  #       0463  fc 3a            XORW  $3a
                                          3070  #       0465  35 53 6a         BGE   $046c
                                          3071  #       0468  ee 02            LDLW  $02
                                          3072  #       046a  90 6e            BRA   $0470
                                          3073  #       046c  ee 02            LDLW  $02
                                          3074  #       046e  b8 3a            SUBW  $3a
                                          3075  #       0470  35 56 73         BLE   $0475
                                          3076  #
                                          3077  # The CMPHS and CMPHU instructions were introduced to simplify this.
                                          3078  # They inspect both operands to see if there is an overflow risk. If
                                          3079  # so, they modify vAC such that their difference gets smaller, while
                                          3080  # preserving the relation between the two operands. After that, the
                                          3081  # SUBW instruction can't overflow and we achieve a correct comparison.
                                          3082  # Use CMPHS for signed comparisons and CMPHU for unsigned. With these,
                                          3083  # the sequence above becomes:
                                          3084  #
                                          3085  #       0461  ee 02            LDLW  $02
                                          3086  #       0463  1f 3b            CMPHS $3b        Note: high byte of operand
                                          3087  #       0465  b8 3a            SUBW  $3a
                                          3088  #       0467  35 56 73         BLE   $0475
                                          3089  #
                                          3090  # CMPHS/CMPHU don't make much sense other than in combination with
                                          3091  # SUBW. These modify vACH, if needed, as given in the following table:
                                          3092  #
                                          3093  #       vACH  varH  |     vACH
                                          3094  #       bit7  bit7  | CMPHS  CMPHU
                                          3095  #       ---------------------------
                                          3096  #         0     0   |  vACH   vACH      no change needed
                                          3097  #         0     1   | varH+1 varH-1     narrowing the range
                                          3098  #         1     0   | varH-1 varH+1     narrowing the range
                                          3099  #         1     1   |  vACH   vACH      no change needed
                                          3100  #       ---------------------------
                                          3101
                                          3102  # CMPHS implementation (vCPU instruction)
                                          3103  label('cmphs#13')
cmphs#13:     0bbc 1403  ld   $03,y       3104  ld(hi('REENTER'),Y)             #13
              0bbd 0500  ld   [x]         3105  ld([X])                         #14
              0bbe 6119  xora [$19]       3106  xora([vAC+1])                   #15
              0bbf f4d0  bge  .cmphu#18   3107  bpl('.cmphu#18')                #16 Skip if same sign
              0bc0 0119  ld   [$19]       3108  ld([vAC+1])                     #17
              0bc1 e8c4  blt  $0bc4       3109  bmi(pc()+3)                     #18
              0bc2 fcc5  bra  .cmphs#21   3110  bra(pc()+3)                     #19
                                          3111  label('.cmphs#20')
.cmphs#20:    0bc3 0001  ld   $01         3112  ld(+1)                          #20    vAC < variable
              0bc4 00ff  ld   $ff         3113  ld(-1)                          #20(!) vAC > variable
                                          3114  label('.cmphs#21')
.cmphs#21:    0bc5 8500  adda [x]         3115  adda([X])                       #21
              0bc6 c219  st   [$19]       3116  st([vAC+1])                     #22
              0bc7 e0ca  jmp  y,$ca       3117  jmp(Y,'REENTER_28')             #23
                                          3118  #dummy()                        #24 Overlap
                                          3119  #
                                          3120  # CMPHS implementation (vCPU instruction)
                                          3121  label('cmphu#13')
cmphu#13:     0bc8 1403  ld   $03,y       3122  ld(hi('REENTER'),Y)             #13,24
              0bc9 0500  ld   [x]         3123  ld([X])                         #14
              0bca 6119  xora [$19]       3124  xora([vAC+1])                   #15
              0bcb f4d0  bge  .cmphu#18   3125  bpl('.cmphu#18')                #16 Skip if same sign
              0bcc 0119  ld   [$19]       3126  ld([vAC+1])                     #17
              0bcd e8c3  blt  .cmphs#20   3127  bmi('.cmphs#20')                #18
              0bce fcc5  bra  .cmphs#21   3128  bra('.cmphs#21')                #19
              0bcf 00ff  ld   $ff         3129  ld(-1)                          #20    vAC > variable
                                          3130
                                          3131  # No-operation for CMPHS/CMPHU when high bits are equal
                                          3132  label('.cmphu#18')
.cmphu#18:    0bd0 e0cb  jmp  y,$cb       3133  jmp(Y,'REENTER')                #18
              0bd1 00f5  ld   $f5         3134  ld(-22/2)                       #19
                                          3135
                                          3136  #-----------------------------------------------------------------------
                                          3137  #
                                          3138  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3139  #
                                          3140  #       Page 1: vertical blank interval
                                          3141  #       Page 2: visible scanlines
                                          3142  #
                                          3143  #-----------------------------------------------------------------------
                                          3144
              0bd2 0200  nop              3145  align(0x100, size=0x100)
              0bd3 0200  nop
              0bd4 0200  nop
              * 46 times
                                          3146
                                          3147  #-----------------------------------------------------------------------
                                          3148  # Extension SYS_Sprite6_v3_64
                                          3149  # Extension SYS_Sprite6x_v3_64
                                          3150  # Extension SYS_Sprite6y_v3_64
                                          3151  # Extension SYS_Sprite6xy_v3_64
                                          3152  #-----------------------------------------------------------------------
                                          3153
                                          3154  # Blit sprite in screen memory
                                          3155  #
                                          3156  # Variables
                                          3157  #       vAC             Destination address in screen
                                          3158  #       sysArgs[0:1]    Source address of 6xY pixels (colors 0..63) terminated
                                          3159  #                       by negative byte value N (typically N = -Y)
                                          3160  #       sysArgs[2:7]    Scratch (user as copy buffer)
                                          3161  #
                                          3162  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3163  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3164  # of 6 pixels at a time, and then written to the screen through the
                                          3165  # destination pointer (each chunk underneath the previous), thus
                                          3166  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3167  # negative byte N after a chunk signals the end of the sprite data.
                                          3168  # So the sprite's height Y is determined by the source data and is
                                          3169  # therefore flexible. This negative byte value, typically N == -Y,
                                          3170  # is then used to adjust the destination pointer's high byte, to make
                                          3171  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3172  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3173  # already left in place to facilitate this. After one call, the source
                                          3174  # pointer will point past that source data, effectively:
                                          3175  #       src += Y * 6 + 1
                                          3176  # The destination pointer will have been adjusted as:
                                          3177  #       dst += (Y + N) * 256 + 6
                                          3178  # (With arithmetic wrapping around on the same memory page)
                                          3179  #
                                          3180  # Y is only limited by source memory, not by CPU cycles. The
                                          3181  # implementation is such that the SYS function self-repeats, each
                                          3182  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3183  # pixels per scanline this way.
                                          3184
                                          3185  label('SYS_Sprite6_v3_64')
                                          3186
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3187  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3188  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3189  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3190  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3191  st([Y,Xpp])                     #19 Just X++
                                          3192
              0c05 8119  adda [$19]       3193  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3194  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3195  ld([vAC])                       #22
              0c08 8006  adda $06         3196  adda(6)                         #23
              0c09 c218  st   [$18]       3197  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3198  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3199  adda(1)                         #26
              0c0c c224  st   [$24]       3200  st([sysArgs+0])                 #27
              0c0d 0200  nop              3201  nop()                           #28
              0c0e 1403  ld   $03,y       3202  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3203  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3204  ld(-34/2)                       #31
                                          3205
                                          3206  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3207  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3208  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3209  st([Y,Xpp])                     #22 Just X++
              0c14 c227  st   [$27]       3210  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3211  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3212  st([Y,Xpp])                     #25 Just X++
              0c17 c228  st   [$28]       3213  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3214  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3215  st([Y,Xpp])                     #28 Just X++
              0c1a c229  st   [$29]       3216  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3217  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3218  st([Y,Xpp])                     #31 Just X++
              0c1d c22a  st   [$2a]       3219  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3220  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3221  st([Y,Xpp])                     #34 Just X++
              0c20 c22b  st   [$2b]       3222  st([sysArgs+7])                 #35
                                          3223
              0c21 1118  ld   [$18],x     3224  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3225  ld([vAC+1],Y)                   #37
              0c23 0126  ld   [$26]       3226  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3227  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3228  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3229  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3230  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3231  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3232  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3233  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3234  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3235  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3236  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3237  st([Y,Xpp])                     #49
                                          3238
              0c2f 0124  ld   [$24]       3239  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3240  adda(6)                         #51
              0c31 c224  st   [$24]       3241  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3242  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3243  adda(1)                         #54
              0c34 c219  st   [$19]       3244  st([vAC+1])                     #55
                                          3245
              0c35 0116  ld   [$16]       3246  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3247  suba(2)                         #57
              0c37 c216  st   [$16]       3248  st([vPC])                       #58
              0c38 1403  ld   $03,y       3249  ld(hi('REENTER'),Y)             #59
              0c39 e0cb  jmp  y,$cb       3250  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3251  ld(-64/2)                       #61
                                          3252
              0c3b 0200  nop              3253  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3254  label('SYS_Sprite6x_v3_64')
                                          3255
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3256  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3257  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3258  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3259  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3260  st([Y,Xpp])                     #19 Just X++
                                          3261
              0c45 8119  adda [$19]       3262  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3263  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3264  ld([vAC])                       #22
              0c48 a006  suba $06         3265  suba(6)                         #23
              0c49 c218  st   [$18]       3266  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3267  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3268  adda(1)                         #26
              0c4c c224  st   [$24]       3269  st([sysArgs+0])                 #27
              0c4d 0200  nop              3270  nop()                           #28
              0c4e 1403  ld   $03,y       3271  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3272  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3273  ld(-34/2)                       #31
                                          3274
                                          3275  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3276  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3277  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3278  st([Y,Xpp])                     #22 Just X++
              0c54 c22a  st   [$2a]       3279  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3280  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3281  st([Y,Xpp])                     #25 Just X++
              0c57 c229  st   [$29]       3282  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3283  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3284  st([Y,Xpp])                     #28 Just X++
              0c5a c228  st   [$28]       3285  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3286  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3287  st([Y,Xpp])                     #31 Just X++
              0c5d c227  st   [$27]       3288  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3289  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3290  st([Y,Xpp])                     #34 Just X++
                                          3291
              0c60 1118  ld   [$18],x     3292  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3293  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3294  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3295  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3296  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3297  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3298  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3299  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3300  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3301  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3302  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3303  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3304  st([Y,Xpp])                     #47
                                          3305
              0c6d 0124  ld   [$24]       3306  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3307  adda(6)                         #49
              0c6f c224  st   [$24]       3308  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3309  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3310  adda(1)                         #52
              0c72 c219  st   [$19]       3311  st([vAC+1])                     #53
                                          3312
              0c73 0116  ld   [$16]       3313  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3314  suba(2)                         #55
              0c75 c216  st   [$16]       3315  st([vPC])                       #56
              0c76 1403  ld   $03,y       3316  ld(hi('REENTER'),Y)             #57
              0c77 e0cb  jmp  y,$cb       3317  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3318  ld(-62/2)                       #59
                                          3319
              0c79 0200  nop              3320  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3321  label('SYS_Sprite6y_v3_64')
                                          3322
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3323  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3324  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3325  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3326  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3327  st([Y,Xpp])                     #19 Just X++
                                          3328
              0c85 60ff  xora $ff         3329  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3330  adda(1)                         #21
              0c87 8119  adda [$19]       3331  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3332  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3333  ld([vAC])                       #24
              0c8a 8006  adda $06         3334  adda(6)                         #25
              0c8b c218  st   [$18]       3335  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3336  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3337  adda(1)                         #28
              0c8e c224  st   [$24]       3338  st([sysArgs+0])                 #29
              0c8f 0200  nop              3339  nop()                           #30
              0c90 1403  ld   $03,y       3340  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3341  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3342  ld(-36/2)                       #33
                                          3343
                                          3344  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3345  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3346  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3347  st([Y,Xpp])                     #22 Just X++
              0c96 c227  st   [$27]       3348  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3349  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3350  st([Y,Xpp])                     #25 Just X++
              0c99 c228  st   [$28]       3351  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3352  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3353  st([Y,Xpp])                     #28 Just X++
              0c9c c229  st   [$29]       3354  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3355  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3356  st([Y,Xpp])                     #31 Just X++
              0c9f c22a  st   [$2a]       3357  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3358  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3359  st([Y,Xpp])                     #34 Just X++
              0ca2 c22b  st   [$2b]       3360  st([sysArgs+7])                 #35
                                          3361
              0ca3 1118  ld   [$18],x     3362  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3363  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3364  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3365  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3366  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3367  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3368  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3369  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3370  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3371  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3372  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3373  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3374  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3375  st([Y,Xpp])                     #49
                                          3376
              0cb1 0124  ld   [$24]       3377  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3378  adda(6)                         #51
              0cb3 c224  st   [$24]       3379  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3380  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3381  suba(1)                         #54
              0cb6 c219  st   [$19]       3382  st([vAC+1])                     #55
                                          3383
              0cb7 0116  ld   [$16]       3384  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3385  suba(2)                         #57
              0cb9 c216  st   [$16]       3386  st([vPC])                       #58
              0cba 1403  ld   $03,y       3387  ld(hi('REENTER'),Y)             #59
              0cbb e0cb  jmp  y,$cb       3388  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3389  ld(-64/2)                       #61
                                          3390
              0cbd 0200  nop              3391  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3392  label('SYS_Sprite6xy_v3_64')
                                          3393
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3394  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3395  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3396  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3397  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3398  st([Y,Xpp])                     #19 Just X++
                                          3399
              0cc5 60ff  xora $ff         3400  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3401  adda(1)                         #21
              0cc7 8119  adda [$19]       3402  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3403  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3404  ld([vAC])                       #24
              0cca a006  suba $06         3405  suba(6)                         #25
              0ccb c218  st   [$18]       3406  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3407  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3408  adda(1)                         #28
              0cce c224  st   [$24]       3409  st([sysArgs+0])                 #29
              0ccf 0200  nop              3410  nop()                           #30
              0cd0 1403  ld   $03,y       3411  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3412  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3413  ld(-36/2)                       #33
                                          3414
                                          3415  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3416  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3417  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3418  st([Y,Xpp])                     #22 Just X++
              0cd6 c22a  st   [$2a]       3419  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3420  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3421  st([Y,Xpp])                     #25 Just X++
              0cd9 c229  st   [$29]       3422  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3423  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3424  st([Y,Xpp])                     #28 Just X++
              0cdc c228  st   [$28]       3425  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3426  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3427  st([Y,Xpp])                     #31 Just X++
              0cdf c227  st   [$27]       3428  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3429  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3430  st([Y,Xpp])                     #34 Just X++
                                          3431
              0ce2 1118  ld   [$18],x     3432  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3433  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3434  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3435  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3436  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3437  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3438  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3439  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3440  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3441  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3442  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3443  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3444  st([Y,Xpp])                     #47
                                          3445
              0cef 0124  ld   [$24]       3446  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3447  adda(6)                         #49
              0cf1 c224  st   [$24]       3448  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3449  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3450  suba(1)                         #52
              0cf4 c219  st   [$19]       3451  st([vAC+1])                     #53
                                          3452
              0cf5 0116  ld   [$16]       3453  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3454  suba(2)                         #55
              0cf7 c216  st   [$16]       3455  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3456  ld(hi('REENTER'),Y)             #57
              0cf9 e0cb  jmp  y,$cb       3457  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3458  ld(-62/2)                       #59
                                          3459
                                          3460  #-----------------------------------------------------------------------
                                          3461
                                          3462  label('sys_ExpanderControl')
                                          3463
sys_ExpanderControl:
              0cfb 2118  anda [$18]       3464  anda([vAC])                     #18
              0cfc d218  st   [$18],x     3465  st([vAC],X)                     #19
              0cfd 1401  ld   $01,y       3466  ld(hi(ctrlBits),Y)              #20
              0cfe caf8  st   [y,$f8]     3467  st([Y,ctrlBits])                #21 Set control variable
              0cff 1519  ld   [$19],y     3468  ld([vAC+1],Y)                   #22 MOSI (A15)
              0d00 cd00  ctrl y,x         3469  ctrl(Y,X)                       #23 Try set the expander control register
                                          3470
              0d01 0127  ld   [$27]       3471  ld([sysArgs+3])                 #24 Prepare for SYS_SpiExchangeBytes
                                          3472  assert pc()&255 < 255-3         # Beware of page crossing: asm.py won't warn
              0d02 ec05  bne  $0d05       3473  bne(pc()+3)                     #25
              0d03 fc05  bra  $0d05       3474  bra(pc()+2)                     #26
              0d04 0125  ld   [$25]       3475  ld([sysArgs+1])                 #27
              0d05 c227  st   [$27]       3476  st([sysArgs+3])                 #27,28 (must be idempotent)
                                          3477
              0d06 1403  ld   $03,y       3478  ld(hi('REENTER'),Y)             #29
              0d07 e0cb  jmp  y,$cb       3479  jmp(Y,'REENTER')                #30
              0d08 00ef  ld   $ef         3480  ld(-34/2)                       #31
                                          3481
                                          3482  #-----------------------------------------------------------------------
                                          3483
                                          3484  label('sys_SpiExchangeBytes')
                                          3485
sys_SpiExchangeBytes:
              0d09 09f8  ld   [y,$f8]     3486  ld([Y,ctrlBits])                #18
              0d0a c228  st   [$28]       3487  st([sysArgs+4])                 #19
                                          3488
              0d0b 1124  ld   [$24],x     3489  ld([sysArgs+0],X)               #20 Fetch byte to send
              0d0c 1525  ld   [$25],y     3490  ld([sysArgs+1],Y)               #21
              0d0d 0d00  ld   [y,x]       3491  ld([Y,X])                       #22
                                          3492
                                          3493  for i in range(8):
                                          3494    st([vTmp],Y);C('Bit %d'%(7-i))#23+i*12
              0d0e d61d  st   [$1d],y     ;Bit 7
              0d0f 1128  ld   [$28],x     3495    ld([sysArgs+4],X)             #24+i*12
              0d10 dd00  ctrl y,x++       3496    ctrl(Y,Xpp)                   #25+i*12 Set MOSI
              0d11 dd00  ctrl y,x++       3497    ctrl(Y,Xpp)                   #26+i*12 Raise SCLK, disable RAM!
              0d12 0100  ld   [$00]       3498    ld([0])                       #27+i*12 Get MISO
              0d13 200f  anda $0f         3499    anda(0b00001111)              #28+i*12 This is why R1 as pull-DOWN is simpler
              0d14 f017  beq  $0d17       3500    beq(pc()+3)                   #29+i*12
              0d15 fc17  bra  $0d17       3501    bra(pc()+2)                   #30+i*12
              0d16 0001  ld   $01         3502    ld(1)                         #31+i*12
              0d17 cd00  ctrl y,x         3503    ctrl(Y,X)                     #32+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d18 811d  adda [$1d]       3504    adda([vTmp])                  #33+i*12 Shift
              0d19 811d  adda [$1d]       3505    adda([vTmp])                  #34+i*12
              0d1a d61d  st   [$1d],y     ;Bit 6
              0d1b 1128  ld   [$28],x
              0d1c dd00  ctrl y,x++
              0d1d dd00  ctrl y,x++
              0d1e 0100  ld   [$00]
              0d1f 200f  anda $0f
              0d20 f023  beq  $0d23
              0d21 fc23  bra  $0d23
              0d22 0001  ld   $01
              0d23 cd00  ctrl y,x
              0d24 811d  adda [$1d]
              0d25 811d  adda [$1d]
              0d26 d61d  st   [$1d],y     ;Bit 5
              0d27 1128  ld   [$28],x
              0d28 dd00  ctrl y,x++
              0d29 dd00  ctrl y,x++
              0d2a 0100  ld   [$00]
              0d2b 200f  anda $0f
              0d2c f02f  beq  $0d2f
              0d2d fc2f  bra  $0d2f
              0d2e 0001  ld   $01
              0d2f cd00  ctrl y,x
              0d30 811d  adda [$1d]
              0d31 811d  adda [$1d]
              0d32 d61d  st   [$1d],y     ;Bit 4
              0d33 1128  ld   [$28],x
              0d34 dd00  ctrl y,x++
              0d35 dd00  ctrl y,x++
              0d36 0100  ld   [$00]
              0d37 200f  anda $0f
              0d38 f03b  beq  $0d3b
              0d39 fc3b  bra  $0d3b
              0d3a 0001  ld   $01
              0d3b cd00  ctrl y,x
              0d3c 811d  adda [$1d]
              0d3d 811d  adda [$1d]
              0d3e d61d  st   [$1d],y     ;Bit 3
              0d3f 1128  ld   [$28],x
              0d40 dd00  ctrl y,x++
              0d41 dd00  ctrl y,x++
              0d42 0100  ld   [$00]
              0d43 200f  anda $0f
              0d44 f047  beq  $0d47
              0d45 fc47  bra  $0d47
              0d46 0001  ld   $01
              0d47 cd00  ctrl y,x
              0d48 811d  adda [$1d]
              0d49 811d  adda [$1d]
              0d4a d61d  st   [$1d],y     ;Bit 2
              0d4b 1128  ld   [$28],x
              0d4c dd00  ctrl y,x++
              0d4d dd00  ctrl y,x++
              0d4e 0100  ld   [$00]
              0d4f 200f  anda $0f
              0d50 f053  beq  $0d53
              0d51 fc53  bra  $0d53
              0d52 0001  ld   $01
              0d53 cd00  ctrl y,x
              0d54 811d  adda [$1d]
              0d55 811d  adda [$1d]
              0d56 d61d  st   [$1d],y     ;Bit 1
              0d57 1128  ld   [$28],x
              0d58 dd00  ctrl y,x++
              0d59 dd00  ctrl y,x++
              0d5a 0100  ld   [$00]
              0d5b 200f  anda $0f
              0d5c f05f  beq  $0d5f
              0d5d fc5f  bra  $0d5f
              0d5e 0001  ld   $01
              0d5f cd00  ctrl y,x
              0d60 811d  adda [$1d]
              0d61 811d  adda [$1d]
              0d62 d61d  st   [$1d],y     ;Bit 0
              0d63 1128  ld   [$28],x
              0d64 dd00  ctrl y,x++
              0d65 dd00  ctrl y,x++
              0d66 0100  ld   [$00]
              0d67 200f  anda $0f
              0d68 f06b  beq  $0d6b
              0d69 fc6b  bra  $0d6b
              0d6a 0001  ld   $01
              0d6b cd00  ctrl y,x
              0d6c 811d  adda [$1d]
              0d6d 811d  adda [$1d]
                                          3506
              0d6e 1124  ld   [$24],x     3507  ld([sysArgs+0],X)               #119 Store received byte
              0d6f 1527  ld   [$27],y     3508  ld([sysArgs+3],Y)               #120
              0d70 ce00  st   [y,x]       3509  st([Y,X])                       #121
                                          3510
              0d71 0124  ld   [$24]       3511  ld([sysArgs+0])                 #122 Advance pointer
              0d72 8001  adda $01         3512  adda(1)                         #123
              0d73 c224  st   [$24]       3513  st([sysArgs+0])                 #124
                                          3514
              0d74 6126  xora [$26]       3515  xora([sysArgs+2])               #125 Reached end?
              0d75 f07c  beq  .sysSpi#128 3516  beq('.sysSpi#128')              #126
                                          3517
              0d76 0116  ld   [$16]       3518  ld([vPC])                       #127 Self-repeating SYS call
              0d77 a002  suba $02         3519  suba(2)                         #128
              0d78 c216  st   [$16]       3520  st([vPC])                       #129
              0d79 1403  ld   $03,y       3521  ld(hi('NEXTY'),Y)               #130
              0d7a e000  jmp  y,$00       3522  jmp(Y,'NEXTY')                  #131
              0d7b 00bd  ld   $bd         3523  ld(-134/2)                      #132
                                          3524
                                          3525  label('.sysSpi#128')
.sysSpi#128:  0d7c 1403  ld   $03,y       3526  ld(hi('NEXTY'),Y)               #128 Continue program
              0d7d e000  jmp  y,$00       3527  jmp(Y,'NEXTY')                  #129
              0d7e 00be  ld   $be         3528  ld(-132/2)                      #130
                                          3529
                                          3530
                                          3531  #-----------------------------------------------------------------------
                                          3532  #       Extended vertical blank logic: interrupts
                                          3533  #-----------------------------------------------------------------------
              0d7f 0200  nop              3534  align(0x100)
              0d80 0200  nop
              0d81 0200  nop
              * 129 times
                                          3535
                                          3536  # Check if an IRQ handler is defined
                                          3537  label('vBlankFirst#78')
vBlankFirst#78:
              0e00 09f6  ld   [y,$f6]     3538  ld([Y,vIRQ_v5])                 #78
              0e01 49f7  ora  [y,$f7]     3539  ora([Y,vIRQ_v5+1])              #79
                                          3540  bne('vBlankFirst#82')           #80
              0e02 ec09  bne  vBlankFirst#82
              0e03 0116  ld   [$16]       3541  ld([vPC])                       #81
              0e04 0055  ld   $55         3542  runVcpu(186-82-extra,           #82 Application cycles (scan line 0)
              0e05 c21e  st   [$1e]
              0e06 1505  ld   [$05],y
              0e07 e0ff  jmp  y,$ff
              0e08 001f  ld   $1f
                                          3543      '---D line 0 timeout but no irq',
                                          3544      returnTo='vBlankFirst#186')
                                          3545
                                          3546  label('vBlankFirst#82')
vBlankFirst#82:
              0e09 c230  st   [$30]       3547  st([0x30])                      #82 Save vPC
              0e0a 0117  ld   [$17]       3548  ld([vPC+1])                     #83
              0e0b c231  st   [$31]       3549  st([0x31])                      #84
              0e0c 0118  ld   [$18]       3550  ld([vAC])                       #85 Save vAC
              0e0d c232  st   [$32]       3551  st([0x32])                      #86
              0e0e 0119  ld   [$19]       3552  ld([vAC+1])                     #87
              0e0f c233  st   [$33]       3553  st([0x33])                      #88
              0e10 09f6  ld   [y,$f6]     3554  ld([Y,vIRQ_v5])                 #89 Set vPC to vIRQ
              0e11 a002  suba $02         3555  suba(2)                         #90
              0e12 c216  st   [$16]       3556  st([vPC])                       #91
              0e13 09f7  ld   [y,$f7]     3557  ld([Y,vIRQ_v5+1])               #92
              0e14 c217  st   [$17]       3558  st([vPC+1])                     #93
              0e15 0105  ld   [$05]       3559  ld([vCpuSelect])                #94 Handler must save this if needed
              0e16 c219  st   [$19]       3560  st([vAC+1])                     #95
              0e17 0000  ld   $00         3561  ld(0)                           #96
              0e18 c218  st   [$18]       3562  st([vAC])                       #97
              0e19 0002  ld   $02         3563  ld(hi('ENTER'))                 #98 Set vCpuSelect to ENTER (=regular vCPU)
              0e1a c205  st   [$05]       3564  st([vCpuSelect])                #99
              0e1b 0055  ld   $55         3565  runVcpu(186-100-extra,          #100 Application cycles (scan line 0)
              0e1c c21e  st   [$1e]
              0e1d 1505  ld   [$05],y
              0e1e e0ff  jmp  y,$ff
              0e1f 0016  ld   $16
                                          3566      '---D line 0 timeout with irq',
                                          3567      returnTo='vBlankFirst#186')
                                          3568
                                          3569  # vIRQ sequence WITH interpreter switch
                                          3570  label('vRTI#18')
vRTI#18:      0e20 0500  ld   [x]         3571  ld([X])                         #18
              0e21 c205  st   [$05]       3572  st([vCpuSelect])                #19
              0e22 0130  ld   [$30]       3573  ld([0x30])                      #20
              0e23 c216  st   [$16]       3574  st([vPC])                       #21
              0e24 0131  ld   [$31]       3575  ld([0x31])                      #22
              0e25 c217  st   [$17]       3576  st([vPC+1])                     #23
              0e26 0132  ld   [$32]       3577  ld([0x32])                      #24
              0e27 c218  st   [$18]       3578  st([vAC])                       #25
              0e28 0133  ld   [$33]       3579  ld([0x33])                      #26
              0e29 c219  st   [$19]       3580  st([vAC+1])                     #27
              0e2a 0200  nop              3581  nop()                           #0
              0e2b 1403  ld   $03,y       3582  ld(hi('RESYNC'),Y)              #1
              0e2c e00c  jmp  y,$0c       3583  jmp(Y,'RESYNC')                 #2
              0e2d 0115  ld   [$15]       3584  ld([vTicks])                    #3
                                          3585
                                          3586  # Entered last line of vertical blank (line 40)
                                          3587  label('vBlankLast#34')
                                          3588
                                          3589  #-----------------------------------------------------------------------
                                          3590  #       Extended vertical blank logic: game controller decoding
                                          3591  #-----------------------------------------------------------------------
                                          3592
                                          3593  # Game controller types
                                          3594  # TypeA: Based on 74LS165 shift register (not supported)
                                          3595  # TypeB: Based on CD4021B shift register (standard)
                                          3596  # TypeC: Based on priority encoder
                                          3597  #
                                          3598  # Notes:
                                          3599  # - TypeA was only used during development and first beta test, before ROM v1
                                          3600  # - TypeB appears as type A with negative logic levels
                                          3601  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          3602  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          3603  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          3604  # - TypeB and TypeC can be sampled in the same scanline
                                          3605  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          3606  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          3607  #
                                          3608  #       TypeC    Alias    Button TypeB
                                          3609  #       00000000  ^@   -> Right  11111110
                                          3610  #       00000001  ^A   -> Left   11111101
                                          3611  #       00000011  ^C   -> Down   11111011
                                          3612  #       00000111  ^G   -> Up     11110111
                                          3613  #       00001111  ^O   -> Start  11101111
                                          3614  #       00011111  ^_   -> Select 11011111
                                          3615  #       00111111  ?    -> B      10111111
                                          3616  #       01111111  DEL  -> A      01111111
                                          3617  #       11111111       -> (None) 11111111
                                          3618  #
                                          3619  #       Conversion formula:
                                          3620  #               f(x) := 254 - x
                                          3621
                                          3622  # Detect controller TypeC codes
vBlankLast#34:
              0e2e 010f  ld   [$0f]       3623  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              0e2f 8001  adda $01         3624  adda(1)                         #35
              0e30 210f  anda [$0f]       3625  anda([serialRaw])               #36
              0e31 ec42  bne  .buttons#39 3626  bne('.buttons#39')              #37
                                          3627
                                          3628  # TypeC
              0e32 010f  ld   [$0f]       3629  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              0e33 8001  adda $01         3630  adda(1)                         #39
              0e34 2110  anda [$10]       3631  anda([serialLast])              #40
              0e35 ec39  bne  .buttons#43 3632  bne('.buttons#43')              #41
              0e36 00fe  ld   $fe         3633  ld(254)                         #42 then clear the selected bit
              0e37 0200  nop              3634  nop()                           #43
              0e38 fc3c  bra  .buttons#46 3635  bra('.buttons#46')              #44
                                          3636  label('.buttons#43')
.buttons#43:  0e39 a10f  suba [$0f]       3637  suba([serialRaw])               #43,45
              0e3a 2111  anda [$11]       3638  anda([buttonState])             #44
              0e3b c211  st   [$11]       3639  st([buttonState])               #45
                                          3640  label('.buttons#46')
.buttons#46:  0e3c 010f  ld   [$0f]       3641  ld([serialRaw])                 #46 Set the lower bits
              0e3d 4111  ora  [$11]       3642  ora([buttonState])              #47
                                          3643  label('.buttons#48')
.buttons#48:  0e3e c211  st   [$11]       3644  st([buttonState])               #48
              0e3f 010f  ld   [$0f]       3645  ld([serialRaw])                 #49 Update serialLast for next pass
              0e40 e0b3  jmp  y,$b3       3646  jmp(Y,'vBlankLast#52')          #50
              0e41 c210  st   [$10]       3647  st([serialLast])                #51
                                          3648
                                          3649  # TypeB
                                          3650  # pChange = pNew & ~pOld
                                          3651  # nChange = nNew | ~nOld {DeMorgan}
                                          3652  label('.buttons#39')
.buttons#39:  0e42 00ff  ld   $ff         3653  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              0e43 6110  xora [$10]       3654  xora([serialLast])              #40
              0e44 410f  ora  [$0f]       3655  ora([serialRaw])                #41 Catch button-press events
              0e45 2111  anda [$11]       3656  anda([buttonState])             #42 Keep active button presses
              0e46 410f  ora  [$0f]       3657  ora([serialRaw])                #43
              0e47 0200  nop              3658  nop()                           #44
              0e48 0200  nop              3659  nop()                           #45
              0e49 fc3e  bra  .buttons#48 3660  bra('.buttons#48')              #46
              0e4a 0200  nop              3661  nop()                           #47
                                          3662
                                          3663
                                          3664  #-----------------------------------------------------------------------
                                          3665  #       More SYS functions
                                          3666  #-----------------------------------------------------------------------
                                          3667
                                          3668  # SYS_Exec_88 implementation
                                          3669  label('sys_Exec')
sys_Exec:     0e4b d617  st   [$17],y     3670  st([vPC+1],Y)                   #18 Clear vPCH and Y
              0e4c 011c  ld   [$1c]       3671  ld([vSP])                       #19 Place ROM loader below current stack pointer
              0e4d a037  suba $37         3672  suba(53+2)                      #20 (AC -> *+0) One extra word for PUSH
              0e4e d21d  st   [$1d],x     3673  st([vTmp],X)                    #21
              0e4f 80fe  adda $fe         3674  adda(-2)                        #22 (AC -> *-2)
              0e50 c216  st   [$16]       3675  st([vPC])                       #23
                                          3676  # Start of manually compiled vCPU section
              0e51 dc75  st   $75,[y,x++] 3677  st('PUSH',    [Y,Xpp])          #24 *+0
              0e52 dccf  st   $cf,[y,x++] 3678  st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              0e53 8023  adda $23         3679  adda(33-(-2))                   #26 (AC -> *+33)
              0e54 de00  st   [y,x++]     3680  st(           [Y,Xpp])          #27 *+27
              0e55 dc5e  st   $5e,[y,x++] 3681  st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              0e56 dc27  st   $27,[y,x++] 3682  st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              0e57 dccf  st   $cf,[y,x++] 3683  st('CALL',    [Y,Xpp])          #30 *+5
              0e58 de00  st   [y,x++]     3684  st(           [Y,Xpp])          #31 *+6
              0e59 dc5e  st   $5e,[y,x++] 3685  st('ST',      [Y,Xpp])          #32 *+7
              0e5a dc26  st   $26,[y,x++] 3686  st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              0e5b dccf  st   $cf,[y,x++] 3687  st('CALL',    [Y,Xpp])          #34 *+9
              0e5c de00  st   [y,x++]     3688  st(           [Y,Xpp])          #35 *+10
              0e5d dc5e  st   $5e,[y,x++] 3689  st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              0e5e dc28  st   $28,[y,x++] 3690  st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              0e5f dccf  st   $cf,[y,x++] 3691  st('CALL',    [Y,Xpp])          #38 *+13
              0e60 de00  st   [y,x++]     3692  st(           [Y,Xpp])          #39 *+14
              0e61 dcf0  st   $f0,[y,x++] 3693  st('POKE',    [Y,Xpp])          #40 *+15
              0e62 dc26  st   $26,[y,x++] 3694  st(sysArgs+2, [Y,Xpp])          #41 *+16
              0e63 dc93  st   $93,[y,x++] 3695  st('INC',     [Y,Xpp])          #42 *+17
              0e64 dc26  st   $26,[y,x++] 3696  st(sysArgs+2, [Y,Xpp])          #43 *+18
              0e65 dc1a  st   $1a,[y,x++] 3697  st('LD',      [Y,Xpp])          #44 *+19
              0e66 dc28  st   $28,[y,x++] 3698  st(sysArgs+4, [Y,Xpp])          #45 *+20
              0e67 dce6  st   $e6,[y,x++] 3699  st('SUBI',    [Y,Xpp])          #46 *+21
              0e68 dc01  st   $01,[y,x++] 3700  st(1,         [Y,Xpp])          #47 *+22
              0e69 dc35  st   $35,[y,x++] 3701  st('BCC',     [Y,Xpp])          #48 *+23
              0e6a dc72  st   $72,[y,x++] 3702  st('NE',      [Y,Xpp])          #49 *+24
              0e6b 80e8  adda $e8         3703  adda(11-2-33)                   #50 (AC -> *+9)
              0e6c de00  st   [y,x++]     3704  st(           [Y,Xpp])          #51 *+25
              0e6d dccf  st   $cf,[y,x++] 3705  st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              0e6e 8018  adda $18         3706  adda(33-9)                      #53 (AC -> *+33)
              0e6f de00  st   [y,x++]     3707  st(           [Y,Xpp])          #54 *+27
              0e70 dc35  st   $35,[y,x++] 3708  st('BCC',     [Y,Xpp])          #55 *+28
              0e71 dc72  st   $72,[y,x++] 3709  st('NE',      [Y,Xpp])          #56 *+29
              0e72 80e0  adda $e0         3710  adda(3-2-33)                    #57 (AC -> *+1)
              0e73 de00  st   [y,x++]     3711  st(           [Y,Xpp])          #58 *+30
              0e74 dc63  st   $63,[y,x++] 3712  st('POP',     [Y,Xpp])          #59 *+31 End
              0e75 dcff  st   $ff,[y,x++] 3713  st('RET',     [Y,Xpp])          #60 *+32
                                          3714  # Pointer constant pointing to the routine below (for use by CALL)
              0e76 8022  adda $22         3715  adda(35-1)                      #61 (AC -> *+35)
              0e77 de00  st   [y,x++]     3716  st(           [Y,Xpp])          #62 *+33
              0e78 dc00  st   $00,[y,x++] 3717  st(0,         [Y,Xpp])          #63 *+34
                                          3718  # Routine to read next byte from ROM and advance read pointer
              0e79 dc1a  st   $1a,[y,x++] 3719  st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              0e7a dc24  st   $24,[y,x++] 3720  st(sysArgs+0, [Y,Xpp])          #65 *+36
              0e7b dc8c  st   $8c,[y,x++] 3721  st('XORI',    [Y,Xpp])          #66 *+37
              0e7c dcfb  st   $fb,[y,x++] 3722  st(251,       [Y,Xpp])          #67 *+38
              0e7d dc35  st   $35,[y,x++] 3723  st('BCC',     [Y,Xpp])          #68 *+39
              0e7e dc72  st   $72,[y,x++] 3724  st('NE',      [Y,Xpp])          #69 *+40
              0e7f 8009  adda $09         3725  adda(46-2-35)                   #70 (AC -> *+44)
              0e80 de00  st   [y,x++]     3726  st(           [Y,Xpp])          #71 *+41
              0e81 dc5e  st   $5e,[y,x++] 3727  st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              0e82 dc24  st   $24,[y,x++] 3728  st(sysArgs+0, [Y,Xpp])          #73 *+43
              0e83 dc93  st   $93,[y,x++] 3729  st('INC',     [Y,Xpp])          #74 *+44
              0e84 dc25  st   $25,[y,x++] 3730  st(sysArgs+1, [Y,Xpp])          #75 *+45
              0e85 dc21  st   $21,[y,x++] 3731  st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              0e86 dc24  st   $24,[y,x++] 3732  st(sysArgs+0, [Y,Xpp])          #77 *+47
              0e87 dc7f  st   $7f,[y,x++] 3733  st('LUP',     [Y,Xpp])          #78 *+48
              0e88 dc00  st   $00,[y,x++] 3734  st(0,         [Y,Xpp])          #79 *+49
              0e89 dc93  st   $93,[y,x++] 3735  st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              0e8a dc24  st   $24,[y,x++] 3736  st(sysArgs+0, [Y,Xpp])          #81 *+51
              0e8b dcff  st   $ff,[y,x++] 3737  st('RET',     [Y,Xpp])          #82 *+52 Return
                                          3738  # Return to interpreter
              0e8c 1403  ld   $03,y       3739  ld(hi('REENTER'),Y)             #83
              0e8d e0cb  jmp  y,$cb       3740  jmp(Y,'REENTER')                #84
              0e8e 00d4  ld   $d4         3741  ld(-88/2)                       #85
                                          3742
                                          3743  # SYS_VDrawBits_134 implementation
                                          3744  label('sys_VDrawBits')
sys_VDrawBits:
              0e8f 0000  ld   $00         3745  ld(0)                           #18
                                          3746  label('.sysVdb0')
.sysVdb0:     0e90 c21d  st   [$1d]       3747  st([vTmp])                      #19+i*25
              0e91 9529  adda [$29],y     3748  adda([sysArgs+5],Y)             #20+i*25 Y=[sysPos+1]+[vTmp]
              0e92 0126  ld   [$26]       3749  ld([sysArgs+2])                 #21+i*25 Select color
              0e93 e896  blt  $0e96       3750  bmi(pc()+3)                     #22+i*25
              0e94 fc97  bra  $0e97       3751  bra(pc()+3)                     #23+i*25
              0e95 0124  ld   [$24]       3752  ld([sysArgs+0])                 #24+i*25
              0e96 0125  ld   [$25]       3753  ld([sysArgs+1])                 #24+i*25(!)
              0e97 ce00  st   [y,x]       3754  st([Y,X])                       #25+i*25 Draw pixel
              0e98 0126  ld   [$26]       3755  ld([sysArgs+2])                 #26+i*25 Shift byte left
              0e99 8200  adda ac          3756  adda(AC)                        #27+i*25
              0e9a c226  st   [$26]       3757  st([sysArgs+2])                 #28+i*25
              0e9b 011d  ld   [$1d]       3758  ld([vTmp])                      #29+i*25 Unrolled loop (once)
              0e9c 8129  adda [$29]       3759  adda([sysArgs+5])               #31+i*25
              0e9d 9401  adda $01,y       3760  adda(1,Y)                       #30+i*25 Y=[sysPos+1]+[vTmp]+1
              0e9e 0126  ld   [$26]       3761  ld([sysArgs+2])                 #32+i*25 Select color
              0e9f e8a2  blt  $0ea2       3762  bmi(pc()+3)                     #33+i*25
              0ea0 fca3  bra  $0ea3       3763  bra(pc()+3)                     #34+i*25
              0ea1 0124  ld   [$24]       3764  ld([sysArgs+0])                 #35+i*25
              0ea2 0125  ld   [$25]       3765  ld([sysArgs+1])                 #35+i*25(!)
              0ea3 ce00  st   [y,x]       3766  st([Y,X])                       #36+i*25 Draw pixel
              0ea4 0126  ld   [$26]       3767  ld([sysArgs+2])                 #37+i*25 Shift byte left
              0ea5 8200  adda ac          3768  adda(AC)                        #38+i*25
              0ea6 c226  st   [$26]       3769  st([sysArgs+2])                 #39+i*25
              0ea7 011d  ld   [$1d]       3770  ld([vTmp])                      #40+i*25 Loop counter
              0ea8 a006  suba $06         3771  suba(6)                         #41+i*25
              0ea9 ec90  bne  .sysVdb0    3772  bne('.sysVdb0')                 #42+i*25
              0eaa 8008  adda $08         3773  adda(8)                         #43+i*25 Steps of 2
              0eab 1403  ld   $03,y       3774  ld(hi('REENTER'),Y)             #119
              0eac e0cb  jmp  y,$cb       3775  jmp(Y,'REENTER')                #120
              0ead 00c2  ld   $c2         3776  ld(-124/2)                      #121
                                          3777
                                          3778  # SYS_ResetWaveforms_v4_50 implementation
                                          3779  label('sys_ResetWaveforms')
sys_ResetWaveforms:
              0eae 0118  ld   [$18]       3780  ld([vAC+0])                     #18 X=4i
              0eaf 8200  adda ac          3781  adda(AC)                        #19
              0eb0 9200  adda ac,x        3782  adda(AC,X)                      #20
              0eb1 0118  ld   [$18]       3783  ld([vAC+0])                     #21
              0eb2 de00  st   [y,x++]     3784  st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              0eb3 2020  anda $20         3785  anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              0eb4 ecb7  bne  $0eb7       3786  bne(pc()+3)                     #24
              0eb5 0118  ld   [$18]       3787  ld([vAC+0])                     #25
              0eb6 fcb9  bra  $0eb9       3788  bra(pc()+3)                     #26
              0eb7 8118  adda [$18]       3789  adda([vAC+0])                   #26,27
              0eb8 607f  xora $7f         3790  xora(127)                       #27
              0eb9 de00  st   [y,x++]     3791  st([Y,Xpp])                     #28
              0eba 0118  ld   [$18]       3792  ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              0ebb 2020  anda $20         3793  anda(0x20)                      #30
              0ebc ecbf  bne  $0ebf       3794  bne(pc()+3)                     #31
              0ebd fcc0  bra  $0ec0       3795  bra(pc()+3)                     #32
              0ebe 0000  ld   $00         3796  ld(0)                           #33
              0ebf 003f  ld   $3f         3797  ld(63)                          #33(!)
              0ec0 de00  st   [y,x++]     3798  st([Y,Xpp])                     #34
              0ec1 0118  ld   [$18]       3799  ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              0ec2 ce00  st   [y,x]       3800  st([Y,X])                       #36
              0ec3 8001  adda $01         3801  adda(1)                         #37 i += 1
              0ec4 c218  st   [$18]       3802  st([vAC+0])                     #38
              0ec5 6040  xora $40         3803  xora(64)                        #39 For 64 iterations
              0ec6 f0c9  beq  $0ec9       3804  beq(pc()+3)                     #40
              0ec7 fcca  bra  $0eca       3805  bra(pc()+3)                     #41
              0ec8 00fe  ld   $fe         3806  ld(-2)                          #42
              0ec9 0000  ld   $00         3807  ld(0)                           #42(!)
              0eca 8116  adda [$16]       3808  adda([vPC])                     #43
              0ecb c216  st   [$16]       3809  st([vPC])                       #44
              0ecc 1403  ld   $03,y       3810  ld(hi('REENTER'),Y)             #45
              0ecd e0cb  jmp  y,$cb       3811  jmp(Y,'REENTER')                #46
              0ece 00e7  ld   $e7         3812  ld(-50/2)                       #47
                                          3813
                                          3814  # SYS_ShuffleNoise_v4_46 implementation
                                          3815  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              0ecf 1118  ld   [$18],x     3816  ld([vAC+0],X)                   #18 tmp = T[4j]
              0ed0 0d00  ld   [y,x]       3817  ld([Y,X])                       #19
              0ed1 c21d  st   [$1d]       3818  st([vTmp])                      #20
              0ed2 1119  ld   [$19],x     3819  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              0ed3 0d00  ld   [y,x]       3820  ld([Y,X])                       #22
              0ed4 1118  ld   [$18],x     3821  ld([vAC+0],X)                   #23
              0ed5 ce00  st   [y,x]       3822  st([Y,X])                       #24
              0ed6 8200  adda ac          3823  adda(AC)                        #25 j += T[4i]
              0ed7 8200  adda ac          3824  adda(AC,)                       #26
              0ed8 8118  adda [$18]       3825  adda([vAC+0])                   #27
              0ed9 c218  st   [$18]       3826  st([vAC+0])                     #28
              0eda 1119  ld   [$19],x     3827  ld([vAC+1],X)                   #29 T[4i] = tmp
              0edb 011d  ld   [$1d]       3828  ld([vTmp])                      #30
              0edc ce00  st   [y,x]       3829  st([Y,X])                       #31
              0edd 0119  ld   [$19]       3830  ld([vAC+1])                     #32 i += 1
              0ede 8004  adda $04         3831  adda(4)                         #33
              0edf c219  st   [$19]       3832  st([vAC+1])                     #34
              0ee0 f0e3  beq  $0ee3       3833  beq(pc()+3)                     #35 For 64 iterations
              0ee1 fce4  bra  $0ee4       3834  bra(pc()+3)                     #36
              0ee2 00fe  ld   $fe         3835  ld(-2)                          #37
              0ee3 0000  ld   $00         3836  ld(0)                           #37(!)
              0ee4 8116  adda [$16]       3837  adda([vPC])                     #38
              0ee5 c216  st   [$16]       3838  st([vPC])                       #39
              0ee6 1403  ld   $03,y       3839  ld(hi('NEXTY'),Y)               #40
              0ee7 e000  jmp  y,$00       3840  jmp(Y,'NEXTY')                  #41
              0ee8 00ea  ld   $ea         3841  ld(-44/2)                       #42
                                          3842
                                          3843  # SYS_LoadBytes_DEVROM_XXX implementation
                                          3844  label('sys_LoadBytes')
sys_LoadBytes:
              0ee9 0030  ld   $30         3845  ld(0x30)                        # Target address
              0eea c225  st   [$25]       3846  st([sysArgs+1])                 #
              0eeb 011a  ld   [$1a]       3847  ld([vLR+0])                     # Source address
              0eec d224  st   [$24],x     3848  st([sysArgs+0],X)               #
              0eed 0d00  ld   [y,x]       3849  ld([Y,X])                       # Byte count
                                          3850  label('.slb1')                  #
.slb1:        0eee c226  st   [$26]       3851  st([sysArgs+2])                 #
                                          3852
              0eef 0124  ld   [$24]       3853  ld([sysArgs+0])                 # Advance source address
              0ef0 8001  adda $01         3854  adda(1)                         #
              0ef1 d224  st   [$24],x     3855  st([sysArgs+0],X)               #
                                          3856
              0ef2 0d00  ld   [y,x]       3857  ld([Y,X])                       # Copy byte
              0ef3 1125  ld   [$25],x     3858  ld([sysArgs+1],X)               #
              0ef4 c600  st   [x]         3859  st([X])                         #
                                          3860
              0ef5 0125  ld   [$25]       3861  ld([sysArgs+1])                 # Advance target address
              0ef6 8001  adda $01         3862  adda(1)                         #
              0ef7 c225  st   [$25]       3863  st([sysArgs+1])                 #
                                          3864
              0ef8 0126  ld   [$26]       3865  ld([sysArgs+2])                 # Decrement byte count and loop
              0ef9 ecee  bne  .slb1       3866  bne('.slb1')                    #
              0efa a001  suba $01         3867  suba(1)                         #
                                          3868
                                          3869  # XXX Unfinished
                                          3870
                                          3871  #-----------------------------------------------------------------------
                                          3872  #
                                          3873  #  End of core
                                          3874  #
                                          3875  #-----------------------------------------------------------------------
                                          3876  disableListing()
              0efb 0200  nop              ;5 fillers
              0efc 0200  nop
              0efd 0200  nop
              0efe 0200  nop
              0eff 0200  nop              ;+-----------------------------------+
                                          ;| Core/Reset_vX0.gcl                |
                                          ;+-----------------------------------+
              0f00 dc00  st   $00,[y,x++] ;'\x00'
              0f01 dc00  st   $00,[y,x++] ;'\x00'
              0f02 dc00  st   $00,[y,x++] ;'\x00'
              0f03 dc00  st   $00,[y,x++] ;'\x00'
              0f04 dc00  st   $00,[y,x++] ;'\x00'
              0f05 dc00  st   $00,[y,x++] ;'\x00'
              0f06 dc00  st   $00,[y,x++] ;'\x00'
              0f07 dc00  st   $00,[y,x++] ;'\x00'
              0f08 0000  ld   $00
              0f09 c218  st   [$18]
              0f0a 0000  ld   $00
              0f0b 142a  ld   $2a,y
              0f0c e058  jmp  y,$58
              0f0d c219  st   [$19]
Reset:        0f0e 0002  ld   $02         ;| RAM segment address (high byte first)
              0f0f 0000  ld   $00         ;|
              0f10 0084  ld   $84         ;| Length (1..256)
              0f11 0011  ld   $11         ;0200 LDWI
              0f12 00f8  ld   $f8
              0f13 0001  ld   $01
              0f14 002b  ld   $2b         ;0203 STW
              0f15 0030  ld   $30         ;0203 'CtrlBits'
              0f16 00cd  ld   $cd         ;0205 DEF
              0f17 007d  ld   $7d
              0f18 0075  ld   $75         ;0207 PUSH
              0f19 001a  ld   $1a         ;0208 LD
              0f1a 0001  ld   $01
              0f1b 00e6  ld   $e6         ;020a SUBI
              0f1c 0001  ld   $01
              0f1d 0082  ld   $82         ;020c ANDI
              0f1e 00ff  ld   $ff
              0f1f 00e3  ld   $e3         ;020e ADDI
              0f20 0001  ld   $01
              0f21 002b  ld   $2b         ;0210 STW
              0f22 0032  ld   $32         ;0210 'i'
              0f23 0059  ld   $59         ;0212 LDI
              0f24 0020  ld   $20
              0f25 005e  ld   $5e         ;0214 ST
              0f26 007a  ld   $7a
              0f27 0011  ld   $11         ;0216 LDWI
              0f28 0009  ld   $09
              0f29 000b  ld   $0b
              0f2a 002b  ld   $2b         ;0219 STW
              0f2b 0022  ld   $22         ;0219 '_sysFn'
              0f2c 0059  ld   $59         ;021b LDI
              0f2d 00aa  ld   $aa
              0f2e 005e  ld   $5e         ;021d ST
              0f2f 007c  ld   $7c
              0f30 0059  ld   $59         ;021f LDI
              0f31 007c  ld   $7c
              0f32 00b4  ld   $b4         ;0221 SYS
              0f33 00fa  ld   $fa
              0f34 001a  ld   $1a         ;0223 LD
              0f35 007c  ld   $7c
              0f36 008c  ld   $8c         ;0225 XORI
              0f37 00aa  ld   $aa
              0f38 0035  ld   $35         ;0227 BCC
              0f39 003f  ld   $3f         ;0228 EQ
              0f3a 002e  ld   $2e
              0f3b 0059  ld   $59         ;022a LDI
              0f3c 0000  ld   $00
              0f3d 00f0  ld   $f0         ;022c POKE
              0f3e 0030  ld   $30         ;022c 'CtrlBits'
              0f3f 0090  ld   $90         ;022e BRA
              0f40 0058  ld   $58
              0f41 0011  ld   $11         ;0230 LDWI
              0f42 0024  ld   $24
              0f43 0080  ld   $80
              0f44 002b  ld   $2b         ;0233 STW
              0f45 0034  ld   $34         ;0233 'q'
              0f46 0059  ld   $59         ;0235 LDI
              0f47 00bc  ld   $bc
              0f48 00b4  ld   $b4         ;0237 SYS
              0f49 00fa  ld   $fa
              0f4a 0021  ld   $21         ;0239 LDW
              0f4b 0034  ld   $34         ;0239 'q'
              0f4c 00ad  ld   $ad         ;023b PEEK
              0f4d 008c  ld   $8c         ;023c XORI
              0f4e 00ff  ld   $ff
              0f4f 00f0  ld   $f0         ;023e POKE
              0f50 0034  ld   $34         ;023e 'q'
              0f51 002b  ld   $2b         ;0240 STW
              0f52 0024  ld   $24         ;0240 '_sysArgs0'
              0f53 008c  ld   $8c         ;0242 XORI
              0f54 00ff  ld   $ff
              0f55 00f0  ld   $f0         ;0244 POKE
              0f56 0034  ld   $34         ;0244 'q'
              0f57 00fc  ld   $fc         ;0246 XORW
              0f58 0024  ld   $24         ;0246 '_sysArgs0'
              0f59 0035  ld   $35         ;0248 BCC
              0f5a 003f  ld   $3f         ;0249 EQ
              0f5b 0053  ld   $53
              0f5c 0059  ld   $59         ;024b LDI
              0f5d 0031  ld   $31
              0f5e 002b  ld   $2b         ;024d STW
              0f5f 0036  ld   $36         ;024d 'Char'
              0f60 005e  ld   $5e         ;024f ST
              0f61 007a  ld   $7a
              0f62 0059  ld   $59         ;0251 LDI
              0f63 0070  ld   $70
              0f64 002b  ld   $2b         ;0253 STW
              0f65 0032  ld   $32         ;0253 'i'
              0f66 0011  ld   $11         ;0255 LDWI
              0f67 007c  ld   $7c
              0f68 0080  ld   $80
              0f69 00b4  ld   $b4         ;0258 SYS
              0f6a 00fa  ld   $fa
              0f6b 0011  ld   $11         ;025a LDWI
              0f6c 002f  ld   $2f
              0f6d 002f  ld   $2f
              0f6e 002b  ld   $2b         ;025d STW
              0f6f 0036  ld   $36         ;025d 'Char'
              0f70 0021  ld   $21         ;025f LDW
              0f71 0032  ld   $32         ;025f 'i'
              0f72 0093  ld   $93         ;0261 INC
              0f73 0036  ld   $36         ;0261 'Char'
              0f74 00e6  ld   $e6         ;0263 SUBI
              0f75 0028  ld   $28
              0f76 0035  ld   $35         ;0265 BCC
              0f77 0053  ld   $53         ;0266 GE
              0f78 005f  ld   $5f
              0f79 00e3  ld   $e3         ;0268 ADDI
              0f7a 0028  ld   $28
              0f7b 0093  ld   $93         ;026a INC
              0f7c 0037  ld   $37         ;026a 'Char'+1
              0f7d 00e6  ld   $e6         ;026c SUBI
              0f7e 0004  ld   $04
              0f7f 0035  ld   $35         ;026e BCC
              0f80 0053  ld   $53         ;026f GE
              0f81 0068  ld   $68
              0f82 0021  ld   $21         ;0271 LDW
              0f83 0036  ld   $36         ;0271 'Char'
              0f84 002b  ld   $2b         ;0273 STW
              0f85 007b  ld   $7b
              0f86 0059  ld   $59         ;0275 LDI
              0f87 0003  ld   $03
              0f88 005e  ld   $5e         ;0277 ST
              0f89 0079  ld   $79
              0f8a 0059  ld   $59         ;0279 LDI
              0f8b 0000  ld   $00
              0f8c 005e  ld   $5e         ;027b ST
              0f8d 007d  ld   $7d
              0f8e 0063  ld   $63         ;027d POP
              0f8f 00ff  ld   $ff         ;027e RET
              0f90 002b  ld   $2b         ;027f STW
              0f91 0038  ld   $38         ;027f 'CheckMemory'
              0f92 0093  ld   $93         ;0281 INC
              0f93 001b  ld   $1b
              0f94 00ff  ld   $ff         ;0283 RET
              0f95 0003  ld   $03         ;| RAM segment address (high byte first)
              0f96 0000  ld   $00         ;|
              0f97 00af  ld   $af         ;| Length (1..256)
              0f98 00cd  ld   $cd         ;0300 DEF
              0f99 008e  ld   $8e
              0f9a 0075  ld   $75         ;0302 PUSH
              0f9b 0059  ld   $59         ;0303 LDI
              0f9c 0010  ld   $10
              0f9d 002b  ld   $2b         ;0305 STW
              0f9e 003a  ld   $3a         ;0305 'j'
              0f9f 0059  ld   $59         ;0307 LDI
              0fa0 000a  ld   $0a
              0fa1 002b  ld   $2b         ;0309 STW
              0fa2 0032  ld   $32         ;0309 'i'
              0fa3 00cf  ld   $cf         ;030b CALL
              0fa4 003c  ld   $3c         ;030b 'SendOnesToCard'
              0fa5 0021  ld   $21         ;030d LDW
              0fa6 0032  ld   $32         ;030d 'i'
              0fa7 00e6  ld   $e6         ;030f SUBI
              0fa8 0001  ld   $01
              0fa9 0035  ld   $35         ;0311 BCC
              0faa 004d  ld   $4d         ;0312 GT
              0fab 0007  ld   $07
              0fac 0011  ld   $11         ;0314 LDWI
              0fad 0009  ld   $09
              0fae 000b  ld   $0b
              0faf 002b  ld   $2b         ;0317 STW
              0fb0 0022  ld   $22         ;0317 '_sysFn'
              0fb1 0011  ld   $11         ;0319 LDWI
              0fb2 0078  ld   $78
              0fb3 0080  ld   $80
              0fb4 00b4  ld   $b4         ;031c SYS
              0fb5 00fa  ld   $fa
              0fb6 00cd  ld   $cd         ;031e DEF
              0fb7 0026  ld   $26
              0fb8 00ff  ld   $ff         ;0320 255
              0fb9 00ff  ld   $ff         ;0321 255
              0fba 0040  ld   $40         ;0322 64
              0fbb 0000  ld   $00         ;0323 0
              0fbc 0000  ld   $00         ;0324 0
              0fbd 0000  ld   $00         ;0325 0
              0fbe 0000  ld   $00         ;0326 0
              0fbf 0095  ld   $95         ;0327 149
              0fc0 002b  ld   $2b         ;0328 STW
              0fc1 003e  ld   $3e         ;0328 'p'
              0fc2 0059  ld   $59         ;032a LDI
              0fc3 0081  ld   $81
              0fc4 002b  ld   $2b         ;032c STW
              0fc5 0034  ld   $34         ;032c 'q'
              0fc6 0059  ld   $59         ;032e LDI
              0fc7 0008  ld   $08
              0fc8 002b  ld   $2b         ;0330 STW
              0fc9 0032  ld   $32         ;0330 'i'
              0fca 0021  ld   $21         ;0332 LDW
              0fcb 003e  ld   $3e         ;0332 'p'
              0fcc 00ad  ld   $ad         ;0334 PEEK
              0fcd 0093  ld   $93         ;0335 INC
              0fce 003e  ld   $3e         ;0335 'p'
              0fcf 00f0  ld   $f0         ;0337 POKE
              0fd0 0034  ld   $34         ;0337 'q'
              0fd1 0093  ld   $93         ;0339 INC
              0fd2 0034  ld   $34         ;0339 'q'
              0fd3 0021  ld   $21         ;033b LDW
              0fd4 0032  ld   $32         ;033b 'i'
              0fd5 00e6  ld   $e6         ;033d SUBI
              0fd6 0001  ld   $01
              0fd7 0035  ld   $35         ;033f BCC
              0fd8 004d  ld   $4d         ;0340 GT
              0fd9 002e  ld   $2e
              0fda 0059  ld   $59         ;0342 LDI
              0fdb 0081  ld   $81
              0fdc 002b  ld   $2b         ;0344 STW
              0fdd 0024  ld   $24         ;0344 '_sysArgs0'
              0fde 00e3  ld   $e3         ;0346 ADDI
              0fdf 0008  ld   $08
              0fe0 002b  ld   $2b         ;0348 STW
              0fe1 0026  ld   $26         ;0348 '_sysArgs2'
              0fe2 0011  ld   $11         ;034a LDWI
              0fe3 0015  ld   $15
              0fe4 000b  ld   $0b
              0fe5 002b  ld   $2b         ;034d STW
              0fe6 0022  ld   $22         ;034d '_sysFn'
              0fe7 00b4  ld   $b4         ;034f SYS
              0fe8 00cb  ld   $cb
              0fe9 0059  ld   $59         ;0351 LDI
              0fea 0010  ld   $10
              0feb 002b  ld   $2b         ;0353 STW
              0fec 0032  ld   $32         ;0353 'i'
              0fed 00cf  ld   $cf         ;0355 CALL
              0fee 003c  ld   $3c         ;0355 'SendOnesToCard'
              0fef 0082  ld   $82         ;0357 ANDI
              0ff0 0080  ld   $80
              0ff1 0035  ld   $35         ;0359 BCC
              0ff2 003f  ld   $3f         ;035a EQ
              0ff3 0061  ld   $61
              0ff4 0021  ld   $21         ;035c LDW
              0ff5 0032  ld   $32         ;035c 'i'
              0ff6 00e6  ld   $e6         ;035e SUBI
              0ff7 0001  ld   $01
              0ff8 0035  ld   $35         ;0360 BCC
              0ff9 004d  ld   $4d         ;0361 GT
              0ffa 0051  ld   $51
              0ffb fe00  bra  ac          ;+-----------------------------------+
              0ffc fcfd  bra  $0ffd       ;|                                   |
              0ffd 1404  ld   $04,y       ;| Trampoline for page $0f00 lookups |
              0ffe e068  jmp  y,$68       ;|                                   |
              0fff c218  st   [$18]       ;+-----------------------------------+
              1000 0011  ld   $11         ;0363 LDWI
              1001 0009  ld   $09
              1002 000b  ld   $0b
              1003 002b  ld   $2b         ;0366 STW
              1004 0022  ld   $22         ;0366 '_sysFn'
              1005 0011  ld   $11         ;0368 LDWI
              1006 007c  ld   $7c
              1007 0080  ld   $80
              1008 00b4  ld   $b4         ;036b SYS
              1009 00fa  ld   $fa
              100a 001a  ld   $1a         ;036d LD
              100b 002a  ld   $2a
              100c 0035  ld   $35         ;036f BCC
              100d 003f  ld   $3f         ;0370 EQ
              100e 008c  ld   $8c
              100f 008c  ld   $8c         ;0372 XORI
              1010 0001  ld   $01
              1011 0035  ld   $35         ;0374 BCC
              1012 0072  ld   $72         ;0375 NE
              1013 0085  ld   $85
              1014 0011  ld   $11         ;0377 LDWI
              1015 00d5  ld   $d5
              1016 001e  ld   $1e
              1017 002b  ld   $2b         ;037a STW
              1018 0024  ld   $24         ;037a '_sysArgs0'
              1019 0011  ld   $11         ;037c LDWI
              101a 0000  ld   $00
              101b 0002  ld   $02
              101c 002b  ld   $2b         ;037f STW
              101d 001a  ld   $1a         ;037f '_vLR'
              101e 0059  ld   $59         ;0381 LDI
              101f 00ad  ld   $ad
              1020 002b  ld   $2b         ;0383 STW
              1021 0022  ld   $22         ;0383 '_sysFn'
              1022 00b4  ld   $b4         ;0385 SYS
              1023 00e2  ld   $e2
              1024 0021  ld   $21         ;0387 LDW
              1025 003a  ld   $3a         ;0387 'j'
              1026 00e6  ld   $e6         ;0389 SUBI
              1027 0001  ld   $01
              1028 0035  ld   $35         ;038b BCC
              1029 004d  ld   $4d         ;038c GT
              102a 0003  ld   $03
              102b 0063  ld   $63         ;038e POP
              102c 00ff  ld   $ff         ;038f RET
              102d 002b  ld   $2b         ;0390 STW
              102e 0040  ld   $40         ;0390 'CheckCard'
              102f 00cd  ld   $cd         ;0392 DEF
              1030 00a8  ld   $a8
              1031 0059  ld   $59         ;0394 LDI
              1032 00ff  ld   $ff
              1033 005e  ld   $5e         ;0396 ST
              1034 002a  ld   $2a
              1035 0059  ld   $59         ;0398 LDI
              1036 002a  ld   $2a
              1037 002b  ld   $2b         ;039a STW
              1038 0024  ld   $24         ;039a '_sysArgs0'
              1039 00e3  ld   $e3         ;039c ADDI
              103a 0001  ld   $01
              103b 002b  ld   $2b         ;039e STW
              103c 0026  ld   $26         ;039e '_sysArgs2'
              103d 0011  ld   $11         ;03a0 LDWI
              103e 0015  ld   $15
              103f 000b  ld   $0b
              1040 002b  ld   $2b         ;03a3 STW
              1041 0022  ld   $22         ;03a3 '_sysFn'
              1042 00b4  ld   $b4         ;03a5 SYS
              1043 00cb  ld   $cb
              1044 001a  ld   $1a         ;03a7 LD
              1045 002a  ld   $2a
              1046 00ff  ld   $ff         ;03a9 RET
              1047 002b  ld   $2b         ;03aa STW
              1048 003c  ld   $3c         ;03aa 'SendOnesToCard'
              1049 0093  ld   $93         ;03ac INC
              104a 001b  ld   $1b
              104b 00ff  ld   $ff         ;03ae RET
              104c 0004  ld   $04         ;| RAM segment address (high byte first)
              104d 0000  ld   $00         ;|
              104e 007b  ld   $7b         ;| Length (1..256)
              104f 0011  ld   $11         ;0400 LDWI
              1050 000f  ld   $0f
              1051 000b  ld   $0b
              1052 002b  ld   $2b         ;0403 STW
              1053 0022  ld   $22
              1054 0059  ld   $59         ;0405 LDI
              1055 0000  ld   $00
              1056 00b4  ld   $b4         ;0407 SYS
              1057 00f5  ld   $f5
              1058 0011  ld   $11         ;0409 LDWI
              1059 0012  ld   $12
              105a 000b  ld   $0b
              105b 002b  ld   $2b         ;040c STW
              105c 0022  ld   $22
              105d 0059  ld   $59         ;040e LDI
              105e 0000  ld   $00
              105f 00b4  ld   $b4         ;0410 SYS
              1060 00f7  ld   $f7
              1061 00b4  ld   $b4         ;0412 SYS
              1062 00f7  ld   $f7
              1063 00b4  ld   $b4         ;0414 SYS
              1064 00f7  ld   $f7
              1065 00b4  ld   $b4         ;0416 SYS
              1066 00f7  ld   $f7
              1067 0011  ld   $11         ;0418 LDWI
              1068 0000  ld   $00
              1069 0001  ld   $01
              106a 002b  ld   $2b         ;041b STW
              106b 003e  ld   $3e         ;041b 'p'
              106c 0011  ld   $11         ;041d LDWI
              106d 0000  ld   $00
              106e 0008  ld   $08
              106f 002b  ld   $2b         ;0420 STW
              1070 0034  ld   $34         ;0420 'q'
              1071 001a  ld   $1a         ;0422 LD
              1072 0035  ld   $35         ;0422 'q'+1
              1073 00f0  ld   $f0         ;0424 POKE
              1074 003e  ld   $3e         ;0424 'p'
              1075 0093  ld   $93         ;0426 INC
              1076 003e  ld   $3e         ;0426 'p'
              1077 0059  ld   $59         ;0428 LDI
              1078 0000  ld   $00
              1079 00f0  ld   $f0         ;042a POKE
              107a 003e  ld   $3e         ;042a 'p'
              107b 0093  ld   $93         ;042c INC
              107c 003e  ld   $3e         ;042c 'p'
              107d 0093  ld   $93         ;042e INC
              107e 0035  ld   $35         ;042e 'q'+1
              107f 0021  ld   $21         ;0430 LDW
              1080 0034  ld   $34         ;0430 'q'
              1081 0035  ld   $35         ;0432 BCC
              1082 004d  ld   $4d         ;0433 GT
              1083 0020  ld   $20
              1084 0011  ld   $11         ;0435 LDWI
              1085 0003  ld   $03
              1086 000b  ld   $0b
              1087 002b  ld   $2b         ;0438 STW
              1088 0022  ld   $22         ;0438 '_sysFn'
              1089 0059  ld   $59         ;043a LDI
              108a 0000  ld   $00
              108b 005e  ld   $5e         ;043c ST
              108c 0025  ld   $25
              108d 0011  ld   $11         ;043e LDWI
              108e 0000  ld   $00
              108f 0008  ld   $08
              1090 002b  ld   $2b         ;0441 STW
              1091 003e  ld   $3e         ;0441 'p'
              1092 002b  ld   $2b         ;0443 STW
              1093 0026  ld   $26         ;0443 '_sysArgs2'
              1094 0059  ld   $59         ;0445 LDI
              1095 00a0  ld   $a0
              1096 005e  ld   $5e         ;0447 ST
              1097 0024  ld   $24
              1098 00b4  ld   $b4         ;0449 SYS
              1099 00f3  ld   $f3
              109a 0011  ld   $11         ;044b LDWI
              109b 0000  ld   $00
              109c 0001  ld   $01
              109d 0099  ld   $99         ;044e ADDW
              109e 003e  ld   $3e         ;044e 'p'
              109f 0035  ld   $35         ;0450 BCC
              10a0 004d  ld   $4d         ;0451 GT
              10a1 003f  ld   $3f
              10a2 0011  ld   $11         ;0453 LDWI
              10a3 0014  ld   $14
              10a4 0008  ld   $08
              10a5 002b  ld   $2b         ;0456 STW
              10a6 0042  ld   $42         ;0456 'Pos'
              10a7 00cf  ld   $cf         ;0458 CALL
              10a8 0038  ld   $38         ;0458 'CheckMemory'
              10a9 0011  ld   $11         ;045a LDWI
              10aa 0000  ld   $00
              10ab 000b  ld   $0b
              10ac 002b  ld   $2b         ;045d STW
              10ad 0022  ld   $22         ;045d '_sysFn'
              10ae 0059  ld   $59         ;045f LDI
              10af 0002  ld   $02
              10b0 00b4  ld   $b4         ;0461 SYS
              10b1 00e6  ld   $e6
              10b2 0021  ld   $21         ;0463 LDW
              10b3 0030  ld   $30         ;0463 'CtrlBits'
              10b4 00ad  ld   $ad         ;0465 PEEK
              10b5 0035  ld   $35         ;0466 BCC
              10b6 003f  ld   $3f         ;0467 EQ
              10b7 0069  ld   $69
              10b8 00cf  ld   $cf         ;0469 CALL
              10b9 0040  ld   $40         ;0469 'CheckCard'
              10ba 0011  ld   $11         ;046b LDWI
              10bb 00d9  ld   $d9
              10bc 0010  ld   $10
              10bd 002b  ld   $2b         ;046e STW
              10be 0024  ld   $24         ;046e '_sysArgs0'
              10bf 0011  ld   $11         ;0470 LDWI
              10c0 0000  ld   $00
              10c1 0002  ld   $02
              10c2 002b  ld   $2b         ;0473 STW
              10c3 001a  ld   $1a         ;0473 '_vLR'
              10c4 0059  ld   $59         ;0475 LDI
              10c5 00ad  ld   $ad
              10c6 002b  ld   $2b         ;0477 STW
              10c7 0022  ld   $22         ;0477 '_sysFn'
              10c8 00b4  ld   $b4         ;0479 SYS
              10c9 00e2  ld   $e2
              10ca 0000  ld   $00         ;End of Core/Reset_vX0.gcl, size 445
                                          ;+-----------------------------------+
                                          ;| Core/mainmenu_v5a.gt1             |
                                          ;+-----------------------------------+
              10cb dc52  st   $52,[y,x++] ;'R'
              10cc dc65  st   $65,[y,x++] ;'e'
              10cd dc73  st   $73,[y,x++] ;'s'
              10ce dc65  st   $65,[y,x++] ;'e'
              10cf dc74  st   $74,[y,x++] ;'t'
              10d0 dc00  st   $00,[y,x++] ;'\x00'
              10d1 dc00  st   $00,[y,x++] ;'\x00'
              10d2 dc00  st   $00,[y,x++] ;'\x00'
              10d3 000e  ld   $0e
              10d4 c218  st   [$18]
              10d5 000f  ld   $0f
              10d6 142a  ld   $2a,y
              10d7 e058  jmp  y,$58
              10d8 c219  st   [$19]
Main:         10d9 0000  ld   $00
              10da 007e  ld   $7e
              10db 0002  ld   $02
              10dc 0001  ld   $01
              10dd 0001  ld   $01
              10de 0002  ld   $02
              10df 0000  ld   $00
              10e0 00fa  ld   $fa
              10e1 0011  ld   $11
              10e2 0020  ld   $20
              10e3 000f  ld   $0f
              10e4 002b  ld   $2b
              10e5 00a2  ld   $a2
              10e6 001a  ld   $1a
              10e7 0021  ld   $21
              10e8 0088  ld   $88
              10e9 0003  ld   $03
              10ea 005e  ld   $5e
              10eb 0021  ld   $21
              10ec 0059  ld   $59
              10ed 0002  ld   $02
              10ee 002b  ld   $2b
              10ef 00aa  ld   $aa
              10f0 0059  ld   $59
              10f1 0000  ld   $00
              10f2 002b  ld   $2b
              10f3 00a6  ld   $a6
              10f4 001a  ld   $1a
              10f5 000e  ld   $0e
              10f6 002b  ld   $2b
              10f7 00d6  ld   $d6
              10f8 0085  ld   $85
              10f9 00c6  ld   $c6
              10fa 006c  ld   $6c
              10fb fe00  bra  ac          ;+-----------------------------------+
              10fc fcfd  bra  $10fd       ;|                                   |
              10fd 1404  ld   $04,y       ;| Trampoline for page $1000 lookups |
              10fe e068  jmp  y,$68       ;|                                   |
              10ff c218  st   [$18]       ;+-----------------------------------+
              1100 001a  ld   $1a
              1101 00aa  ld   $aa
              1102 0082  ld   $82
              1103 00fd  ld   $fd
              1104 005e  ld   $5e
              1105 00aa  ld   $aa
              1106 0059  ld   $59
              1107 0000  ld   $00
              1108 005e  ld   $5e
              1109 00a2  ld   $a2
              110a 0059  ld   $59
              110b 0002  ld   $02
              110c 002b  ld   $2b
              110d 0082  ld   $82
              110e 0085  ld   $85
              110f 00b2  ld   $b2
              1110 006c  ld   $6c
              1111 0085  ld   $85
              1112 00cd  ld   $cd
              1113 0071  ld   $71
              1114 0059  ld   $59
              1115 0020  ld   $20
              1116 005e  ld   $5e
              1117 00a3  ld   $a3
              1118 0059  ld   $59
              1119 0000  ld   $00
              111a 002b  ld   $2b
              111b 0082  ld   $82
              111c 0059  ld   $59
              111d 0000  ld   $00
              111e 002b  ld   $2b
              111f 0084  ld   $84
              1120 0059  ld   $59
              1121 009f  ld   $9f
              1122 002b  ld   $2b
              1123 0086  ld   $86
              1124 0059  ld   $59
              1125 001b  ld   $1b
              1126 002b  ld   $2b
              1127 0092  ld   $92
              1128 0085  ld   $85
              1129 00b9  ld   $b9
              112a 006e  ld   $6e
              112b 0059  ld   $59
              112c 0010  ld   $10
              112d 005e  ld   $5e
              112e 00a3  ld   $a3
              112f 0059  ld   $59
              1130 0002  ld   $02
              1131 002b  ld   $2b
              1132 0082  ld   $82
              1133 0059  ld   $59
              1134 0002  ld   $02
              1135 002b  ld   $2b
              1136 0084  ld   $84
              1137 0059  ld   $59
              1138 009d  ld   $9d
              1139 002b  ld   $2b
              113a 0086  ld   $86
              113b 0059  ld   $59
              113c 0019  ld   $19
              113d 002b  ld   $2b
              113e 0092  ld   $92
              113f 0085  ld   $85
              1140 00b9  ld   $b9
              1141 006e  ld   $6e
              1142 0059  ld   $59
              1143 0020  ld   $20
              1144 005e  ld   $5e
              1145 00a3  ld   $a3
              1146 0059  ld   $59
              1147 0000  ld   $00
              1148 002b  ld   $2b
              1149 0082  ld   $82
              114a 0059  ld   $59
              114b 005b  ld   $5b
              114c 002b  ld   $2b
              114d 0084  ld   $84
              114e 0059  ld   $59
              114f 009f  ld   $9f
              1150 002b  ld   $2b
              1151 0086  ld   $86
              1152 0059  ld   $59
              1153 0077  ld   $77
              1154 002b  ld   $2b
              1155 0092  ld   $92
              1156 0085  ld   $85
              1157 00b9  ld   $b9
              1158 006e  ld   $6e
              1159 0059  ld   $59
              115a 0010  ld   $10
              115b 005e  ld   $5e
              115c 00a3  ld   $a3
              115d 0059  ld   $59
              115e 0002  ld   $02
              115f 002b  ld   $2b
              1160 0082  ld   $82
              1161 0059  ld   $59
              1162 005d  ld   $5d
              1163 002b  ld   $2b
              1164 0084  ld   $84
              1165 0059  ld   $59
              1166 009d  ld   $9d
              1167 002b  ld   $2b
              1168 0086  ld   $86
              1169 0059  ld   $59
              116a 0075  ld   $75
              116b 002b  ld   $2b
              116c 0092  ld   $92
              116d 0085  ld   $85
              116e 00b9  ld   $b9
              116f 006e  ld   $6e
              1170 0059  ld   $59
              1171 0020  ld   $20
              1172 005e  ld   $5e
              1173 00a3  ld   $a3
              1174 0059  ld   $59
              1175 0000  ld   $00
              1176 002b  ld   $2b
              1177 0082  ld   $82
              1178 0059  ld   $59
              1179 001c  ld   $1c
              117a 002b  ld   $2b
              117b 0084  ld   $84
              117c 0059  ld   $59
              117d 0001  ld   $01
              117e 002b  ld   $2b
              117f 0086  ld   $86
              1180 0059  ld   $59
              1181 005a  ld   $5a
              1182 002b  ld   $2b
              1183 0092  ld   $92
              1184 0085  ld   $85
              1185 00b9  ld   $b9
              1186 006e  ld   $6e
              1187 0059  ld   $59
              1188 0020  ld   $20
              1189 005e  ld   $5e
              118a 00a3  ld   $a3
              118b 0059  ld   $59
              118c 009e  ld   $9e
              118d 002b  ld   $2b
              118e 0082  ld   $82
              118f 0059  ld   $59
              1190 001c  ld   $1c
              1191 002b  ld   $2b
              1192 0084  ld   $84
              1193 0059  ld   $59
              1194 009f  ld   $9f
              1195 002b  ld   $2b
              1196 0086  ld   $86
              1197 0059  ld   $59
              1198 005a  ld   $5a
              1199 002b  ld   $2b
              119a 0092  ld   $92
              119b 0085  ld   $85
              119c 00b9  ld   $b9
              119d 006e  ld   $6e
              119e 0085  ld   $85
              119f 00f3  ld   $f3
              11a0 0005  ld   $05
              11a1 0011  ld   $11
              11a2 0000  ld   $00
              11a3 000c  ld   $0c
              11a4 002b  ld   $2b
              11a5 00a2  ld   $a2
              11a6 0059  ld   $59
              11a7 0022  ld   $22
              11a8 002b  ld   $2b
              11a9 0030  ld   $30
              11aa 0059  ld   $59
              11ab 0000  ld   $00
              11ac 002b  ld   $2b
              11ad 0032  ld   $32
              11ae 0059  ld   $59
              11af 0012  ld   $12
              11b0 005e  ld   $5e
              11b1 00a4  ld   $a4
              11b2 0021  ld   $21
              11b3 0030  ld   $30
              11b4 005e  ld   $5e
              11b5 00a5  ld   $a5
              11b6 0085  ld   $85
              11b7 00db  ld   $db
              11b8 006e  ld   $6e
              11b9 0011  ld   $11
              11ba 00ec  ld   $ec
              11bb 007e  ld   $7e
              11bc 0099  ld   $99
              11bd 0032  ld   $32
              11be 0099  ld   $99
              11bf 0032  ld   $32
              11c0 00f6  ld   $f6
              11c1 0085  ld   $85
              11c2 00bc  ld   $bc
              11c3 006d  ld   $6d
              11c4 0085  ld   $85
              11c5 00a1  ld   $a1
              11c6 0078  ld   $78
              11c7 0059  ld   $59
              11c8 005c  ld   $5c
              11c9 005e  ld   $5e
              11ca 00a4  ld   $a4
              11cb 0021  ld   $21
              11cc 0030  ld   $30
              11cd 005e  ld   $5e
              11ce 00a5  ld   $a5
              11cf 0085  ld   $85
              11d0 00db  ld   $db
              11d1 006e  ld   $6e
              11d2 0021  ld   $21
              11d3 0032  ld   $32
              11d4 00e3  ld   $e3
              11d5 0005  ld   $05
              11d6 002b  ld   $2b
              11d7 0096  ld   $96
              11d8 0011  ld   $11
              11d9 00ec  ld   $ec
              11da 007e  ld   $7e
              11db 0099  ld   $99
              11dc 0096  ld   $96
              11dd 0085  ld   $85
              11de 0000  ld   $00
              11df 0003  ld   $03
              11e0 0003  ld   $03
              11e1 0000  ld   $00
              11e2 00f9  ld   $f9
              11e3 0099  ld   $99
              11e4 0096  ld   $96
              11e5 00f6  ld   $f6
              11e6 0085  ld   $85
              11e7 00bc  ld   $bc
              11e8 006d  ld   $6d
              11e9 0085  ld   $85
              11ea 00a1  ld   $a1
              11eb 0078  ld   $78
              11ec 0021  ld   $21
              11ed 0030  ld   $30
              11ee 00e3  ld   $e3
              11ef 0009  ld   $09
              11f0 002b  ld   $2b
              11f1 0030  ld   $30
              11f2 0093  ld   $93
              11f3 0032  ld   $32
              11f4 001a  ld   $1a
              11f5 0032  ld   $32
              11f6 00e6  ld   $e6
              11f7 0004  ld   $04
              11f8 0035  ld   $35
              11f9 004d  ld   $4d
              11fa 0019  ld   $19
              11fb fe00  bra  ac          ;+-----------------------------------+
              11fc fcfd  bra  $11fd       ;|                                   |
              11fd 1404  ld   $04,y       ;| Trampoline for page $1100 lookups |
              11fe e068  jmp  y,$68       ;|                                   |
              11ff c218  st   [$18]       ;+-----------------------------------+
              1200 0085  ld   $85
              1201 00c8  ld   $c8
              1202 0002  ld   $02
              1203 0011  ld   $11
              1204 0010  ld   $10
              1205 002a  ld   $2a
              1206 002b  ld   $2b
              1207 00a2  ld   $a2
              1208 0059  ld   $59
              1209 000e  ld   $0e
              120a 005e  ld   $5e
              120b 00a4  ld   $a4
              120c 0059  ld   $59
              120d 005e  ld   $5e
              120e 005e  ld   $5e
              120f 00a5  ld   $a5
              1210 0085  ld   $85
              1211 00db  ld   $db
              1212 006e  ld   $6e
              1213 0011  ld   $11
              1214 00a1  ld   $a1
              1215 007f  ld   $7f
              1216 0085  ld   $85
              1217 00bc  ld   $bc
              1218 006d  ld   $6d
              1219 0011  ld   $11
              121a 00cc  ld   $cc
              121b 007e  ld   $7e
              121c 002b  ld   $2b
              121d 00c4  ld   $c4
              121e 0059  ld   $59
              121f 003f  ld   $3f
              1220 002b  ld   $2b
              1221 00c6  ld   $c6
              1222 0085  ld   $85
              1223 0003  ld   $03
              1224 0004  ld   $04
              1225 0011  ld   $11
              1226 00af  ld   $af
              1227 007e  ld   $7e
              1228 0085  ld   $85
              1229 00bc  ld   $bc
              122a 006d  ld   $6d
              122b 0059  ld   $59
              122c 0014  ld   $14
              122d 005e  ld   $5e
              122e 00a4  ld   $a4
              122f 0059  ld   $59
              1230 0066  ld   $66
              1231 005e  ld   $5e
              1232 00a5  ld   $a5
              1233 0085  ld   $85
              1234 00db  ld   $db
              1235 006e  ld   $6e
              1236 0011  ld   $11
              1237 00a8  ld   $a8
              1238 007e  ld   $7e
              1239 0085  ld   $85
              123a 00bc  ld   $bc
              123b 006d  ld   $6d
              123c 0011  ld   $11
              123d 00c5  ld   $c5
              123e 007e  ld   $7e
              123f 002b  ld   $2b
              1240 00c4  ld   $c4
              1241 0059  ld   $59
              1242 003f  ld   $3f
              1243 002b  ld   $2b
              1244 00c6  ld   $c6
              1245 0085  ld   $85
              1246 0003  ld   $03
              1247 0004  ld   $04
              1248 0011  ld   $11
              1249 00f4  ld   $f4
              124a 007d  ld   $7d
              124b 0085  ld   $85
              124c 00bc  ld   $bc
              124d 006d  ld   $6d
              124e 0059  ld   $59
              124f 000e  ld   $0e
              1250 005e  ld   $5e
              1251 00a4  ld   $a4
              1252 0059  ld   $59
              1253 006e  ld   $6e
              1254 005e  ld   $5e
              1255 00a5  ld   $a5
              1256 0085  ld   $85
              1257 00db  ld   $db
              1258 006e  ld   $6e
              1259 0011  ld   $11
              125a 00a2  ld   $a2
              125b 007e  ld   $7e
              125c 0085  ld   $85
              125d 00bc  ld   $bc
              125e 006d  ld   $6d
              125f 0011  ld   $11
              1260 00ba  ld   $ba
              1261 007e  ld   $7e
              1262 002b  ld   $2b
              1263 00c4  ld   $c4
              1264 0059  ld   $59
              1265 003f  ld   $3f
              1266 002b  ld   $2b
              1267 00c6  ld   $c6
              1268 0085  ld   $85
              1269 0003  ld   $03
              126a 0004  ld   $04
              126b 0011  ld   $11
              126c 00e9  ld   $e9
              126d 007d  ld   $7d
              126e 0085  ld   $85
              126f 00bc  ld   $bc
              1270 006d  ld   $6d
              1271 0085  ld   $85
              1272 00a1  ld   $a1
              1273 0078  ld   $78
              1274 0011  ld   $11
              1275 0000  ld   $00
              1276 0015  ld   $15
              1277 002b  ld   $2b
              1278 00a2  ld   $a2
              1279 0059  ld   $59
              127a 0003  ld   $03
              127b 005e  ld   $5e
              127c 00a4  ld   $a4
              127d 0059  ld   $59
              127e 0053  ld   $53
              127f 005e  ld   $5e
              1280 00a5  ld   $a5
              1281 0085  ld   $85
              1282 00db  ld   $db
              1283 006e  ld   $6e
              1284 0011  ld   $11
              1285 00e1  ld   $e1
              1286 007d  ld   $7d
              1287 0085  ld   $85
              1288 00bc  ld   $bc
              1289 006d  ld   $6d
              128a 0085  ld   $85
              128b 00a1  ld   $a1
              128c 0078  ld   $78
              128d 0059  ld   $59
              128e 008c  ld   $8c
              128f 005e  ld   $5e
              1290 00a4  ld   $a4
              1291 0059  ld   $59
              1292 0053  ld   $53
              1293 005e  ld   $5e
              1294 00a5  ld   $a5
              1295 0085  ld   $85
              1296 00db  ld   $db
              1297 006e  ld   $6e
              1298 0085  ld   $85
              1299 00e8  ld   $e8
              129a 0006  ld   $06
              129b 0059  ld   $59
              129c 000a  ld   $0a
              129d 002b  ld   $2b
              129e 0034  ld   $34
              129f 0059  ld   $59
              12a0 0022  ld   $22
              12a1 002b  ld   $2b
              12a2 0030  ld   $30
              12a3 0059  ld   $59
              12a4 0000  ld   $00
              12a5 002b  ld   $2b
              12a6 0036  ld   $36
              12a7 0059  ld   $59
              12a8 0003  ld   $03
              12a9 005e  ld   $5e
              12aa 0087  ld   $87
              12ab 0011  ld   $11
              12ac 00a0  ld   $a0
              12ad 0075  ld   $75
              12ae 002b  ld   $2b
              12af 0092  ld   $92
              12b0 0085  ld   $85
              12b1 00dd  ld   $dd
              12b2 006b  ld   $6b
              12b3 0085  ld   $85
              12b4 00b9  ld   $b9
              12b5 0073  ld   $73
              12b6 0085  ld   $85
              12b7 00c0  ld   $c0
              12b8 0008  ld   $08
              12b9 0085  ld   $85
              12ba 00d9  ld   $d9
              12bb 0005  ld   $05
              12bc 001a  ld   $1a
              12bd 0011  ld   $11
              12be 002b  ld   $2b
              12bf 009a  ld   $9a
              12c0 0059  ld   $59
              12c1 0000  ld   $00
              12c2 002b  ld   $2b
              12c3 009c  ld   $9c
              12c4 0085  ld   $85
              12c5 00cd  ld   $cd
              12c6 0072  ld   $72
              12c7 001a  ld   $1a
              12c8 0006  ld   $06
              12c9 005e  ld   $5e
              12ca 00a3  ld   $a3
              12cb 0021  ld   $21
              12cc 0034  ld   $34
              12cd 005e  ld   $5e
              12ce 00a4  ld   $a4
              12cf 0021  ld   $21
              12d0 0030  ld   $30
              12d1 005e  ld   $5e
              12d2 00a5  ld   $a5
              12d3 0085  ld   $85
              12d4 00db  ld   $db
              12d5 006e  ld   $6e
              12d6 0059  ld   $59
              12d7 003e  ld   $3e
              12d8 0085  ld   $85
              12d9 00d1  ld   $d1
              12da 006c  ld   $6c
              12db 0085  ld   $85
              12dc 0013  ld   $13
              12dd 0004  ld   $04
              12de 0085  ld   $85
              12df 0000  ld   $00
              12e0 0004  ld   $04
              12e1 0004  ld   $04
              12e2 0000  ld   $00
              12e3 00f8  ld   $f8
              12e4 0085  ld   $85
              12e5 00d4  ld   $d4
              12e6 0003  ld   $03
              12e7 0075  ld   $75
              12e8 0021  ld   $21
              12e9 00c6  ld   $c6
              12ea 005e  ld   $5e
              12eb 00a3  ld   $a3
              12ec 0021  ld   $21
              12ed 00c4  ld   $c4
              12ee 0085  ld   $85
              12ef 00bc  ld   $bc
              12f0 006d  ld   $6d
              12f1 0059  ld   $59
              12f2 002a  ld   $2a
              12f3 005e  ld   $5e
              12f4 00a3  ld   $a3
              12f5 0063  ld   $63
              12f6 00ff  ld   $ff
              12f7 0075  ld   $75
              12f8 0059  ld   $59
              12f9 0000  ld   $00
              12fa 002b  ld   $2b
              12fb fe00  bra  ac          ;+-----------------------------------+
              12fc fcfd  bra  $12fd       ;|                                   |
              12fd 1404  ld   $04,y       ;| Trampoline for page $1200 lookups |
              12fe e068  jmp  y,$68       ;|                                   |
              12ff c218  st   [$18]       ;+-----------------------------------+
              1300 00c4  ld   $c4
              1301 0011  ld   $11
              1302 00d0  ld   $d0
              1303 007c  ld   $7c
              1304 0099  ld   $99
              1305 00c4  ld   $c4
              1306 0099  ld   $99
              1307 00c4  ld   $c4
              1308 00f6  ld   $f6
              1309 002b  ld   $2b
              130a 00ca  ld   $ca
              130b 002b  ld   $2b
              130c 00c6  ld   $c6
              130d 0011  ld   $11
              130e 00d0  ld   $d0
              130f 007b  ld   $7b
              1310 0099  ld   $99
              1311 00c4  ld   $c4
              1312 0099  ld   $99
              1313 00c4  ld   $c4
              1314 00f6  ld   $f6
              1315 002b  ld   $2b
              1316 0038  ld   $38
              1317 0011  ld   $11
              1318 00a0  ld   $a0
              1319 007c  ld   $7c
              131a 0099  ld   $99
              131b 00c4  ld   $c4
              131c 0099  ld   $99
              131d 00c4  ld   $c4
              131e 00f6  ld   $f6
              131f 002b  ld   $2b
              1320 00cc  ld   $cc
              1321 002b  ld   $2b
              1322 00c8  ld   $c8
              1323 0011  ld   $11
              1324 00a0  ld   $a0
              1325 007b  ld   $7b
              1326 0099  ld   $99
              1327 00c4  ld   $c4
              1328 0099  ld   $99
              1329 00c4  ld   $c4
              132a 00f6  ld   $f6
              132b 002b  ld   $2b
              132c 003a  ld   $3a
              132d 0021  ld   $21
              132e 00ca  ld   $ca
              132f 0099  ld   $99
              1330 0038  ld   $38
              1331 002b  ld   $2b
              1332 00ca  ld   $ca
              1333 002b  ld   $2b
              1334 009c  ld   $9c
              1335 0011  ld   $11
              1336 00d0  ld   $d0
              1337 007c  ld   $7c
              1338 0099  ld   $99
              1339 00c4  ld   $c4
              133a 0099  ld   $99
              133b 00c4  ld   $c4
              133c 002b  ld   $2b
              133d 009e  ld   $9e
              133e 0021  ld   $21
              133f 009c  ld   $9c
              1340 00f3  ld   $f3
              1341 009e  ld   $9e
              1342 0021  ld   $21
              1343 00cc  ld   $cc
              1344 0099  ld   $99
              1345 003a  ld   $3a
              1346 002b  ld   $2b
              1347 00cc  ld   $cc
              1348 002b  ld   $2b
              1349 009c  ld   $9c
              134a 0011  ld   $11
              134b 00a0  ld   $a0
              134c 007c  ld   $7c
              134d 0099  ld   $99
              134e 00c4  ld   $c4
              134f 0099  ld   $99
              1350 00c4  ld   $c4
              1351 002b  ld   $2b
              1352 009e  ld   $9e
              1353 0021  ld   $21
              1354 009c  ld   $9c
              1355 00f3  ld   $f3
              1356 009e  ld   $9e
              1357 0021  ld   $21
              1358 00cc  ld   $cc
              1359 0085  ld   $85
              135a 00bc  ld   $bc
              135b 006c  ld   $6c
              135c 002b  ld   $2b
              135d 00e8  ld   $e8
              135e 0011  ld   $11
              135f 0000  ld   $00
              1360 001f  ld   $1f
              1361 00b8  ld   $b8
              1362 00e8  ld   $e8
              1363 0085  ld   $85
              1364 00ec  ld   $ec
              1365 006b  ld   $6b
              1366 0035  ld   $35
              1367 0072  ld   $72
              1368 0081  ld   $81
              1369 0085  ld   $85
              136a 008d  ld   $8d
              136b 0004  ld   $04
              136c 0021  ld   $21
              136d 00c4  ld   $c4
              136e 002b  ld   $2b
              136f 00c4  ld   $c4
              1370 0085  ld   $85
              1371 0047  ld   $47
              1372 0005  ld   $05
              1373 0085  ld   $85
              1374 00a9  ld   $a9
              1375 0004  ld   $04
              1376 0021  ld   $21
              1377 00ca  ld   $ca
              1378 0085  ld   $85
              1379 00bc  ld   $bc
              137a 006c  ld   $6c
              137b 002b  ld   $2b
              137c 00e8  ld   $e8
              137d 0011  ld   $11
              137e 0000  ld   $00
              137f 004f  ld   $4f
              1380 00b8  ld   $b8
              1381 00e8  ld   $e8
              1382 0085  ld   $85
              1383 00ec  ld   $ec
              1384 006b  ld   $6b
              1385 0035  ld   $35
              1386 0072  ld   $72
              1387 00a0  ld   $a0
              1388 0085  ld   $85
              1389 00a9  ld   $a9
              138a 0004  ld   $04
              138b 0021  ld   $21
              138c 00c4  ld   $c4
              138d 002b  ld   $2b
              138e 00c4  ld   $c4
              138f 0085  ld   $85
              1390 0047  ld   $47
              1391 0005  ld   $05
              1392 001a  ld   $1a
              1393 00c7  ld   $c7
              1394 00e3  ld   $e3
              1395 0050  ld   $50
              1396 005e  ld   $5e
              1397 00d0  ld   $d0
              1398 001a  ld   $1a
              1399 00c9  ld   $c9
              139a 00e3  ld   $e3
              139b 0044  ld   $44
              139c 005e  ld   $5e
              139d 00d1  ld   $d1
              139e 0021  ld   $21
              139f 00d0  ld   $d0
              13a0 00ad  ld   $ad
              13a1 0082  ld   $82
              13a2 0080  ld   $80
              13a3 0035  ld   $35
              13a4 0072  ld   $72
              13a5 00be  ld   $be
              13a6 0085  ld   $85
              13a7 00c4  ld   $c4
              13a8 0004  ld   $04
              13a9 0059  ld   $59
              13aa 0000  ld   $00
              13ab 00f0  ld   $f0
              13ac 00d0  ld   $d0
              13ad 0011  ld   $11
              13ae 00c9  ld   $c9
              13af 007d  ld   $7d
              13b0 0099  ld   $99
              13b1 00c4  ld   $c4
              13b2 00ad  ld   $ad
              13b3 002b  ld   $2b
              13b4 00ce  ld   $ce
              13b5 001a  ld   $1a
              13b6 00cb  ld   $cb
              13b7 00e3  ld   $e3
              13b8 0050  ld   $50
              13b9 005e  ld   $5e
              13ba 00d0  ld   $d0
              13bb 001a  ld   $1a
              13bc 00cd  ld   $cd
              13bd 00e3  ld   $e3
              13be 0044  ld   $44
              13bf 005e  ld   $5e
              13c0 00d1  ld   $d1
              13c1 0021  ld   $21
              13c2 00d0  ld   $d0
              13c3 00ad  ld   $ad
              13c4 0085  ld   $85
              13c5 00a0  ld   $a0
              13c6 0079  ld   $79
              13c7 0035  ld   $35
              13c8 0072  ld   $72
              13c9 00e2  ld   $e2
              13ca 0085  ld   $85
              13cb 0039  ld   $39
              13cc 0005  ld   $05
              13cd 0021  ld   $21
              13ce 00ce  ld   $ce
              13cf 00e6  ld   $e6
              13d0 0014  ld   $14
              13d1 0085  ld   $85
              13d2 00e3  ld   $e3
              13d3 006b  ld   $6b
              13d4 0035  ld   $35
              13d5 0072  ld   $72
              13d6 00ef  ld   $ef
              13d7 0085  ld   $85
              13d8 0003  ld   $03
              13d9 0005  ld   $05
              13da 0059  ld   $59
              13db 00bf  ld   $bf
              13dc 00f0  ld   $f0
              13dd 00d0  ld   $d0
              13de 0085  ld   $85
              13df 0000  ld   $00
              13e0 0005  ld   $05
              13e1 0005  ld   $05
              13e2 0000  ld   $00
              13e3 0000  ld   $00
              13e4 0085  ld   $85
              13e5 0028  ld   $28
              13e6 0005  ld   $05
              13e7 0021  ld   $21
              13e8 00ce  ld   $ce
              13e9 00e6  ld   $e6
              13ea 000a  ld   $0a
              13eb 0085  ld   $85
              13ec 00e3  ld   $e3
              13ed 006b  ld   $6b
              13ee 0035  ld   $35
              13ef 0072  ld   $72
              13f0 000e  ld   $0e
              13f1 0085  ld   $85
              13f2 0017  ld   $17
              13f3 0005  ld   $05
              13f4 0059  ld   $59
              13f5 00aa  ld   $aa
              13f6 00f0  ld   $f0
              13f7 00d0  ld   $d0
              13f8 0085  ld   $85
              13f9 0028  ld   $28
              13fa 0005  ld   $05
              13fb fe00  bra  ac          ;+-----------------------------------+
              13fc fcfd  bra  $13fd       ;|                                   |
              13fd 1404  ld   $04,y       ;| Trampoline for page $1300 lookups |
              13fe e068  jmp  y,$68       ;|                                   |
              13ff c218  st   [$18]       ;+-----------------------------------+
              1400 0021  ld   $21
              1401 00ce  ld   $ce
              1402 00e6  ld   $e6
              1403 0004  ld   $04
              1404 0085  ld   $85
              1405 00e3  ld   $e3
              1406 006b  ld   $6b
              1407 0035  ld   $35
              1408 0072  ld   $72
              1409 0022  ld   $22
              140a 0085  ld   $85
              140b 0028  ld   $28
              140c 0005  ld   $05
              140d 0059  ld   $59
              140e 0095  ld   $95
              140f 00f0  ld   $f0
              1410 00d0  ld   $d0
              1411 0021  ld   $21
              1412 00ce  ld   $ce
              1413 00e3  ld   $e3
              1414 0001  ld   $01
              1415 002b  ld   $2b
              1416 009c  ld   $9c
              1417 0011  ld   $11
              1418 00c9  ld   $c9
              1419 007d  ld   $7d
              141a 0099  ld   $99
              141b 00c4  ld   $c4
              141c 002b  ld   $2b
              141d 009e  ld   $9e
              141e 0021  ld   $21
              141f 009c  ld   $9c
              1420 00f0  ld   $f0
              1421 009e  ld   $9e
              1422 0093  ld   $93
              1423 00c4  ld   $c4
              1424 001a  ld   $1a
              1425 00c4  ld   $c4
              1426 00e6  ld   $e6
              1427 0017  ld   $17
              1428 0035  ld   $35
              1429 004d  ld   $4d
              142a 0043  ld   $43
              142b 0085  ld   $85
              142c 0018  ld   $18
              142d 0004  ld   $04
              142e 0063  ld   $63
              142f 00ff  ld   $ff
              1430 0075  ld   $75
              1431 0011  ld   $11
              1432 00c9  ld   $c9
              1433 007d  ld   $7d
              1434 0099  ld   $99
              1435 00c4  ld   $c4
              1436 002b  ld   $2b
              1437 009e  ld   $9e
              1438 0059  ld   $59
              1439 0000  ld   $00
              143a 00f0  ld   $f0
              143b 009e  ld   $9e
              143c 0011  ld   $11
              143d 00d0  ld   $d0
              143e 007c  ld   $7c
              143f 0099  ld   $99
              1440 00c4  ld   $c4
              1441 0099  ld   $99
              1442 00c4  ld   $c4
              1443 002b  ld   $2b
              1444 009e  ld   $9e
              1445 0059  ld   $59
              1446 0000  ld   $00
              1447 00f3  ld   $f3
              1448 009e  ld   $9e
              1449 0011  ld   $11
              144a 00a0  ld   $a0
              144b 007c  ld   $7c
              144c 0099  ld   $99
              144d 00c4  ld   $c4
              144e 0099  ld   $99
              144f 00c4  ld   $c4
              1450 002b  ld   $2b
              1451 009e  ld   $9e
              1452 0059  ld   $59
              1453 0000  ld   $00
              1454 00f3  ld   $f3
              1455 009e  ld   $9e
              1456 0085  ld   $85
              1457 00a0  ld   $a0
              1458 006c  ld   $6c
              1459 002b  ld   $2b
              145a 00e8  ld   $e8
              145b 0011  ld   $11
              145c 00ff  ld   $ff
              145d 0007  ld   $07
              145e 00f8  ld   $f8
              145f 00e8  ld   $e8
              1460 002b  ld   $2b
              1461 00e8  ld   $e8
              1462 0011  ld   $11
              1463 0000  ld   $00
              1464 00fc  ld   $fc
              1465 0099  ld   $99
              1466 00e8  ld   $e8
              1467 002b  ld   $2b
              1468 009c  ld   $9c
              1469 0011  ld   $11
              146a 00d0  ld   $d0
              146b 007b  ld   $7b
              146c 0099  ld   $99
              146d 00c4  ld   $c4
              146e 0099  ld   $99
              146f 00c4  ld   $c4
              1470 002b  ld   $2b
              1471 009e  ld   $9e
              1472 0021  ld   $21
              1473 009c  ld   $9c
              1474 00f3  ld   $f3
              1475 009e  ld   $9e
              1476 0085  ld   $85
              1477 00a0  ld   $a0
              1478 006c  ld   $6c
              1479 002b  ld   $2b
              147a 00e8  ld   $e8
              147b 0011  ld   $11
              147c 00ff  ld   $ff
              147d 0007  ld   $07
              147e 00f8  ld   $f8
              147f 00e8  ld   $e8
              1480 002b  ld   $2b
              1481 00e8  ld   $e8
              1482 0011  ld   $11
              1483 0000  ld   $00
              1484 00fc  ld   $fc
              1485 0099  ld   $99
              1486 00e8  ld   $e8
              1487 002b  ld   $2b
              1488 009c  ld   $9c
              1489 0011  ld   $11
              148a 00a0  ld   $a0
              148b 007b  ld   $7b
              148c 0099  ld   $99
              148d 00c4  ld   $c4
              148e 0099  ld   $99
              148f 00c4  ld   $c4
              1490 002b  ld   $2b
              1491 009e  ld   $9e
              1492 0021  ld   $21
              1493 009c  ld   $9c
              1494 00f3  ld   $f3
              1495 009e  ld   $9e
              1496 0011  ld   $11
              1497 00d0  ld   $d0
              1498 007b  ld   $7b
              1499 0099  ld   $99
              149a 00c4  ld   $c4
              149b 0099  ld   $99
              149c 00c4  ld   $c4
              149d 00f6  ld   $f6
              149e 0085  ld   $85
              149f 00bc  ld   $bc
              14a0 006c  ld   $6c
              14a1 00e6  ld   $e6
              14a2 00c8  ld   $c8
              14a3 0085  ld   $85
              14a4 00e3  ld   $e3
              14a5 006b  ld   $6b
              14a6 002b  ld   $2b
              14a7 00ea  ld   $ea
              14a8 0011  ld   $11
              14a9 00a0  ld   $a0
              14aa 007b  ld   $7b
              14ab 0099  ld   $99
              14ac 00c4  ld   $c4
              14ad 0099  ld   $99
              14ae 00c4  ld   $c4
              14af 00f6  ld   $f6
              14b0 0085  ld   $85
              14b1 00bc  ld   $bc
              14b2 006c  ld   $6c
              14b3 00e6  ld   $e6
              14b4 00c8  ld   $c8
              14b5 0085  ld   $85
              14b6 00e3  ld   $e3
              14b7 006b  ld   $6b
              14b8 00fa  ld   $fa
              14b9 00ea  ld   $ea
              14ba 0035  ld   $35
              14bb 0072  ld   $72
              14bc 00d5  ld   $d5
              14bd 0085  ld   $85
              14be 006d  ld   $6d
              14bf 0005  ld   $05
              14c0 0063  ld   $63
              14c1 00ff  ld   $ff
              14c2 0075  ld   $75
              14c3 0059  ld   $59
              14c4 0000  ld   $00
              14c5 002b  ld   $2b
              14c6 00c4  ld   $c4
              14c7 0021  ld   $21
              14c8 00c4  ld   $c4
              14c9 002b  ld   $2b
              14ca 00c4  ld   $c4
              14cb 0085  ld   $85
              14cc 0047  ld   $47
              14cd 0005  ld   $05
              14ce 0093  ld   $93
              14cf 00c4  ld   $c4
              14d0 001a  ld   $1a
              14d1 00c4  ld   $c4
              14d2 00e6  ld   $e6
              14d3 0017  ld   $17
              14d4 0035  ld   $35
              14d5 004d  ld   $4d
              14d6 00ef  ld   $ef
              14d7 0085  ld   $85
              14d8 00de  ld   $de
              14d9 0005  ld   $05
              14da 0063  ld   $63
              14db 00ff  ld   $ff
              14dc 0075  ld   $75
              14dd 0059  ld   $59
              14de 0000  ld   $00
              14df 002b  ld   $2b
              14e0 0032  ld   $32
              14e1 0011  ld   $11
              14e2 00ca  ld   $ca
              14e3 0079  ld   $79
              14e4 0099  ld   $99
              14e5 0032  ld   $32
              14e6 0085  ld   $85
              14e7 0000  ld   $00
              14e8 0006  ld   $06
              14e9 0006  ld   $06
              14ea 0000  ld   $00
              14eb 00fe  ld   $fe
              14ec 0099  ld   $99
              14ed 0032  ld   $32
              14ee 00f6  ld   $f6
              14ef 002b  ld   $2b
              14f0 00c4  ld   $c4
              14f1 0059  ld   $59
              14f2 0000  ld   $00
              14f3 002b  ld   $2b
              14f4 00c6  ld   $c6
              14f5 0059  ld   $59
              14f6 0002  ld   $02
              14f7 002b  ld   $2b
              14f8 00c8  ld   $c8
              14f9 0059  ld   $59
              14fa 0002  ld   $02
              14fb fe00  bra  ac          ;+-----------------------------------+
              14fc fcfd  bra  $14fd       ;|                                   |
              14fd 1404  ld   $04,y       ;| Trampoline for page $1400 lookups |
              14fe e068  jmp  y,$68       ;|                                   |
              14ff c218  st   [$18]       ;+-----------------------------------+
              1500 002b  ld   $2b
              1501 00ca  ld   $ca
              1502 0011  ld   $11
              1503 00ee  ld   $ee
              1504 0079  ld   $79
              1505 0099  ld   $99
              1506 0032  ld   $32
              1507 0099  ld   $99
              1508 0032  ld   $32
              1509 00f6  ld   $f6
              150a 002b  ld   $2b
              150b 00cc  ld   $cc
              150c 0011  ld   $11
              150d 00dc  ld   $dc
              150e 0079  ld   $79
              150f 0099  ld   $99
              1510 0032  ld   $32
              1511 0099  ld   $99
              1512 0032  ld   $32
              1513 00f6  ld   $f6
              1514 002b  ld   $2b
              1515 00ce  ld   $ce
              1516 0085  ld   $85
              1517 0079  ld   $79
              1518 0006  ld   $06
              1519 0011  ld   $11
              151a 00ca  ld   $ca
              151b 0079  ld   $79
              151c 0099  ld   $99
              151d 0032  ld   $32
              151e 0099  ld   $99
              151f 0032  ld   $32
              1520 00f6  ld   $f6
              1521 002b  ld   $2b
              1522 00c4  ld   $c4
              1523 0059  ld   $59
              1524 003f  ld   $3f
              1525 002b  ld   $2b
              1526 00c6  ld   $c6
              1527 0059  ld   $59
              1528 0000  ld   $00
              1529 002b  ld   $2b
              152a 00c8  ld   $c8
              152b 0059  ld   $59
              152c 0000  ld   $00
              152d 002b  ld   $2b
              152e 00ca  ld   $ca
              152f 0011  ld   $11
              1530 00ee  ld   $ee
              1531 0079  ld   $79
              1532 0099  ld   $99
              1533 0032  ld   $32
              1534 0099  ld   $99
              1535 0032  ld   $32
              1536 00f6  ld   $f6
              1537 002b  ld   $2b
              1538 00cc  ld   $cc
              1539 0011  ld   $11
              153a 00dc  ld   $dc
              153b 0079  ld   $79
              153c 0099  ld   $99
              153d 0032  ld   $32
              153e 0099  ld   $99
              153f 0032  ld   $32
              1540 00f6  ld   $f6
              1541 002b  ld   $2b
              1542 00ce  ld   $ce
              1543 0085  ld   $85
              1544 0079  ld   $79
              1545 0006  ld   $06
              1546 0093  ld   $93
              1547 0032  ld   $32
              1548 001a  ld   $1a
              1549 0032  ld   $32
              154a 00e6  ld   $e6
              154b 0008  ld   $08
              154c 0035  ld   $35
              154d 004d  ld   $4d
              154e 005f  ld   $5f
              154f 0085  ld   $85
              1550 00f8  ld   $f8
              1551 0005  ld   $05
              1552 0011  ld   $11
              1553 0010  ld   $10
              1554 003f  ld   $3f
              1555 002b  ld   $2b
              1556 00a2  ld   $a2
              1557 0059  ld   $59
              1558 0038  ld   $38
              1559 005e  ld   $5e
              155a 00a4  ld   $a4
              155b 0059  ld   $59
              155c 0012  ld   $12
              155d 005e  ld   $5e
              155e 00a5  ld   $a5
              155f 0085  ld   $85
              1560 00db  ld   $db
              1561 006e  ld   $6e
              1562 0011  ld   $11
              1563 00b7  ld   $b7
              1564 0079  ld   $79
              1565 0085  ld   $85
              1566 00bc  ld   $bc
              1567 006d  ld   $6d
              1568 0063  ld   $63
              1569 00ff  ld   $ff
              156a 0075  ld   $75
              156b 0021  ld   $21
              156c 00c6  ld   $c6
              156d 005e  ld   $5e
              156e 00a3  ld   $a3
              156f 0021  ld   $21
              1570 00ca  ld   $ca
              1571 002b  ld   $2b
              1572 00d2  ld   $d2
              1573 0021  ld   $21
              1574 00ca  ld   $ca
              1575 00e3  ld   $e3
              1576 0001  ld   $01
              1577 002b  ld   $2b
              1578 00d8  ld   $d8
              1579 0059  ld   $59
              157a 0001  ld   $01
              157b 002b  ld   $2b
              157c 00da  ld   $da
              157d 0021  ld   $21
              157e 00c8  ld   $c8
              157f 002b  ld   $2b
              1580 00d0  ld   $d0
              1581 0021  ld   $21
              1582 00c8  ld   $c8
              1583 00e3  ld   $e3
              1584 0001  ld   $01
              1585 002b  ld   $2b
              1586 00dc  ld   $dc
              1587 0059  ld   $59
              1588 0001  ld   $01
              1589 002b  ld   $2b
              158a 00de  ld   $de
              158b 0059  ld   $59
              158c 000c  ld   $0c
              158d 0099  ld   $99
              158e 00cc  ld   $cc
              158f 0099  ld   $99
              1590 00d0  ld   $d0
              1591 005e  ld   $5e
              1592 00a4  ld   $a4
              1593 0059  ld   $59
              1594 0013  ld   $13
              1595 0099  ld   $99
              1596 00ce  ld   $ce
              1597 0099  ld   $99
              1598 00d2  ld   $d2
              1599 005e  ld   $5e
              159a 00a5  ld   $a5
              159b 0085  ld   $85
              159c 00db  ld   $db
              159d 006e  ld   $6e
              159e 0021  ld   $21
              159f 00c4  ld   $c4
              15a0 002b  ld   $2b
              15a1 0090  ld   $90
              15a2 0085  ld   $85
              15a3 00be  ld   $be
              15a4 0075  ld   $75
              15a5 0021  ld   $21
              15a6 00d0  ld   $d0
              15a7 0099  ld   $99
              15a8 00de  ld   $de
              15a9 002b  ld   $2b
              15aa 00d0  ld   $d0
              15ab 00b8  ld   $b8
              15ac 00dc  ld   $dc
              15ad 0035  ld   $35
              15ae 004d  ld   $4d
              15af 00c0  ld   $c0
              15b0 0085  ld   $85
              15b1 009a  ld   $9a
              15b2 0006  ld   $06
              15b3 0021  ld   $21
              15b4 00d2  ld   $d2
              15b5 0099  ld   $99
              15b6 00da  ld   $da
              15b7 002b  ld   $2b
              15b8 00d2  ld   $d2
              15b9 00b8  ld   $b8
              15ba 00d8  ld   $d8
              15bb 0035  ld   $35
              15bc 004d  ld   $4d
              15bd 00ce  ld   $ce
              15be 0085  ld   $85
              15bf 008c  ld   $8c
              15c0 0006  ld   $06
              15c1 0063  ld   $63
              15c2 00ff  ld   $ff
              15c3 0075  ld   $75
              15c4 0085  ld   $85
              15c5 00cd  ld   $cd
              15c6 0071  ld   $71
              15c7 0011  ld   $11
              15c8 00d8  ld   $d8
              15c9 007e  ld   $7e
              15ca 0099  ld   $99
              15cb 0036  ld   $36
              15cc 0099  ld   $99
              15cd 0036  ld   $36
              15ce 00f6  ld   $f6
              15cf 002b  ld   $2b
              15d0 0024  ld   $24
              15d1 0011  ld   $11
              15d2 0000  ld   $00
              15d3 0002  ld   $02
              15d4 0085  ld   $85
              15d5 00a0  ld   $a0
              15d6 006d  ld   $6d
              15d7 0063  ld   $63
              15d8 00ff  ld   $ff
              15d9 0075  ld   $75
              15da 0011  ld   $11
              15db 00ff  ld   $ff
              15dc 007f  ld   $7f
              15dd 002b  ld   $2b
              15de 0082  ld   $82
              15df 0059  ld   $59
              15e0 00ff  ld   $ff
              15e1 00f0  ld   $f0
              15e2 0082  ld   $82
              15e3 0011  ld   $11
              15e4 00ff  ld   $ff
              15e5 00ff  ld   $ff
              15e6 002b  ld   $2b
              15e7 0082  ld   $82
              15e8 0059  ld   $59
              15e9 0000  ld   $00
              15ea 00f0  ld   $f0
              15eb 0082  ld   $82
              15ec 0085  ld   $85
              15ed 00a0  ld   $a0
              15ee 0008  ld   $08
              15ef 0008  ld   $08
              15f0 00a0  ld   $a0
              15f1 0060  ld   $60
              15f2 0011  ld   $11
              15f3 00ff  ld   $ff
              15f4 007f  ld   $7f
              15f5 00ad  ld   $ad
              15f6 008c  ld   $8c
              15f7 00ff  ld   $ff
              15f8 0085  ld   $85
              15f9 00a0  ld   $a0
              15fa 0079  ld   $79
              15fb fe00  bra  ac          ;+-----------------------------------+
              15fc fcfd  bra  $15fd       ;|                                   |
              15fd 1404  ld   $04,y       ;| Trampoline for page $1500 lookups |
              15fe e068  jmp  y,$68       ;|                                   |
              15ff c218  st   [$18]       ;+-----------------------------------+
              1600 0035  ld   $35
              1601 0072  ld   $72
              1602 00ad  ld   $ad
              1603 0085  ld   $85
              1604 00b8  ld   $b8
              1605 0008  ld   $08
              1606 0011  ld   $11
              1607 00a1  ld   $a1
              1608 007d  ld   $7d
              1609 0085  ld   $85
              160a 00bc  ld   $bc
              160b 006d  ld   $6d
              160c 0085  ld   $85
              160d 00be  ld   $be
              160e 0008  ld   $08
              160f 0011  ld   $11
              1610 00a1  ld   $a1
              1611 007a  ld   $7a
              1612 0085  ld   $85
              1613 00bc  ld   $bc
              1614 006d  ld   $6d
              1615 0063  ld   $63
              1616 00ff  ld   $ff
              1617 0075  ld   $75
              1618 0059  ld   $59
              1619 0002  ld   $02
              161a 005e  ld   $5e
              161b 0087  ld   $87
              161c 0085  ld   $85
              161d 00af  ld   $af
              161e 006f  ld   $6f
              161f 0063  ld   $63
              1620 00ff  ld   $ff
              1621 0075  ld   $75
              1622 0059  ld   $59
              1623 0001  ld   $01
              1624 005e  ld   $5e
              1625 0093  ld   $93
              1626 0011  ld   $11
              1627 0008  ld   $08
              1628 0020  ld   $20
              1629 002b  ld   $2b
              162a 0094  ld   $94
              162b 0085  ld   $85
              162c 00a8  ld   $a8
              162d 006d  ld   $6d
              162e 0059  ld   $59
              162f 0002  ld   $02
              1630 005e  ld   $5e
              1631 002c  ld   $2c
              1632 0059  ld   $59
              1633 00ef  ld   $ef
              1634 005e  ld   $5e
              1635 0011  ld   $11
              1636 0063  ld   $63
              1637 00ff  ld   $ff
              1638 0075  ld   $75
              1639 0085  ld   $85
              163a 00ca  ld   $ca
              163b 0008  ld   $08
              163c 0085  ld   $85
              163d 00d2  ld   $d2
              163e 0006  ld   $06
              163f 0063  ld   $63
              1640 00ff  ld   $ff
              1641 0075  ld   $75
              1642 0085  ld   $85
              1643 00ca  ld   $ca
              1644 0008  ld   $08
              1645 0059  ld   $59
              1646 00ef  ld   $ef
              1647 005e  ld   $5e
              1648 0011  ld   $11
              1649 0063  ld   $63
              164a 00ff  ld   $ff
              164b 0075  ld   $75
              164c 0021  ld   $21
              164d 0034  ld   $34
              164e 005e  ld   $5e
              164f 00a4  ld   $a4
              1650 0021  ld   $21
              1651 0030  ld   $30
              1652 005e  ld   $5e
              1653 00a5  ld   $a5
              1654 0085  ld   $85
              1655 00a0  ld   $a0
              1656 0009  ld   $09
              1657 0009  ld   $09
              1658 00a0  ld   $a0
              1659 005f  ld   $5f
              165a 0085  ld   $85
              165b 00db  ld   $db
              165c 006e  ld   $6e
              165d 0059  ld   $59
              165e 0020  ld   $20
              165f 0085  ld   $85
              1660 00d1  ld   $d1
              1661 006c  ld   $6c
              1662 0021  ld   $21
              1663 0034  ld   $34
              1664 008c  ld   $8c
              1665 0054  ld   $54
              1666 0085  ld   $85
              1667 00a0  ld   $a0
              1668 0079  ld   $79
              1669 0035  ld   $35
              166a 0072  ld   $72
              166b 00b3  ld   $b3
              166c 0085  ld   $85
              166d 00b7  ld   $b7
              166e 0009  ld   $09
              166f 0063  ld   $63
              1670 00ff  ld   $ff
              1671 0059  ld   $59
              1672 0054  ld   $54
              1673 002b  ld   $2b
              1674 0034  ld   $34
              1675 0085  ld   $85
              1676 00ca  ld   $ca
              1677 0008  ld   $08
              1678 0021  ld   $21
              1679 0036  ld   $36
              167a 00e3  ld   $e3
              167b 0005  ld   $05
              167c 002b  ld   $2b
              167d 0036  ld   $36
              167e 0063  ld   $63
              167f 00ff  ld   $ff
              1680 0075  ld   $75
              1681 0021  ld   $21
              1682 0034  ld   $34
              1683 005e  ld   $5e
              1684 00a4  ld   $a4
              1685 0021  ld   $21
              1686 0030  ld   $30
              1687 005e  ld   $5e
              1688 00a5  ld   $a5
              1689 0085  ld   $85
              168a 00db  ld   $db
              168b 006e  ld   $6e
              168c 0059  ld   $59
              168d 0020  ld   $20
              168e 0085  ld   $85
              168f 00d1  ld   $d1
              1690 006c  ld   $6c
              1691 0021  ld   $21
              1692 0034  ld   $34
              1693 008c  ld   $8c
              1694 000a  ld   $0a
              1695 0085  ld   $85
              1696 00a0  ld   $a0
              1697 0079  ld   $79
              1698 0035  ld   $35
              1699 0072  ld   $72
              169a 00e2  ld   $e2
              169b 0085  ld   $85
              169c 00e6  ld   $e6
              169d 0009  ld   $09
              169e 0063  ld   $63
              169f 00ff  ld   $ff
              16a0 0059  ld   $59
              16a1 000a  ld   $0a
              16a2 002b  ld   $2b
              16a3 0034  ld   $34
              16a4 0085  ld   $85
              16a5 00ca  ld   $ca
              16a6 0008  ld   $08
              16a7 0021  ld   $21
              16a8 0036  ld   $36
              16a9 00e6  ld   $e6
              16aa 0005  ld   $05
              16ab 002b  ld   $2b
              16ac 0036  ld   $36
              16ad 0063  ld   $63
              16ae 00ff  ld   $ff
              16af 0075  ld   $75
              16b0 0021  ld   $21
              16b1 0034  ld   $34
              16b2 005e  ld   $5e
              16b3 00a4  ld   $a4
              16b4 0021  ld   $21
              16b5 0030  ld   $30
              16b6 0085  ld   $85
              16b7 00a0  ld   $a0
              16b8 000a  ld   $0a
              16b9 000a  ld   $0a
              16ba 00a0  ld   $a0
              16bb 005d  ld   $5d
              16bc 005e  ld   $5e
              16bd 00a5  ld   $a5
              16be 0085  ld   $85
              16bf 00db  ld   $db
              16c0 006e  ld   $6e
              16c1 0059  ld   $59
              16c2 0020  ld   $20
              16c3 0085  ld   $85
              16c4 00d1  ld   $d1
              16c5 006c  ld   $6c
              16c6 0021  ld   $21
              16c7 0030  ld   $30
              16c8 00e3  ld   $e3
              16c9 0009  ld   $09
              16ca 002b  ld   $2b
              16cb 0030  ld   $30
              16cc 0021  ld   $21
              16cd 0030  ld   $30
              16ce 00e6  ld   $e6
              16cf 0046  ld   $46
              16d0 0085  ld   $85
              16d1 00e3  ld   $e3
              16d2 006b  ld   $6b
              16d3 0035  ld   $35
              16d4 0072  ld   $72
              16d5 00bb  ld   $bb
              16d6 0085  ld   $85
              16d7 00c3  ld   $c3
              16d8 000a  ld   $0a
              16d9 0059  ld   $59
              16da 0046  ld   $46
              16db 002b  ld   $2b
              16dc 0030  ld   $30
              16dd 0063  ld   $63
              16de 00ff  ld   $ff
              16df 0085  ld   $85
              16e0 00ca  ld   $ca
              16e1 0008  ld   $08
              16e2 0021  ld   $21
              16e3 0036  ld   $36
              16e4 00e3  ld   $e3
              16e5 0001  ld   $01
              16e6 002b  ld   $2b
              16e7 0036  ld   $36
              16e8 0021  ld   $21
              16e9 0034  ld   $34
              16ea 008c  ld   $8c
              16eb 000a  ld   $0a
              16ec 0085  ld   $85
              16ed 00a0  ld   $a0
              16ee 0079  ld   $79
              16ef 002b  ld   $2b
              16f0 00e8  ld   $e8
              16f1 0021  ld   $21
              16f2 0036  ld   $36
              16f3 00e6  ld   $e6
              16f4 0004  ld   $04
              16f5 0085  ld   $85
              16f6 00e3  ld   $e3
              16f7 006b  ld   $6b
              16f8 00f8  ld   $f8
              16f9 00e8  ld   $e8
              16fa 0035  ld   $35
              16fb fe00  bra  ac          ;+-----------------------------------+
              16fc fcfd  bra  $16fd       ;|                                   |
              16fd 1404  ld   $04,y       ;| Trampoline for page $1600 lookups |
              16fe e068  jmp  y,$68       ;|                                   |
              16ff c218  st   [$18]       ;+-----------------------------------+
              1700 0072  ld   $72
              1701 00e2  ld   $e2
              1702 0085  ld   $85
              1703 00e8  ld   $e8
              1704 000a  ld   $0a
              1705 0059  ld   $59
              1706 0004  ld   $04
              1707 002b  ld   $2b
              1708 0036  ld   $36
              1709 0021  ld   $21
              170a 0034  ld   $34
              170b 008c  ld   $8c
              170c 0054  ld   $54
              170d 0085  ld   $85
              170e 00a0  ld   $a0
              170f 0079  ld   $79
              1710 002b  ld   $2b
              1711 00e8  ld   $e8
              1712 0021  ld   $21
              1713 0036  ld   $36
              1714 00e6  ld   $e6
              1715 0009  ld   $09
              1716 0085  ld   $85
              1717 00e3  ld   $e3
              1718 006b  ld   $6b
              1719 00f8  ld   $f8
              171a 00e8  ld   $e8
              171b 0085  ld   $85
              171c 00a0  ld   $a0
              171d 000b  ld   $0b
              171e 000b  ld   $0b
              171f 00a0  ld   $a0
              1720 0060  ld   $60
              1721 0035  ld   $35
              1722 0072  ld   $72
              1723 00a4  ld   $a4
              1724 0085  ld   $85
              1725 00aa  ld   $aa
              1726 000b  ld   $0b
              1727 0059  ld   $59
              1728 0009  ld   $09
              1729 002b  ld   $2b
              172a 0036  ld   $36
              172b 0063  ld   $63
              172c 00ff  ld   $ff
              172d 0075  ld   $75
              172e 0021  ld   $21
              172f 0034  ld   $34
              1730 005e  ld   $5e
              1731 00a4  ld   $a4
              1732 0021  ld   $21
              1733 0030  ld   $30
              1734 005e  ld   $5e
              1735 00a5  ld   $a5
              1736 0085  ld   $85
              1737 00db  ld   $db
              1738 006e  ld   $6e
              1739 0059  ld   $59
              173a 0020  ld   $20
              173b 0085  ld   $85
              173c 00d1  ld   $d1
              173d 006c  ld   $6c
              173e 0021  ld   $21
              173f 0030  ld   $30
              1740 00e6  ld   $e6
              1741 0009  ld   $09
              1742 002b  ld   $2b
              1743 0030  ld   $30
              1744 0021  ld   $21
              1745 0030  ld   $30
              1746 00e6  ld   $e6
              1747 0022  ld   $22
              1748 0085  ld   $85
              1749 00ec  ld   $ec
              174a 006b  ld   $6b
              174b 0035  ld   $35
              174c 0072  ld   $72
              174d 00ce  ld   $ce
              174e 0085  ld   $85
              174f 00d6  ld   $d6
              1750 000b  ld   $0b
              1751 0059  ld   $59
              1752 0022  ld   $22
              1753 002b  ld   $2b
              1754 0030  ld   $30
              1755 0063  ld   $63
              1756 00ff  ld   $ff
              1757 0085  ld   $85
              1758 00ca  ld   $ca
              1759 0008  ld   $08
              175a 0021  ld   $21
              175b 0036  ld   $36
              175c 00e6  ld   $e6
              175d 0001  ld   $01
              175e 002b  ld   $2b
              175f 0036  ld   $36
              1760 0021  ld   $21
              1761 0034  ld   $34
              1762 008c  ld   $8c
              1763 000a  ld   $0a
              1764 0085  ld   $85
              1765 00a0  ld   $a0
              1766 0079  ld   $79
              1767 002b  ld   $2b
              1768 00e8  ld   $e8
              1769 0021  ld   $21
              176a 0036  ld   $36
              176b 0085  ld   $85
              176c 00ec  ld   $ec
              176d 006b  ld   $6b
              176e 00f8  ld   $f8
              176f 00e8  ld   $e8
              1770 0035  ld   $35
              1771 0072  ld   $72
              1772 00f3  ld   $f3
              1773 0085  ld   $85
              1774 00f9  ld   $f9
              1775 000b  ld   $0b
              1776 0059  ld   $59
              1777 0000  ld   $00
              1778 002b  ld   $2b
              1779 0036  ld   $36
              177a 0021  ld   $21
              177b 0034  ld   $34
              177c 008c  ld   $8c
              177d 0054  ld   $54
              177e 0085  ld   $85
              177f 00a0  ld   $a0
              1780 000c  ld   $0c
              1781 000c  ld   $0c
              1782 00a0  ld   $a0
              1783 001c  ld   $1c
              1784 0085  ld   $85
              1785 00a0  ld   $a0
              1786 0079  ld   $79
              1787 002b  ld   $2b
              1788 00e8  ld   $e8
              1789 0021  ld   $21
              178a 0036  ld   $36
              178b 00e6  ld   $e6
              178c 0005  ld   $05
              178d 0085  ld   $85
              178e 00ec  ld   $ec
              178f 006b  ld   $6b
              1790 00f8  ld   $f8
              1791 00e8  ld   $e8
              1792 0035  ld   $35
              1793 0072  ld   $72
              1794 00b2  ld   $b2
              1795 0085  ld   $85
              1796 00b8  ld   $b8
              1797 000c  ld   $0c
              1798 0059  ld   $59
              1799 0005  ld   $05
              179a 002b  ld   $2b
              179b 0036  ld   $36
              179c 0063  ld   $63
              179d 00ff  ld   $ff
              179e 00b4  ld   $b4
              179f 0080  ld   $80
              17a0 006b  ld   $6b
              17a1 00dd  ld   $dd
              17a2 0022  ld   $22
              17a3 0075  ld   $75
              17a4 0085  ld   $85
              17a5 00af  ld   $af
              17a6 006f  ld   $6f
              17a7 0063  ld   $63
              17a8 00ff  ld   $ff
              17a9 0035  ld   $35
              17aa 004d  ld   $4d
              17ab 00e7  ld   $e7
              17ac 0059  ld   $59
              17ad 0000  ld   $00
              17ae 00ff  ld   $ff
              17af 0059  ld   $59
              17b0 0001  ld   $01
              17b1 00ff  ld   $ff
              17b2 0035  ld   $35
              17b3 0050  ld   $50
              17b4 00f0  ld   $f0
              17b5 0059  ld   $59
              17b6 0000  ld   $00
              17b7 00ff  ld   $ff
              17b8 0059  ld   $59
              17b9 0001  ld   $01
              17ba 00ff  ld   $ff
              17bb 0011  ld   $11
              17bc 00e4  ld   $e4
              17bd 0075  ld   $75
              17be 002b  ld   $2b
              17bf 0090  ld   $90
              17c0 001a  ld   $1a
              17c1 009e  ld   $9e
              17c2 00f0  ld   $f0
              17c3 0090  ld   $90
              17c4 00ff  ld   $ff
              17c5 006c  ld   $6c
              17c6 00a0  ld   $a0
              17c7 004a  ld   $4a
              17c8 0011  ld   $11
              17c9 00a7  ld   $a7
              17ca 0004  ld   $04
              17cb 002b  ld   $2b
              17cc 0022  ld   $22
              17cd 00b4  ld   $b4
              17ce 00fd  ld   $fd
              17cf 00ff  ld   $ff
              17d0 0011  ld   $11
              17d1 00d3  ld   $d3
              17d2 0075  ld   $75
              17d3 002b  ld   $2b
              17d4 0090  ld   $90
              17d5 0021  ld   $21
              17d6 009e  ld   $9e
              17d7 00f0  ld   $f0
              17d8 0090  ld   $90
              17d9 00ff  ld   $ff
              17da 0011  ld   $11
              17db 0000  ld   $00
              17dc 000b  ld   $0b
              17dd 002b  ld   $2b
              17de 0022  ld   $22
              17df 0021  ld   $21
              17e0 0082  ld   $82
              17e1 00b4  ld   $b4
              17e2 00e6  ld   $e6
              17e3 00ff  ld   $ff
              17e4 0035  ld   $35
              17e5 0053  ld   $53
              17e6 00c3  ld   $c3
              17e7 002b  ld   $2b
              17e8 0092  ld   $92
              17e9 0059  ld   $59
              17ea 0000  ld   $00
              17eb 00b8  ld   $b8
              17ec 0092  ld   $92
              17ed 00ff  ld   $ff
              17ee 0059  ld   $59
              17ef 0002  ld   $02
              17f0 002b  ld   $2b
              17f1 00a4  ld   $a4
              17f2 001a  ld   $1a
              17f3 00aa  ld   $aa
              17f4 0082  ld   $82
              17f5 00fb  ld   $fb
              17f6 005e  ld   $5e
              17f7 00aa  ld   $aa
              17f8 00ff  ld   $ff
              17f9 0075  ld   $75
              17fa 005e  ld   $5e
              17fb fe00  bra  ac          ;+-----------------------------------+
              17fc fcfd  bra  $17fd       ;|                                   |
              17fd 1404  ld   $04,y       ;| Trampoline for page $1700 lookups |
              17fe e068  jmp  y,$68       ;|                                   |
              17ff c218  st   [$18]       ;+-----------------------------------+
              1800 0092  ld   $92
              1801 0085  ld   $85
              1802 00d1  ld   $d1
              1803 006d  ld   $6d
              1804 001a  ld   $1a
              1805 0092  ld   $92
              1806 0085  ld   $85
              1807 00b3  ld   $b3
              1808 0074  ld   $74
              1809 0063  ld   $63
              180a 00ff  ld   $ff
              180b 001a  ld   $1a
              180c 000e  ld   $0e
              180d 00fc  ld   $fc
              180e 00d6  ld   $d6
              180f 0035  ld   $35
              1810 003f  ld   $3f
              1811 00dc  ld   $dc
              1812 001a  ld   $1a
              1813 000e  ld   $0e
              1814 002b  ld   $2b
              1815 00d6  ld   $d6
              1816 00ff  ld   $ff
              1817 006c  ld   $6c
              1818 00ee  ld   $ee
              1819 0011  ld   $11
              181a 001a  ld   $1a
              181b 0096  ld   $96
              181c 0082  ld   $82
              181d 0003  ld   $03
              181e 00e3  ld   $e3
              181f 0001  ld   $01
              1820 005e  ld   $5e
              1821 0099  ld   $99
              1822 0059  ld   $59
              1823 00fc  ld   $fc
              1824 005e  ld   $5e
              1825 0098  ld   $98
              1826 0021  ld   $21
              1827 0094  ld   $94
              1828 00f3  ld   $f3
              1829 0098  ld   $98
              182a 00ff  ld   $ff
              182b 006d  ld   $6d
              182c 00a0  ld   $a0
              182d 005f  ld   $5f
              182e 002b  ld   $2b
              182f 001a  ld   $1a
              1830 0059  ld   $59
              1831 00ad  ld   $ad
              1832 002b  ld   $2b
              1833 0022  ld   $22
              1834 00b4  ld   $b4
              1835 00e2  ld   $e2
              1836 0011  ld   $11
              1837 0000  ld   $00
              1838 0006  ld   $06
              1839 002b  ld   $2b
              183a 0022  ld   $22
              183b 0059  ld   $59
              183c 00fc  ld   $fc
              183d 005e  ld   $5e
              183e 0092  ld   $92
              183f 001a  ld   $1a
              1840 0094  ld   $94
              1841 00b4  ld   $b4
              1842 00f6  ld   $f6
              1843 005e  ld   $5e
              1844 0094  ld   $94
              1845 0021  ld   $21
              1846 0094  ld   $94
              1847 00f3  ld   $f3
              1848 0092  ld   $92
              1849 00ff  ld   $ff
              184a 0075  ld   $75
              184b 002b  ld   $2b
              184c 0082  ld   $82
              184d 0085  ld   $85
              184e 00d1  ld   $d1
              184f 006d  ld   $6d
              1850 0093  ld   $93
              1851 0082  ld   $82
              1852 0021  ld   $21
              1853 0082  ld   $82
              1854 00ad  ld   $ad
              1855 0035  ld   $35
              1856 003f  ld   $3f
              1857 00cd  ld   $cd
              1858 0085  ld   $85
              1859 00b3  ld   $b3
              185a 0074  ld   $74
              185b 0090  ld   $90
              185c 00c0  ld   $c0
              185d 0063  ld   $63
              185e 00ff  ld   $ff
              185f 0011  ld   $11
              1860 00e1  ld   $e1
              1861 0004  ld   $04
              1862 002b  ld   $2b
              1863 0022  ld   $22
              1864 0021  ld   $21
              1865 00a2  ld   $a2
              1866 002b  ld   $2b
              1867 0024  ld   $24
              1868 001a  ld   $1a
              1869 00a5  ld   $a5
              186a 00e9  ld   $e9
              186b 0093  ld   $93
              186c 0019  ld   $19
              186d 00ad  ld   $ad
              186e 005e  ld   $5e
              186f 0029  ld   $29
              1870 001a  ld   $1a
              1871 00a4  ld   $a4
              1872 005e  ld   $5e
              1873 0028  ld   $28
              1874 00ff  ld   $ff
              1875 001a  ld   $1a
              1876 00a4  ld   $a4
              1877 00e3  ld   $e3
              1878 0006  ld   $06
              1879 005e  ld   $5e
              187a 00a4  ld   $a4
              187b 00e6  ld   $e6
              187c 009a  ld   $9a
              187d 0035  ld   $35
              187e 0056  ld   $56
              187f 00fc  ld   $fc
              1880 001a  ld   $1a
              1881 00aa  ld   $aa
              1882 0082  ld   $82
              1883 0008  ld   $08
              1884 0035  ld   $35
              1885 0072  ld   $72
              1886 00fc  ld   $fc
              1887 0075  ld   $75
              1888 0085  ld   $85
              1889 00a1  ld   $a1
              188a 0078  ld   $78
              188b 0063  ld   $63
              188c 00ff  ld   $ff
              188d 006e  ld   $6e
              188e 00a0  ld   $a0
              188f 005f  ld   $5f
              1890 0011  ld   $11
              1891 00ea  ld   $ea
              1892 0008  ld   $08
              1893 002b  ld   $2b
              1894 0098  ld   $98
              1895 001a  ld   $1a
              1896 0094  ld   $94
              1897 00e9  ld   $e9
              1898 0099  ld   $99
              1899 0098  ld   $98
              189a 002b  ld   $2b
              189b 0098  ld   $98
              189c 007f  ld   $7f
              189d 0000  ld   $00
              189e 005e  ld   $5e
              189f 0094  ld   $94
              18a0 0021  ld   $21
              18a1 0098  ld   $98
              18a2 007f  ld   $7f
              18a3 0001  ld   $01
              18a4 005e  ld   $5e
              18a5 0095  ld   $95
              18a6 0021  ld   $21
              18a7 0094  ld   $94
              18a8 00ff  ld   $ff
              18a9 0075  ld   $75
              18aa 0021  ld   $21
              18ab 0092  ld   $92
              18ac 00b8  ld   $b8
              18ad 0084  ld   $84
              18ae 0035  ld   $35
              18af 0053  ld   $53
              18b0 00cb  ld   $cb
              18b1 0021  ld   $21
              18b2 0092  ld   $92
              18b3 002b  ld   $2b
              18b4 00a0  ld   $a0
              18b5 0021  ld   $21
              18b6 0084  ld   $84
              18b7 002b  ld   $2b
              18b8 0092  ld   $92
              18b9 0021  ld   $21
              18ba 00a0  ld   $a0
              18bb 002b  ld   $2b
              18bc 0084  ld   $84
              18bd 0085  ld   $85
              18be 00a5  ld   $a5
              18bf 0070  ld   $70
              18c0 0093  ld   $93
              18c1 0084  ld   $84
              18c2 0021  ld   $21
              18c3 0084  ld   $84
              18c4 00b8  ld   $b8
              18c5 0092  ld   $92
              18c6 0035  ld   $35
              18c7 0056  ld   $56
              18c8 00cb  ld   $cb
              18c9 0063  ld   $63
              18ca 00ff  ld   $ff
              18cb 001a  ld   $1a
              18cc 00a4  ld   $a4
              18cd 00e6  ld   $e6
              18ce 009a  ld   $9a
              18cf 0035  ld   $35
              18d0 0056  ld   $56
              18d1 00e4  ld   $e4
              18d2 0059  ld   $59
              18d3 0000  ld   $00
              18d4 005e  ld   $5e
              18d5 00a4  ld   $a4
              18d6 001a  ld   $1a
              18d7 00a5  ld   $a5
              18d8 00e6  ld   $e6
              18d9 0070  ld   $70
              18da 0035  ld   $35
              18db 0050  ld   $50
              18dc 00f6  ld   $f6
              18dd 0059  ld   $59
              18de 0070  ld   $70
              18df 005e  ld   $5e
              18e0 00a5  ld   $a5
              18e1 001a  ld   $1a
              18e2 00aa  ld   $aa
              18e3 0088  ld   $88
              18e4 0004  ld   $04
              18e5 005e  ld   $5e
              18e6 00aa  ld   $aa
              18e7 00ff  ld   $ff
              18e8 001a  ld   $1a
              18e9 00aa  ld   $aa
              18ea 0082  ld   $82
              18eb 00fb  ld   $fb
              18ec 005e  ld   $5e
              18ed 00aa  ld   $aa
              18ee 00ff  ld   $ff
              18ef 006f  ld   $6f
              18f0 00a0  ld   $a0
              18f1 005f  ld   $5f
              18f2 0075  ld   $75
              18f3 0085  ld   $85
              18f4 00c6  ld   $c6
              18f5 006c  ld   $6c
              18f6 0011  ld   $11
              18f7 0003  ld   $03
              18f8 000b  ld   $0b
              18f9 002b  ld   $2b
              18fa 0022  ld   $22
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e068  jmp  y,$68       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 001a  ld   $1a
              1901 00a2  ld   $a2
              1902 005e  ld   $5e
              1903 0025  ld   $25
              1904 0063  ld   $63
              1905 00ff  ld   $ff
              1906 0059  ld   $59
              1907 0001  ld   $01
              1908 005e  ld   $5e
              1909 0085  ld   $85
              190a 0059  ld   $59
              190b 0000  ld   $00
              190c 005e  ld   $5e
              190d 0086  ld   $86
              190e 0059  ld   $59
              190f 00fa  ld   $fa
              1910 005e  ld   $5e
              1911 0084  ld   $84
              1912 0021  ld   $21
              1913 0086  ld   $86
              1914 00f3  ld   $f3
              1915 0084  ld   $84
              1916 0093  ld   $93
              1917 0084  ld   $84
              1918 0093  ld   $93
              1919 0084  ld   $84
              191a 0059  ld   $59
              191b 0000  ld   $00
              191c 00f3  ld   $f3
              191d 0084  ld   $84
              191e 0093  ld   $93
              191f 0084  ld   $84
              1920 0093  ld   $93
              1921 0084  ld   $84
              1922 00f3  ld   $f3
              1923 0084  ld   $84
              1924 0093  ld   $93
              1925 0085  ld   $85
              1926 001a  ld   $1a
              1927 0085  ld   $85
              1928 00e6  ld   $e6
              1929 0004  ld   $04
              192a 0035  ld   $35
              192b 0056  ld   $56
              192c 00b5  ld   $b5
              192d 00ff  ld   $ff
              192e 001a  ld   $1a
              192f 00a3  ld   $a3
              1930 00f0  ld   $f0
              1931 0096  ld   $96
              1932 0021  ld   $21
              1933 0098  ld   $98
              1934 0099  ld   $99
              1935 0088  ld   $88
              1936 002b  ld   $2b
              1937 0098  ld   $98
              1938 0035  ld   $35
              1939 0056  ld   $56
              193a 00ec  ld   $ec
              193b 00b8  ld   $b8
              193c 0086  ld   $86
              193d 002b  ld   $2b
              193e 0098  ld   $98
              193f 0021  ld   $21
              1940 0096  ld   $96
              1941 0099  ld   $99
              1942 0094  ld   $94
              1943 002b  ld   $2b
              1944 0096  ld   $96
              1945 0021  ld   $21
              1946 0096  ld   $96
              1947 0099  ld   $99
              1948 0092  ld   $92
              1949 002b  ld   $2b
              194a 0096  ld   $96
              194b 0021  ld   $21
              194c 009a  ld   $9a
              194d 00e3  ld   $e3
              194e 0001  ld   $01
              194f 002b  ld   $2b
              1950 009a  ld   $9a
              1951 0035  ld   $35
              1952 0056  ld   $56
              1953 00d5  ld   $d5
              1954 0063  ld   $63
              1955 00ff  ld   $ff
              1956 0070  ld   $70
              1957 00a5  ld   $a5
              1958 005a  ld   $5a
              1959 001a  ld   $1a
              195a 0082  ld   $82
              195b 005e  ld   $5e
              195c 0026  ld   $26
              195d 001a  ld   $1a
              195e 0086  ld   $86
              195f 00b8  ld   $b8
              1960 0082  ld   $82
              1961 0035  ld   $35
              1962 0053  ld   $53
              1963 00b6  ld   $b6
              1964 001a  ld   $1a
              1965 0086  ld   $86
              1966 005e  ld   $5e
              1967 0026  ld   $26
              1968 001a  ld   $1a
              1969 0082  ld   $82
              196a 00b8  ld   $b8
              196b 0086  ld   $86
              196c 00e3  ld   $e3
              196d 0001  ld   $01
              196e 005e  ld   $5e
              196f 0024  ld   $24
              1970 001a  ld   $1a
              1971 00a3  ld   $a3
              1972 005e  ld   $5e
              1973 0025  ld   $25
              1974 001a  ld   $1a
              1975 0084  ld   $84
              1976 00e3  ld   $e3
              1977 0008  ld   $08
              1978 005e  ld   $5e
              1979 0027  ld   $27
              197a 0011  ld   $11
              197b 0003  ld   $03
              197c 000b  ld   $0b
              197d 002b  ld   $2b
              197e 0022  ld   $22
              197f 00b4  ld   $b4
              1980 00f3  ld   $f3
              1981 00ff  ld   $ff
              1982 0075  ld   $75
              1983 0059  ld   $59
              1984 0001  ld   $01
              1985 002b  ld   $2b
              1986 0092  ld   $92
              1987 0021  ld   $21
              1988 0086  ld   $86
              1989 00b8  ld   $b8
              198a 0082  ld   $82
              198b 0035  ld   $35
              198c 0053  ld   $53
              198d 00e1  ld   $e1
              198e 0011  ld   $11
              198f 00ff  ld   $ff
              1990 00ff  ld   $ff
              1991 002b  ld   $2b
              1992 0092  ld   $92
              1993 0021  ld   $21
              1994 0082  ld   $82
              1995 00b8  ld   $b8
              1996 0086  ld   $86
              1997 002b  ld   $2b
              1998 0086  ld   $86
              1999 0011  ld   $11
              199a 0000  ld   $00
              199b 0001  ld   $01
              199c 002b  ld   $2b
              199d 0094  ld   $94
              199e 0021  ld   $21
              199f 0088  ld   $88
              19a0 00b8  ld   $b8
              19a1 0084  ld   $84
              19a2 0035  ld   $35
              19a3 0053  ld   $53
              19a4 00f8  ld   $f8
              19a5 0011  ld   $11
              19a6 0000  ld   $00
              19a7 00ff  ld   $ff
              19a8 002b  ld   $2b
              19a9 0094  ld   $94
              19aa 0021  ld   $21
              19ab 0084  ld   $84
              19ac 00b8  ld   $b8
              19ad 0088  ld   $88
              19ae 002b  ld   $2b
              19af 0088  ld   $88
              19b0 0085  ld   $85
              19b1 00a2  ld   $a2
              19b2 0071  ld   $71
              19b3 0071  ld   $71
              19b4 00a2  ld   $a2
              19b5 005d  ld   $5d
              19b6 001a  ld   $1a
              19b7 0082  ld   $82
              19b8 005e  ld   $5e
              19b9 0096  ld   $96
              19ba 001a  ld   $1a
              19bb 0084  ld   $84
              19bc 00e3  ld   $e3
              19bd 0008  ld   $08
              19be 005e  ld   $5e
              19bf 0097  ld   $97
              19c0 0021  ld   $21
              19c1 0086  ld   $86
              19c2 00b8  ld   $b8
              19c3 0088  ld   $88
              19c4 0035  ld   $35
              19c5 0053  ld   $53
              19c6 00b4  ld   $b4
              19c7 0085  ld   $85
              19c8 00a0  ld   $a0
              19c9 0073  ld   $73
              19ca 0059  ld   $59
              19cb 0000  ld   $00
              19cc 00b8  ld   $b8
              19cd 0086  ld   $86
              19ce 002b  ld   $2b
              19cf 0098  ld   $98
              19d0 002b  ld   $2b
              19d1 009a  ld   $9a
              19d2 0021  ld   $21
              19d3 0086  ld   $86
              19d4 0099  ld   $99
              19d5 0086  ld   $86
              19d6 002b  ld   $2b
              19d7 0086  ld   $86
              19d8 0021  ld   $21
              19d9 0088  ld   $88
              19da 0099  ld   $99
              19db 0088  ld   $88
              19dc 002b  ld   $2b
              19dd 0088  ld   $88
              19de 0085  ld   $85
              19df 00d7  ld   $d7
              19e0 006f  ld   $6f
              19e1 0075  ld   $75
              19e2 0085  ld   $85
              19e3 00a0  ld   $a0
              19e4 006f  ld   $6f
              19e5 0059  ld   $59
              19e6 0008  ld   $08
              19e7 002b  ld   $2b
              19e8 0094  ld   $94
              19e9 0059  ld   $59
              19ea 00a0  ld   $a0
              19eb 005e  ld   $5e
              19ec 0024  ld   $24
              19ed 0059  ld   $59
              19ee 0000  ld   $00
              19ef 005e  ld   $5e
              19f0 0026  ld   $26
              19f1 001a  ld   $1a
              19f2 0094  ld   $94
              19f3 005e  ld   $5e
              19f4 0027  ld   $27
              19f5 00b4  ld   $b4
              19f6 00f3  ld   $f3
              19f7 0059  ld   $59
              19f8 00a0  ld   $a0
              19f9 005e  ld   $5e
              19fa 0024  ld   $24
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e068  jmp  y,$68       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 0059  ld   $59
              1a01 0000  ld   $00
              1a02 005e  ld   $5e
              1a03 0026  ld   $26
              1a04 0011  ld   $11
              1a05 0087  ld   $87
              1a06 0000  ld   $00
              1a07 00b8  ld   $b8
              1a08 0094  ld   $94
              1a09 005e  ld   $5e
              1a0a 0027  ld   $27
              1a0b 00b4  ld   $b4
              1a0c 00f3  ld   $f3
              1a0d 0093  ld   $93
              1a0e 0094  ld   $94
              1a0f 001a  ld   $1a
              1a10 0094  ld   $94
              1a11 00e6  ld   $e6
              1a12 0044  ld   $44
              1a13 0035  ld   $35
              1a14 0050  ld   $50
              1a15 00d3  ld   $d3
              1a16 0063  ld   $63
              1a17 00ff  ld   $ff
              1a18 0072  ld   $72
              1a19 00a1  ld   $a1
              1a1a 005e  ld   $5e
              1a1b 0075  ld   $75
              1a1c 0011  ld   $11
              1a1d 0003  ld   $03
              1a1e 000b  ld   $0b
              1a1f 002b  ld   $2b
              1a20 0022  ld   $22
              1a21 001a  ld   $1a
              1a22 00a2  ld   $a2
              1a23 005e  ld   $5e
              1a24 0025  ld   $25
              1a25 0011  ld   $11
              1a26 0000  ld   $00
              1a27 0001  ld   $01
              1a28 00ad  ld   $ad
              1a29 005e  ld   $5e
              1a2a 0027  ld   $27
              1a2b 0059  ld   $59
              1a2c 0008  ld   $08
              1a2d 005e  ld   $5e
              1a2e 009e  ld   $9e
              1a2f 0059  ld   $59
              1a30 00a0  ld   $a0
              1a31 005e  ld   $5e
              1a32 0024  ld   $24
              1a33 0059  ld   $59
              1a34 0000  ld   $00
              1a35 005e  ld   $5e
              1a36 0026  ld   $26
              1a37 00b4  ld   $b4
              1a38 00f3  ld   $f3
              1a39 0093  ld   $93
              1a3a 0027  ld   $27
              1a3b 001a  ld   $1a
              1a3c 009e  ld   $9e
              1a3d 00e6  ld   $e6
              1a3e 0001  ld   $01
              1a3f 0035  ld   $35
              1a40 0072  ld   $72
              1a41 00b1  ld   $b1
              1a42 0085  ld   $85
              1a43 00d1  ld   $d1
              1a44 006d  ld   $6d
              1a45 0063  ld   $63
              1a46 00ff  ld   $ff
              1a47 0075  ld   $75
              1a48 0011  ld   $11
              1a49 00a9  ld   $a9
              1a4a 0079  ld   $79
              1a4b 002b  ld   $2b
              1a4c 009e  ld   $9e
              1a4d 002b  ld   $2b
              1a4e 00ac  ld   $ac
              1a4f 0011  ld   $11
              1a50 00f4  ld   $f4
              1a51 0078  ld   $78
              1a52 002b  ld   $2b
              1a53 00a0  ld   $a0
              1a54 0021  ld   $21
              1a55 00ac  ld   $ac
              1a56 00f6  ld   $f6
              1a57 0035  ld   $35
              1a58 0072  ld   $72
              1a59 00e7  ld   $e7
              1a5a 0021  ld   $21
              1a5b 009c  ld   $9c
              1a5c 0035  ld   $35
              1a5d 003f  ld   $3f
              1a5e 00e5  ld   $e5
              1a5f 00cf  ld   $cf
              1a60 009c  ld   $9c
              1a61 0063  ld   $63
              1a62 00ff  ld   $ff
              1a63 00b8  ld   $b8
              1a64 009a  ld   $9a
              1a65 0035  ld   $35
              1a66 003f  ld   $3f
              1a67 00f2  ld   $f2
              1a68 0093  ld   $93
              1a69 00ac  ld   $ac
              1a6a 0093  ld   $93
              1a6b 00ac  ld   $ac
              1a6c 0090  ld   $90
              1a6d 00d8  ld   $d8
              1a6e 0021  ld   $21
              1a6f 00ac  ld   $ac
              1a70 00b8  ld   $b8
              1a71 009e  ld   $9e
              1a72 0099  ld   $99
              1a73 00a0  ld   $a0
              1a74 00f6  ld   $f6
              1a75 00cf  ld   $cf
              1a76 0018  ld   $18
              1a77 0063  ld   $63
              1a78 00ff  ld   $ff
              1a79 0073  ld   $73
              1a7a 00a0  ld   $a0
              1a7b 005f  ld   $5f
              1a7c 0021  ld   $21
              1a7d 0086  ld   $86
              1a7e 002b  ld   $2b
              1a7f 009c  ld   $9c
              1a80 0021  ld   $21
              1a81 0088  ld   $88
              1a82 002b  ld   $2b
              1a83 0086  ld   $86
              1a84 0021  ld   $21
              1a85 009c  ld   $9c
              1a86 002b  ld   $2b
              1a87 0088  ld   $88
              1a88 0021  ld   $21
              1a89 0092  ld   $92
              1a8a 002b  ld   $2b
              1a8b 009c  ld   $9c
              1a8c 0021  ld   $21
              1a8d 0094  ld   $94
              1a8e 002b  ld   $2b
              1a8f 0092  ld   $92
              1a90 0021  ld   $21
              1a91 009c  ld   $9c
              1a92 002b  ld   $2b
              1a93 0094  ld   $94
              1a94 00ff  ld   $ff
              1a95 0075  ld   $75
              1a96 0021  ld   $21
              1a97 0092  ld   $92
              1a98 0093  ld   $93
              1a99 0092  ld   $92
              1a9a 00ad  ld   $ad
              1a9b 005e  ld   $5e
              1a9c 0096  ld   $96
              1a9d 0082  ld   $82
              1a9e 00f0  ld   $f0
              1a9f 008c  ld   $8c
              1aa0 0090  ld   $90
              1aa1 0035  ld   $35
              1aa2 0072  ld   $72
              1aa3 00d5  ld   $d5
              1aa4 0021  ld   $21
              1aa5 0092  ld   $92
              1aa6 0093  ld   $93
              1aa7 0092  ld   $92
              1aa8 00ad  ld   $ad
              1aa9 005e  ld   $5e
              1aaa 0094  ld   $94
              1aab 0085  ld   $85
              1aac 00a0  ld   $a0
              1aad 006e  ld   $6e
              1aae 0085  ld   $85
              1aaf 00ee  ld   $ee
              1ab0 006c  ld   $6c
              1ab1 0090  ld   $90
              1ab2 00b8  ld   $b8
              1ab3 008c  ld   $8c
              1ab4 0010  ld   $10
              1ab5 0035  ld   $35
              1ab6 0072  ld   $72
              1ab7 00e3  ld   $e3
              1ab8 0059  ld   $59
              1ab9 0000  ld   $00
              1aba 002b  ld   $2b
              1abb 0094  ld   $94
              1abc 0085  ld   $85
              1abd 00ee  ld   $ee
              1abe 006c  ld   $6c
              1abf 0090  ld   $90
              1ac0 00b8  ld   $b8
              1ac1 008c  ld   $8c
              1ac2 0050  ld   $50
              1ac3 0035  ld   $35
              1ac4 0072  ld   $72
              1ac5 00f2  ld   $f2
              1ac6 0021  ld   $21
              1ac7 0092  ld   $92
              1ac8 00f6  ld   $f6
              1ac9 002b  ld   $2b
              1aca 0092  ld   $92
              1acb 0035  ld   $35
              1acc 0072  ld   $72
              1acd 00b8  ld   $b8
              1ace 0063  ld   $63
              1acf 00ff  ld   $ff
              1ad0 001a  ld   $1a
              1ad1 0096  ld   $96
              1ad2 005e  ld   $5e
              1ad3 002c  ld   $2c
              1ad4 002b  ld   $2b
              1ad5 0082  ld   $82
              1ad6 0085  ld   $85
              1ad7 00a2  ld   $a2
              1ad8 0074  ld   $74
              1ad9 0090  ld   $90
              1ada 00b8  ld   $b8
              1adb 0074  ld   $74
              1adc 00a2  ld   $a2
              1add 005d  ld   $5d
              1ade 0021  ld   $21
              1adf 0082  ld   $82
              1ae0 00e6  ld   $e6
              1ae1 0001  ld   $01
              1ae2 002b  ld   $2b
              1ae3 0082  ld   $82
              1ae4 0035  ld   $35
              1ae5 0053  ld   $53
              1ae6 00aa  ld   $aa
              1ae7 00ff  ld   $ff
              1ae8 0075  ld   $75
              1ae9 0085  ld   $85
              1aea 00de  ld   $de
              1aeb 006c  ld   $6c
              1aec 0063  ld   $63
              1aed 0090  ld   $90
              1aee 00a0  ld   $a0
              1aef 00e6  ld   $e6
              1af0 0082  ld   $82
              1af1 0035  ld   $35
              1af2 004d  ld   $4d
              1af3 00fc  ld   $fc
              1af4 00e3  ld   $e3
              1af5 0082  ld   $82
              1af6 00e6  ld   $e6
              1af7 0052  ld   $52
              1af8 0035  ld   $35
              1af9 0053  ld   $53
              1afa 00c9  ld   $c9
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e068  jmp  y,$68       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 00e3  ld   $e3
              1b01 0032  ld   $32
              1b02 0035  ld   $35
              1b03 0050  ld   $50
              1b04 00fc  ld   $fc
              1b05 002b  ld   $2b
              1b06 0092  ld   $92
              1b07 0011  ld   $11
              1b08 0000  ld   $00
              1b09 0007  ld   $07
              1b0a 0090  ld   $90
              1b0b 00ce  ld   $ce
              1b0c 002b  ld   $2b
              1b0d 0092  ld   $92
              1b0e 0011  ld   $11
              1b0f 0000  ld   $00
              1b10 0008  ld   $08
              1b11 002b  ld   $2b
              1b12 0094  ld   $94
              1b13 001a  ld   $1a
              1b14 0092  ld   $92
              1b15 00e9  ld   $e9
              1b16 00e9  ld   $e9
              1b17 0099  ld   $99
              1b18 0092  ld   $92
              1b19 0099  ld   $99
              1b1a 0094  ld   $94
              1b1b 002b  ld   $2b
              1b1c 0094  ld   $94
              1b1d 0059  ld   $59
              1b1e 0005  ld   $05
              1b1f 005e  ld   $5e
              1b20 0096  ld   $96
              1b21 0021  ld   $21
              1b22 0094  ld   $94
              1b23 007f  ld   $7f
              1b24 0000  ld   $00
              1b25 005e  ld   $5e
              1b26 0026  ld   $26
              1b27 00b4  ld   $b4
              1b28 00cb  ld   $cb
              1b29 0093  ld   $93
              1b2a 0094  ld   $94
              1b2b 0093  ld   $93
              1b2c 0028  ld   $28
              1b2d 001a  ld   $1a
              1b2e 0096  ld   $96
              1b2f 00e6  ld   $e6
              1b30 0001  ld   $01
              1b31 0035  ld   $35
              1b32 0072  ld   $72
              1b33 00dc  ld   $dc
              1b34 005e  ld   $5e
              1b35 0026  ld   $26
              1b36 00b4  ld   $b4
              1b37 00cb  ld   $cb
              1b38 0093  ld   $93
              1b39 0028  ld   $28
              1b3a 0075  ld   $75
              1b3b 0085  ld   $85
              1b3c 00e7  ld   $e7
              1b3d 006d  ld   $6d
              1b3e 0063  ld   $63
              1b3f 00ff  ld   $ff
              1b40 0075  ld   $75
              1b41 00a0  ld   $a0
              1b42 005f  ld   $5f
              1b43 0090  ld   $90
              1b44 003c  ld   $3c
              1b45 0091  ld   $91
              1b46 0040  ld   $40
              1b47 0092  ld   $92
              1b48 0043  ld   $43
              1b49 0093  ld   $93
              1b4a 0048  ld   $48
              1b4b 000c  ld   $0c
              1b4c 0080  ld   $80
              1b4d 0081  ld   $81
              1b4e 0082  ld   $82
              1b4f 0083  ld   $83
              1b50 0001  ld   $01
              1b51 0090  ld   $90
              1b52 003c  ld   $3c
              1b53 0091  ld   $91
              1b54 0040  ld   $40
              1b55 0092  ld   $92
              1b56 0043  ld   $43
              1b57 0093  ld   $93
              1b58 0048  ld   $48
              1b59 0024  ld   $24
              1b5a 0080  ld   $80
              1b5b 0081  ld   $81
              1b5c 0082  ld   $82
              1b5d 0083  ld   $83
              1b5e 00d0  ld   $d0
              1b5f 0000  ld   $00
              1b60 0000  ld   $00
              1b61 0075  ld   $75
              1b62 001a  ld   $1a
              1b63 00a4  ld   $a4
              1b64 002b  ld   $2b
              1b65 0082  ld   $82
              1b66 001a  ld   $1a
              1b67 00a5  ld   $a5
              1b68 002b  ld   $2b
              1b69 0084  ld   $84
              1b6a 0021  ld   $21
              1b6b 0090  ld   $90
              1b6c 00f6  ld   $f6
              1b6d 002b  ld   $2b
              1b6e 0086  ld   $86
              1b6f 00e6  ld   $e6
              1b70 00ff  ld   $ff
              1b71 0035  ld   $35
              1b72 003f  ld   $3f
              1b73 00f1  ld   $f1
              1b74 0021  ld   $21
              1b75 0082  ld   $82
              1b76 0099  ld   $99
              1b77 0086  ld   $86
              1b78 002b  ld   $2b
              1b79 0086  ld   $86
              1b7a 005e  ld   $5e
              1b7b 00a4  ld   $a4
              1b7c 0093  ld   $93
              1b7d 0090  ld   $90
              1b7e 0093  ld   $93
              1b7f 0090  ld   $90
              1b80 0021  ld   $21
              1b81 0090  ld   $90
              1b82 00f6  ld   $f6
              1b83 002b  ld   $2b
              1b84 0088  ld   $88
              1b85 0021  ld   $21
              1b86 0084  ld   $84
              1b87 0099  ld   $99
              1b88 0088  ld   $88
              1b89 002b  ld   $2b
              1b8a 0088  ld   $88
              1b8b 005e  ld   $5e
              1b8c 00a5  ld   $a5
              1b8d 0085  ld   $85
              1b8e 00ce  ld   $ce
              1b8f 0070  ld   $70
              1b90 0093  ld   $93
              1b91 0090  ld   $90
              1b92 0093  ld   $93
              1b93 0090  ld   $90
              1b94 0090  ld   $90
              1b95 00bd  ld   $bd
              1b96 0059  ld   $59
              1b97 0099  ld   $99
              1b98 005e  ld   $5e
              1b99 009e  ld   $9e
              1b9a 0085  ld   $85
              1b9b 00a8  ld   $a8
              1b9c 006c  ld   $6c
              1b9d 0085  ld   $85
              1b9e 00f5  ld   $f5
              1b9f 006b  ld   $6b
              1ba0 0063  ld   $63
              1ba1 00ff  ld   $ff
              1ba2 0078  ld   $78
              1ba3 00a1  ld   $a1
              1ba4 005f  ld   $5f
              1ba5 0059  ld   $59
              1ba6 0002  ld   $02
              1ba7 005e  ld   $5e
              1ba8 00a4  ld   $a4
              1ba9 005e  ld   $5e
              1baa 0028  ld   $28
              1bab 001a  ld   $1a
              1bac 00aa  ld   $aa
              1bad 0082  ld   $82
              1bae 0002  ld   $02
              1baf 0035  ld   $35
              1bb0 0072  ld   $72
              1bb1 00ad  ld   $ad
              1bb2 00ff  ld   $ff
              1bb3 0075  ld   $75
              1bb4 001a  ld   $1a
              1bb5 00aa  ld   $aa
              1bb6 0082  ld   $82
              1bb7 0004  ld   $04
              1bb8 0035  ld   $35
              1bb9 0072  ld   $72
              1bba 00c4  ld   $c4
              1bbb 001a  ld   $1a
              1bbc 00a5  ld   $a5
              1bbd 00e3  ld   $e3
              1bbe 0008  ld   $08
              1bbf 005e  ld   $5e
              1bc0 00a5  ld   $a5
              1bc1 00e6  ld   $e6
              1bc2 0078  ld   $78
              1bc3 0035  ld   $35
              1bc4 0050  ld   $50
              1bc5 00ed  ld   $ed
              1bc6 0059  ld   $59
              1bc7 0070  ld   $70
              1bc8 005e  ld   $5e
              1bc9 00a5  ld   $a5
              1bca 0085  ld   $85
              1bcb 00a1  ld   $a1
              1bcc 0072  ld   $72
              1bcd 0011  ld   $11
              1bce 0000  ld   $00
              1bcf 0001  ld   $01
              1bd0 002b  ld   $2b
              1bd1 0098  ld   $98
              1bd2 0021  ld   $21
              1bd3 0098  ld   $98
              1bd4 00ad  ld   $ad
              1bd5 00e3  ld   $e3
              1bd6 0008  ld   $08
              1bd7 00e6  ld   $e6
              1bd8 007f  ld   $7f
              1bd9 0035  ld   $35
              1bda 0056  ld   $56
              1bdb 00d8  ld   $d8
              1bdc 00e3  ld   $e3
              1bdd 0088  ld   $88
              1bde 00e3  ld   $e3
              1bdf 007f  ld   $7f
              1be0 00f0  ld   $f0
              1be1 0098  ld   $98
              1be2 0093  ld   $93
              1be3 0098  ld   $98
              1be4 0093  ld   $93
              1be5 0098  ld   $98
              1be6 001a  ld   $1a
              1be7 0098  ld   $98
              1be8 00e6  ld   $e6
              1be9 00f0  ld   $f0
              1bea 0035  ld   $35
              1beb 0050  ld   $50
              1bec 00cc  ld   $cc
              1bed 001a  ld   $1a
              1bee 00aa  ld   $aa
              1bef 0088  ld   $88
              1bf0 0004  ld   $04
              1bf1 005e  ld   $5e
              1bf2 00aa  ld   $aa
              1bf3 0085  ld   $85
              1bf4 00d1  ld   $d1
              1bf5 006d  ld   $6d
              1bf6 0063  ld   $63
              1bf7 00ff  ld   $ff
              1bf8 00e1  ld   $e1
              1bf9 0008  ld   $08
              1bfa 00ea  ld   $ea
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e068  jmp  y,$68       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00 0008  ld   $08
              1c01 00f4  ld   $f4
              1c02 0008  ld   $08
              1c03 00c6  ld   $c6
              1c04 0009  ld   $09
              1c05 00f5  ld   $f5
              1c06 0009  ld   $09
              1c07 00ac  ld   $ac
              1c08 000b  ld   $0b
              1c09 0079  ld   $79
              1c0a 00a0  ld   $a0
              1c0b 0060  ld   $60
              1c0c 0035  ld   $35
              1c0d 003f  ld   $3f
              1c0e 00a4  ld   $a4
              1c0f 0059  ld   $59
              1c10 0000  ld   $00
              1c11 00ff  ld   $ff
              1c12 0059  ld   $59
              1c13 0001  ld   $01
              1c14 00ff  ld   $ff
              1c15 007f  ld   $7f
              1c16 0000  ld   $00
              1c17 000a  ld   $0a
              1c18 0000  ld   $00
              1c19 00fe  ld   $fe
              1c1a 0000  ld   $00
              1c1b 00fd  ld   $fd
              1c1c 0000  ld   $00
              1c1d 00fb  ld   $fb
              1c1e 0000  ld   $00
              1c1f 00f7  ld   $f7
              1c20 0000  ld   $00
              1c21 0000  ld   $00
              1c22 0000  ld   $00
              1c23 0011  ld   $11
              1c24 0054  ld   $54
              1c25 0054  ld   $54
              1c26 004c  ld   $4c
              1c27 0020  ld   $20
              1c28 006d  ld   $6d
              1c29 0069  ld   $69
              1c2a 0063  ld   $63
              1c2b 0072  ld   $72
              1c2c 006f  ld   $6f
              1c2d 0063  ld   $63
              1c2e 006f  ld   $6f
              1c2f 006d  ld   $6d
              1c30 0070  ld   $70
              1c31 0075  ld   $75
              1c32 0074  ld   $74
              1c33 0065  ld   $65
              1c34 0072  ld   $72
              1c35 0000  ld   $00
              1c36 00b2  ld   $b2
              1c37 007d  ld   $7d
              1c38 00ac  ld   $ac
              1c39 007d  ld   $7d
              1c3a 00a6  ld   $a6
              1c3b 007d  ld   $7d
              1c3c 00b2  ld   $b2
              1c3d 007d  ld   $7d
              1c3e 00ea  ld   $ea
              1c3f 007a  ld   $7a
              1c40 00d0  ld   $d0
              1c41 007a  ld   $7a
              1c42 00c6  ld   $c6
              1c43 007a  ld   $7a
              1c44 00b4  ld   $b4
              1c45 007a  ld   $7a
              1c46 00a6  ld   $a6
              1c47 007a  ld   $7a
              1c48 0000  ld   $00
              1c49 0000  ld   $00
              1c4a 00fc  ld   $fc
              1c4b 00ff  ld   $ff
              1c4c 00f0  ld   $f0
              1c4d 00ff  ld   $ff
              1c4e 0000  ld   $00
              1c4f 0000  ld   $00
              1c50 00f4  ld   $f4
              1c51 00ff  ld   $ff
              1c52 00f0  ld   $f0
              1c53 00ff  ld   $ff
              1c54 00fc  ld   $fc
              1c55 00ff  ld   $ff
              1c56 00fc  ld   $fc
              1c57 00ff  ld   $ff
              1c58 00fc  ld   $fc
              1c59 00ff  ld   $ff
              1c5a 0000  ld   $00
              1c5b 0000  ld   $00
              1c5c 0013  ld   $13
              1c5d 0000  ld   $00
              1c5e 0013  ld   $13
              1c5f 0000  ld   $00
              1c60 0017  ld   $17
              1c61 0000  ld   $00
              1c62 002a  ld   $2a
              1c63 0000  ld   $00
              1c64 003d  ld   $3d
              1c65 0000  ld   $00
              1c66 0050  ld   $50
              1c67 0000  ld   $00
              1c68 0063  ld   $63
              1c69 0000  ld   $00
              1c6a 0076  ld   $76
              1c6b 0000  ld   $00
              1c6c 007a  ld   $7a
              1c6d 00a1  ld   $a1
              1c6e 005f  ld   $5f
              1c6f 0003  ld   $03
              1c70 0033  ld   $33
              1c71 0032  ld   $32
              1c72 004b  ld   $4b
              1c73 0000  ld   $00
              1c74 0000  ld   $00
              1c75 0000  ld   $00
              1c76 00f8  ld   $f8
              1c77 00ff  ld   $ff
              1c78 000f  ld   $0f
              1c79 0000  ld   $00
              1c7a 0000  ld   $00
              1c7b 0000  ld   $00
              * 5 times
              1c7e 0008  ld   $08
              1c7f 0000  ld   $00
              1c80 00ff  ld   $ff
              1c81 0000  ld   $00
              1c82 0000  ld   $00
              1c83 0000  ld   $00
              1c84 00f8  ld   $f8
              1c85 00ff  ld   $ff
              1c86 000f  ld   $0f
              1c87 0000  ld   $00
              1c88 0000  ld   $00
              1c89 0000  ld   $00
              * 5 times
              1c8c 0008  ld   $08
              1c8d 0000  ld   $00
              1c8e 00f1  ld   $f1
              1c8f 00ff  ld   $ff
              1c90 0000  ld   $00
              1c91 0000  ld   $00
              1c92 00ff  ld   $ff
              1c93 0000  ld   $00
              1c94 0000  ld   $00
              1c95 0000  ld   $00
              1c96 00f8  ld   $f8
              1c97 00ff  ld   $ff
              1c98 000f  ld   $0f
              1c99 0000  ld   $00
              1c9a 0000  ld   $00
              1c9b 0000  ld   $00
              1c9c 00ff  ld   $ff
              1c9d 0000  ld   $00
              1c9e 0000  ld   $00
              1c9f 0000  ld   $00
              * 7 times
              1ca4 0004  ld   $04
              1ca5 0000  ld   $00
              1ca6 000f  ld   $0f
              1ca7 0000  ld   $00
              1ca8 0000  ld   $00
              1ca9 0000  ld   $00
              1caa 00f1  ld   $f1
              1cab 00ff  ld   $ff
              1cac 0000  ld   $00
              1cad 0000  ld   $00
              1cae 0000  ld   $00
              1caf 0000  ld   $00
              1cb0 0008  ld   $08
              1cb1 0000  ld   $00
              1cb2 000f  ld   $0f
              1cb3 0000  ld   $00
              1cb4 0000  ld   $00
              1cb5 0000  ld   $00
              1cb6 00ff  ld   $ff
              1cb7 0000  ld   $00
              1cb8 000f  ld   $0f
              1cb9 0000  ld   $00
              1cba 0000  ld   $00
              1cbb 0000  ld   $00
              * 5 times
              1cbe 0008  ld   $08
              1cbf 0000  ld   $00
              1cc0 00f1  ld   $f1
              1cc1 00ff  ld   $ff
              1cc2 0000  ld   $00
              1cc3 0000  ld   $00
              1cc4 0000  ld   $00
              1cc5 0000  ld   $00
              1cc6 00fc  ld   $fc
              1cc7 00ff  ld   $ff
              1cc8 000e  ld   $0e
              1cc9 0000  ld   $00
              1cca 0000  ld   $00
              1ccb 0000  ld   $00
              1ccc 00ff  ld   $ff
              1ccd 0000  ld   $00
              1cce 007b  ld   $7b
              1ccf 00a0  ld   $a0
              1cd0 0060  ld   $60
              1cd1 0000  ld   $00
              1cd2 0000  ld   $00
              1cd3 0000  ld   $00
              * 42 times
              1cfb fe00  bra  ac          ;+-----------------------------------+
              1cfc fcfd  bra  $1cfd       ;|                                   |
              1cfd 1404  ld   $04,y       ;| Trampoline for page $1c00 lookups |
              1cfe e068  jmp  y,$68       ;|                                   |
              1cff c218  st   [$18]       ;+-----------------------------------+
              1d00 0000  ld   $00
              1d01 0000  ld   $00
              1d02 0000  ld   $00
              * 54 times
              1d36 007c  ld   $7c
              1d37 00a0  ld   $a0
              1d38 0060  ld   $60
              1d39 0000  ld   $00
              1d3a 0000  ld   $00
              1d3b 0000  ld   $00
              * 96 times
              1d99 007d  ld   $7d
              1d9a 00a1  ld   $a1
              1d9b 0027  ld   $27
              1d9c 0003  ld   $03
              1d9d 0036  ld   $36
              1d9e 0034  ld   $34
              1d9f 004b  ld   $4b
              1da0 0000  ld   $00
              1da1 0000  ld   $00
              1da2 0000  ld   $00
              * 5 times
              1da5 00ff  ld   $ff
              1da6 0000  ld   $00
              1da7 0000  ld   $00
              1da8 0000  ld   $00
              1da9 00f8  ld   $f8
              1daa 00ff  ld   $ff
              1dab 00ff  ld   $ff
              1dac 0000  ld   $00
              1dad 000f  ld   $0f
              1dae 0000  ld   $00
              1daf 0000  ld   $00
              1db0 0000  ld   $00
              * 5 times
              1db3 00f4  ld   $f4
              1db4 00ff  ld   $ff
              1db5 00f1  ld   $f1
              1db6 00ff  ld   $ff
              1db7 0000  ld   $00
              1db8 0000  ld   $00
              1db9 0000  ld   $00
              1dba 0000  ld   $00
              1dbb 0008  ld   $08
              1dbc 0000  ld   $00
              1dbd 000e  ld   $0e
              1dbe 0000  ld   $00
              1dbf 0000  ld   $00
              1dc0 0000  ld   $00
              1dc1 00ff  ld   $ff
              1dc2 0000  ld   $00
              1dc3 007d  ld   $7d
              1dc4 00c9  ld   $c9
              1dc5 0037  ld   $37
              1dc6 0000  ld   $00
              1dc7 0000  ld   $00
              1dc8 0000  ld   $00
              * 24 times
              1dde 0006  ld   $06
              1ddf 0052  ld   $52
              1de0 004f  ld   $4f
              1de1 004d  ld   $4d
              1de2 0076  ld   $76
              1de3 0035  ld   $35
              1de4 0061  ld   $61
              1de5 0000  ld   $00
              1de6 0009  ld   $09
              1de7 0046  ld   $46
              1de8 004f  ld   $4f
              1de9 0052  ld   $52
              1dea 0020  ld   $20
              1deb 0052  ld   $52
              1dec 0045  ld   $45
              1ded 0053  ld   $53
              1dee 0045  ld   $45
              1def 0054  ld   $54
              1df0 0000  ld   $00
              1df1 000a  ld   $0a
              1df2 0054  ld   $54
              1df3 004f  ld   $4f
              1df4 0020  ld   $20
              1df5 0045  ld   $45
              1df6 0058  ld   $58
              1df7 0045  ld   $45
              1df8 0043  ld   $43
              1df9 0055  ld   $55
              1dfa 0054  ld   $54
              1dfb fe00  bra  ac          ;+-----------------------------------+
              1dfc fcfd  bra  $1dfd       ;|                                   |
              1dfd 1404  ld   $04,y       ;| Trampoline for page $1d00 lookups |
              1dfe e068  jmp  y,$68       ;|                                   |
              1dff c218  st   [$18]       ;+-----------------------------------+
              1e00 0045  ld   $45
              1e01 0000  ld   $00
              1e02 007e  ld   $7e
              1e03 00a2  ld   $a2
              1e04 005e  ld   $5e
              1e05 0004  ld   $04
              1e06 0048  ld   $48
              1e07 004f  ld   $4f
              1e08 004c  ld   $4c
              1e09 0044  ld   $44
              1e0a 0000  ld   $00
              1e0b 0005  ld   $05
              1e0c 0050  ld   $50
              1e0d 0052  ld   $52
              1e0e 0045  ld   $45
              1e0f 0053  ld   $53
              1e10 0053  ld   $53
              1e11 0000  ld   $00
              1e12 0009  ld   $09
              1e13 0054  ld   $54
              1e14 004f  ld   $4f
              1e15 0020  ld   $20
              1e16 0053  ld   $53
              1e17 0045  ld   $45
              1e18 004c  ld   $4c
              1e19 0045  ld   $45
              1e1a 0043  ld   $43
              1e1b 0054  ld   $54
              1e1c 0000  ld   $00
              1e1d 0009  ld   $09
              1e1e 0020  ld   $20
              1e1f 005b  ld   $5b
              1e20 0053  ld   $53
              1e21 0054  ld   $54
              1e22 0041  ld   $41
              1e23 0052  ld   $52
              1e24 0054  ld   $54
              1e25 005d  ld   $5d
              1e26 0020  ld   $20
              1e27 0000  ld   $00
              1e28 0005  ld   $05
              1e29 0020  ld   $20
              1e2a 005b  ld   $5b
              1e2b 0041  ld   $41
              1e2c 005d  ld   $5d
              1e2d 0020  ld   $20
              1e2e 0000  ld   $00
              1e2f 000a  ld   $0a
              1e30 0020  ld   $20
              1e31 005b  ld   $5b
              1e32 0041  ld   $41
              1e33 0052  ld   $52
              1e34 0052  ld   $52
              1e35 004f  ld   $4f
              1e36 0057  ld   $57
              1e37 0053  ld   $53
              1e38 005d  ld   $5d
              1e39 0020  ld   $20
              1e3a 0000  ld   $00
              1e3b 0070  ld   $70
              1e3c 005a  ld   $5a
              1e3d 000e  ld   $0e
              1e3e 0039  ld   $39
              1e3f 00c1  ld   $c1
              1e40 004c  ld   $4c
              1e41 0020  ld   $20
              1e42 0054  ld   $54
              1e43 007a  ld   $7a
              1e44 0059  ld   $59
              1e45 00f3  ld   $f3
              1e46 005d  ld   $5d
              1e47 0038  ld   $38
              1e48 0085  ld   $85
              1e49 008c  ld   $8c
              1e4a 008b  ld   $8b
              1e4b 0029  ld   $29
              1e4c 00c0  ld   $c0
              1e4d 008f  ld   $8f
              1e4e 00a2  ld   $a2
              1e4f 00f8  ld   $f8
              1e50 007f  ld   $7f
              1e51 00f1  ld   $f1
              1e52 007f  ld   $7f
              1e53 00ea  ld   $ea
              1e54 007f  ld   $7f
              1e55 00de  ld   $de
              1e56 007f  ld   $7f
              1e57 00d4  ld   $d4
              1e58 007f  ld   $7f
              1e59 00ca  ld   $ca
              1e5a 007f  ld   $7f
              1e5b 00c2  ld   $c2
              1e5c 007f  ld   $7f
              1e5d 00b7  ld   $b7
              1e5e 007f  ld   $7f
              1e5f 00ae  ld   $ae
              1e60 007f  ld   $7f
              1e61 00a6  ld   $a6
              1e62 007f  ld   $7f
              1e63 007f  ld   $7f
              1e64 00a1  ld   $a1
              1e65 005f  ld   $5f
              1e66 0003  ld   $03
              1e67 0055  ld   $55
              1e68 0053  ld   $53
              1e69 0045  ld   $45
              1e6a 0000  ld   $00
              1e6b 0006  ld   $06
              1e6c 0041  ld   $41
              1e6d 0070  ld   $70
              1e6e 0070  ld   $70
              1e6f 006c  ld   $6c
              1e70 0065  ld   $65
              1e71 0031  ld   $31
              1e72 0000  ld   $00
              1e73 0007  ld   $07
              1e74 004d  ld   $4d
              1e75 0053  ld   $53
              1e76 0042  ld   $42
              1e77 0041  ld   $41
              1e78 0053  ld   $53
              1e79 0049  ld   $49
              1e7a 0043  ld   $43
              1e7b 0000  ld   $00
              1e7c 0009  ld   $09
              1e7d 0054  ld   $54
              1e7e 0069  ld   $69
              1e7f 006e  ld   $6e
              1e80 0079  ld   $79
              1e81 0042  ld   $42
              1e82 0041  ld   $41
              1e83 0053  ld   $53
              1e84 0049  ld   $49
              1e85 0043  ld   $43
              1e86 0000  ld   $00
              1e87 0006  ld   $06
              1e88 0042  ld   $42
              1e89 0072  ld   $72
              1e8a 0069  ld   $69
              1e8b 0063  ld   $63
              1e8c 006b  ld   $6b
              1e8d 0073  ld   $73
              1e8e 0000  ld   $00
              1e8f 0008  ld   $08
              1e90 0054  ld   $54
              1e91 0065  ld   $65
              1e92 0074  ld   $74
              1e93 0072  ld   $72
              1e94 006f  ld   $6f
              1e95 006e  ld   $6e
              1e96 0069  ld   $69
              1e97 0073  ld   $73
              1e98 0000  ld   $00
              1e99 0008  ld   $08
              1e9a 0050  ld   $50
              1e9b 0069  ld   $69
              1e9c 0063  ld   $63
              1e9d 0074  ld   $74
              1e9e 0075  ld   $75
              1e9f 0072  ld   $72
              1ea0 0065  ld   $65
              1ea1 0073  ld   $73
              1ea2 0000  ld   $00
              1ea3 000a  ld   $0a
              1ea4 004d  ld   $4d
              1ea5 0061  ld   $61
              1ea6 006e  ld   $6e
              1ea7 0064  ld   $64
              1ea8 0065  ld   $65
              1ea9 006c  ld   $6c
              1eaa 0062  ld   $62
              1eab 0072  ld   $72
              1eac 006f  ld   $6f
              1ead 0074  ld   $74
              1eae 0000  ld   $00
              1eaf 0005  ld   $05
              1eb0 0052  ld   $52
              1eb1 0061  ld   $61
              1eb2 0063  ld   $63
              1eb3 0065  ld   $65
              1eb4 0072  ld   $72
              1eb5 0000  ld   $00
              1eb6 0005  ld   $05
              1eb7 0053  ld   $53
              1eb8 006e  ld   $6e
              1eb9 0061  ld   $61
              1eba 006b  ld   $6b
              1ebb 0065  ld   $65
              1ebc 0000  ld   $00
              1ebd 0006  ld   $06
              1ebe 004c  ld   $4c
              1ebf 006f  ld   $6f
              1ec0 0061  ld   $61
              1ec1 0064  ld   $64
              1ec2 0065  ld   $65
              1ec3 0072  ld   $72
              1ec4 0000  ld   $00
              1ec5 0000  ld   $00
              1ec6 0000  ld   $00         ;End of Core/mainmenu_v5a.gt1, size 3566
                                          ;+-----------------------------------+
                                          ;| Apps/CardBoot/CardBoot.gt1        |
                                          ;+-----------------------------------+
              1ec7 dc4d  st   $4d,[y,x++] ;'M'
              1ec8 dc61  st   $61,[y,x++] ;'a'
              1ec9 dc69  st   $69,[y,x++] ;'i'
              1eca dc6e  st   $6e,[y,x++] ;'n'
              1ecb dc00  st   $00,[y,x++] ;'\x00'
              1ecc dc00  st   $00,[y,x++] ;'\x00'
              1ecd dc00  st   $00,[y,x++] ;'\x00'
              1ece dc00  st   $00,[y,x++] ;'\x00'
              1ecf 00d9  ld   $d9
              1ed0 c218  st   [$18]
              1ed1 0010  ld   $10
              1ed2 142a  ld   $2a,y
              1ed3 e058  jmp  y,$58
              1ed4 c219  st   [$19]
Boot:         1ed5 0002  ld   $02
              1ed6 0000  ld   $00
              1ed7 004c  ld   $4c
              1ed8 001a  ld   $1a
              1ed9 0021  ld   $21
              1eda 00e6  ld   $e6
              1edb 0040  ld   $40
              1edc 0035  ld   $35
              1edd 0053  ld   $53
              1ede 000b  ld   $0b
              1edf 0021  ld   $21
              1ee0 000e  ld   $0e
              1ee1 00f3  ld   $f3
              1ee2 0017  ld   $17
              1ee3 0090  ld   $90
              1ee4 0005  ld   $05
              1ee5 0011  ld   $11
              1ee6 0000  ld   $00
              1ee7 007d  ld   $7d
              1ee8 002b  ld   $2b
              1ee9 0030  ld   $30
              1eea 0011  ld   $11
              1eeb 00f9  ld   $f9
              1eec 0001  ld   $01
              1eed 002b  ld   $2b
              1eee 0032  ld   $32
              1eef 0059  ld   $59
              1ef0 0000  ld   $00
              1ef1 0085  ld   $85
              1ef2 00b1  ld   $b1
              1ef3 0072  ld   $72
              1ef4 0059  ld   $59
              1ef5 0020  ld   $20
              1ef6 00f0  ld   $f0
              1ef7 0032  ld   $32
              1ef8 0011  ld   $11
              1ef9 00e8  ld   $e8
              1efa 0001  ld   $01
              1efb fe00  bra  ac          ;+-----------------------------------+
              1efc fcfd  bra  $1efd       ;|                                   |
              1efd 1404  ld   $04,y       ;| Trampoline for page $1e00 lookups |
              1efe e068  jmp  y,$68       ;|                                   |
              1eff c218  st   [$18]       ;+-----------------------------------+
              1f00 002b  ld   $2b
              1f01 0034  ld   $34
              1f02 0059  ld   $59
              1f03 007b  ld   $7b
              1f04 00f0  ld   $f0
              1f05 0034  ld   $34
              1f06 0021  ld   $21
              1f07 0034  ld   $34
              1f08 00e3  ld   $e3
              1f09 0002  ld   $02
              1f0a 002b  ld   $2b
              1f0b 0034  ld   $34
              1f0c 0011  ld   $11
              1f0d 00f0  ld   $f0
              1f0e 0001  ld   $01
              1f0f 00fc  ld   $fc
              1f10 0034  ld   $34
              1f11 0035  ld   $35
              1f12 0072  ld   $72
              1f13 0023  ld   $23
              1f14 0011  ld   $11
              1f15 007c  ld   $7c
              1f16 0000  ld   $00
              1f17 005e  ld   $5e
              1f18 0027  ld   $27
              1f19 0059  ld   $59
              1f1a 00ff  ld   $ff
              1f1b 002b  ld   $2b
              1f1c 0025  ld   $25
              1f1d 0059  ld   $59
              1f1e 0000  ld   $00
              1f1f 005e  ld   $5e
              1f20 0024  ld   $24
              1f21 00b4  ld   $b4
              1f22 00f3  ld   $f3
              1f23 0011  ld   $11
              1f24 00a0  ld   $a0
              1f25 0058  ld   $58
              1f26 002b  ld   $2b
              1f27 001a  ld   $1a
              1f28 00ff  ld   $ff
              1f29 0058  ld   $58
              1f2a 00a0  ld   $a0
              1f2b 0042  ld   $42
              1f2c 00cd  ld   $cd
              1f2d 00c8  ld   $c8
              1f2e 0075  ld   $75
              1f2f 0059  ld   $59
              1f30 0000  ld   $00
              1f31 002b  ld   $2b
              1f32 0036  ld   $36
              1f33 0059  ld   $59
              1f34 000a  ld   $0a
              1f35 002b  ld   $2b
              1f36 0034  ld   $34
              1f37 0085  ld   $85
              1f38 00bc  ld   $bc
              1f39 005d  ld   $5d
              1f3a 0021  ld   $21
              1f3b 0034  ld   $34
              1f3c 00e6  ld   $e6
              1f3d 0001  ld   $01
              1f3e 0035  ld   $35
              1f3f 004d  ld   $4d
              1f40 00a7  ld   $a7
              1f41 0085  ld   $85
              1f42 00a2  ld   $a2
              1f43 005d  ld   $5d
              1f44 00cd  ld   $cd
              1f45 00be  ld   $be
              1f46 0040  ld   $40
              1f47 0000  ld   $00
              1f48 0000  ld   $00
              1f49 0000  ld   $00
              1f4a 0000  ld   $00
              1f4b 0095  ld   $95
              1f4c 0085  ld   $85
              1f4d 00a2  ld   $a2
              1f4e 005f  ld   $5f
              1f4f 0085  ld   $85
              1f50 00da  ld   $da
              1f51 005f  ld   $5f
              1f52 008c  ld   $8c
              1f53 0001  ld   $01
              1f54 0063  ld   $63
              1f55 00ff  ld   $ff
              1f56 00cd  ld   $cd
              1f57 00dd  ld   $dd
              1f58 0075  ld   $75
              1f59 0085  ld   $85
              1f5a 00a2  ld   $a2
              1f5b 0058  ld   $58
              1f5c 0035  ld   $35
              1f5d 003f  ld   $3f
              1f5e 00db  ld   $db
              1f5f 0085  ld   $85
              1f60 00af  ld   $af
              1f61 005d  ld   $5d
              1f62 001a  ld   $1a
              1f63 000e  ld   $0e
              1f64 00e6  ld   $e6
              1f65 003c  ld   $3c
              1f66 0035  ld   $35
              1f67 0050  ld   $50
              1f68 00cb  ld   $cb
              1f69 0063  ld   $63
              1f6a 00ff  ld   $ff
              1f6b 0093  ld   $93
              1f6c 001b  ld   $1b
              1f6d 00ff  ld   $ff
              1f6e 0059  ld   $59
              1f6f 00a0  ld   $a0
              1f70 0044  ld   $44
              1f71 00cd  ld   $cd
              1f72 00df  ld   $df
              1f73 0075  ld   $75
              1f74 0085  ld   $85
              1f75 00a2  ld   $a2
              1f76 005d  ld   $5d
              1f77 00cd  ld   $cd
              1f78 00ac  ld   $ac
              1f79 0048  ld   $48
              1f7a 0000  ld   $00
              1f7b 0000  ld   $00
              1f7c 0001  ld   $01
              1f7d 00aa  ld   $aa
              1f7e 0087  ld   $87
              1f7f 0085  ld   $85
              1f80 00a2  ld   $a2
              1f81 005f  ld   $5f
              1f82 0085  ld   $85
              1f83 00da  ld   $da
              1f84 005f  ld   $5f
              1f85 008c  ld   $8c
              1f86 00ff  ld   $ff
              1f87 0035  ld   $35
              1f88 003f  ld   $3f
              1f89 00d9  ld   $d9
              1f8a 0021  ld   $21
              1f8b 0038  ld   $38
              1f8c 0082  ld   $82
              1f8d 0004  ld   $04
              1f8e 0035  ld   $35
              1f8f 003f  ld   $3f
              1f90 00c4  ld   $c4
              1f91 0059  ld   $59
              1f92 0001  ld   $01
              1f93 002b  ld   $2b
              1f94 0036  ld   $36
              1f95 0090  ld   $90
              1f96 00d9  ld   $d9
              1f97 0085  ld   $85
              1f98 00bc  ld   $bc
              1f99 005d  ld   $5d
              1f9a 0085  ld   $85
              1f9b 00bc  ld   $bc
              1f9c 005d  ld   $5d
              1f9d 0085  ld   $85
              1f9e 00bc  ld   $bc
              1f9f 005d  ld   $5d
              1fa0 0085  ld   $85
              1fa1 00bc  ld   $bc
              1fa2 005d  ld   $5d
              1fa3 008c  ld   $8c
              1fa4 00aa  ld   $aa
              1fa5 0035  ld   $35
              1fa6 0072  ld   $72
              1fa7 00d9  ld   $d9
              1fa8 0059  ld   $59
              1fa9 0002  ld   $02
              1faa 002b  ld   $2b
              1fab 0036  ld   $36
              1fac 0021  ld   $21
              1fad 0038  ld   $38
              1fae 0082  ld   $82
              1faf 00fa  ld   $fa
              1fb0 0063  ld   $63
              1fb1 00ff  ld   $ff
              1fb2 0093  ld   $93
              1fb3 001b  ld   $1b
              1fb4 00ff  ld   $ff
              1fb5 005a  ld   $5a
              1fb6 00a0  ld   $a0
              1fb7 0044  ld   $44
              1fb8 00cd  ld   $cd
              1fb9 00ca  ld   $ca
              1fba 0075  ld   $75
              1fbb 0085  ld   $85
              1fbc 00a2  ld   $a2
              1fbd 005d  ld   $5d
              1fbe 00cd  ld   $cd
              1fbf 00ac  ld   $ac
              1fc0 007a  ld   $7a
              1fc1 0000  ld   $00
              1fc2 0000  ld   $00
              1fc3 0000  ld   $00
              * 5 times
              1fc6 0085  ld   $85
              1fc7 00a2  ld   $a2
              1fc8 005f  ld   $5f
              1fc9 0085  ld   $85
              1fca 00da  ld   $da
              1fcb 005f  ld   $5f
              1fcc 0085  ld   $85
              1fcd 00bc  ld   $bc
              1fce 005d  ld   $5d
              1fcf 0082  ld   $82
              1fd0 0040  ld   $40
              1fd1 0035  ld   $35
              1fd2 003f  ld   $3f
              1fd3 00be  ld   $be
              1fd4 0059  ld   $59
              1fd5 0004  ld   $04
              1fd6 002b  ld   $2b
              1fd7 0036  ld   $36
              1fd8 0085  ld   $85
              1fd9 00bc  ld   $bc
              1fda 005d  ld   $5d
              1fdb 0085  ld   $85
              1fdc 00bc  ld   $bc
              1fdd 005d  ld   $5d
              1fde 0021  ld   $21
              1fdf 0038  ld   $38
              1fe0 0082  ld   $82
              1fe1 00fe  ld   $fe
              1fe2 0063  ld   $63
              1fe3 00ff  ld   $ff
              1fe4 00cd  ld   $cd
              1fe5 00df  ld   $df
              1fe6 0075  ld   $75
              1fe7 00cd  ld   $cd
              1fe8 00d5  ld   $d5
              1fe9 0077  ld   $77
              1fea 0000  ld   $00
              1feb 0000  ld   $00
              1fec 0000  ld   $00
              * 5 times
              1fef 0085  ld   $85
              1ff0 00a2  ld   $a2
              1ff1 005f  ld   $5f
              1ff2 0085  ld   $85
              1ff3 00da  ld   $da
              1ff4 005f  ld   $5f
              1ff5 0082  ld   $82
              1ff6 00fe  ld   $fe
              1ff7 0063  ld   $63
              1ff8 00ff  ld   $ff
              1ff9 0093  ld   $93
              1ffa 001b  ld   $1b
              1ffb fe00  bra  ac          ;+-----------------------------------+
              1ffc fcfd  bra  $1ffd       ;|                                   |
              1ffd 1404  ld   $04,y       ;| Trampoline for page $1f00 lookups |
              1ffe e068  jmp  y,$68       ;|                                   |
              1fff c218  st   [$18]       ;+-----------------------------------+
              2000 00ff  ld   $ff
              2001 005b  ld   $5b
              2002 00a0  ld   $a0
              2003 0055  ld   $55
              2004 00cd  ld   $cd
              2005 00c4  ld   $c4
              2006 0075  ld   $75
              2007 0021  ld   $21
              2008 0036  ld   $36
              2009 008c  ld   $8c
              200a 0001  ld   $01
              200b 0035  ld   $35
              200c 0072  ld   $72
              200d 00b2  ld   $b2
              200e 00cd  ld   $cd
              200f 00b0  ld   $b0
              2010 0069  ld   $69
              2011 0000  ld   $00
              2012 0000  ld   $00
              2013 0000  ld   $00
              * 5 times
              2016 0090  ld   $90
              2017 00ba  ld   $ba
              2018 00cd  ld   $cd
              2019 00ba  ld   $ba
              201a 0069  ld   $69
              201b 0040  ld   $40
              201c 0000  ld   $00
              201d 0000  ld   $00
              201e 0000  ld   $00
              201f 0000  ld   $00
              2020 0085  ld   $85
              2021 00a2  ld   $a2
              2022 005f  ld   $5f
              2023 0085  ld   $85
              2024 00da  ld   $da
              2025 005f  ld   $5f
              2026 0082  ld   $82
              2027 00fe  ld   $fe
              2028 0063  ld   $63
              2029 00ff  ld   $ff
              202a 00cd  ld   $cd
              202b 00db  ld   $db
              202c 0075  ld   $75
              202d 0085  ld   $85
              202e 00ce  ld   $ce
              202f 005a  ld   $5a
              2030 0085  ld   $85
              2031 00a2  ld   $a2
              2032 005b  ld   $5b
              2033 0021  ld   $21
              2034 0038  ld   $38
              2035 0035  ld   $35
              2036 003f  ld   $3f
              2037 00d9  ld   $d9
              2038 001a  ld   $1a
              2039 000e  ld   $0e
              203a 00e6  ld   $e6
              203b 0078  ld   $78
              203c 0035  ld   $35
              203d 0050  ld   $50
              203e 00c7  ld   $c7
              203f 0063  ld   $63
              2040 00ff  ld   $ff
              2041 00cd  ld   $cd
              2042 00f0  ld   $f0
              2043 0075  ld   $75
              2044 00cd  ld   $cd
              2045 00e6  ld   $e6
              2046 0050  ld   $50
              2047 0000  ld   $00
              2048 0000  ld   $00
              2049 0002  ld   $02
              204a 0000  ld   $00
              204b 0000  ld   $00
              204c 0085  ld   $85
              204d 00a2  ld   $a2
              204e 005f  ld   $5f
              204f 0085  ld   $85
              2050 00da  ld   $da
              2051 005f  ld   $5f
              2052 0082  ld   $82
              2053 00fe  ld   $fe
              2054 0063  ld   $63
              2055 00ff  ld   $ff
              2056 0093  ld   $93
              2057 001b  ld   $1b
              2058 00ff  ld   $ff
              2059 005c  ld   $5c
              205a 00a0  ld   $a0
              205b 0041  ld   $41
              205c 00cd  ld   $cd
              205d 00dc  ld   $dc
              205e 0075  ld   $75
              205f 00cd  ld   $cd
              2060 00a9  ld   $a9
              2061 0051  ld   $51
              2062 0000  ld   $00
              2063 0000  ld   $00
              2064 0000  ld   $00
              * 5 times
              2067 002b  ld   $2b
              2068 003a  ld   $3a
              2069 002b  ld   $2b
              206a 003c  ld   $3c
              206b 001a  ld   $1a
              206c 003f  ld   $3f
              206d 0093  ld   $93
              206e 003c  ld   $3c
              206f 00f0  ld   $f0
              2070 003c  ld   $3c
              2071 001a  ld   $1a
              2072 003e  ld   $3e
              2073 0093  ld   $93
              2074 003c  ld   $3c
              2075 00f0  ld   $f0
              2076 003c  ld   $3c
              2077 001a  ld   $1a
              2078 0041  ld   $41
              2079 0093  ld   $93
              207a 003c  ld   $3c
              207b 00f0  ld   $f0
              207c 003c  ld   $3c
              207d 001a  ld   $1a
              207e 0040  ld   $40
              207f 0093  ld   $93
              2080 003c  ld   $3c
              2081 00f0  ld   $f0
              2082 003c  ld   $3c
              2083 0021  ld   $21
              2084 003a  ld   $3a
              2085 0085  ld   $85
              2086 00a2  ld   $a2
              2087 005f  ld   $5f
              2088 0085  ld   $85
              2089 00da  ld   $da
              208a 005f  ld   $5f
              208b 0082  ld   $82
              208c 00fe  ld   $fe
              208d 0035  ld   $35
              208e 0072  ld   $72
              208f 00da  ld   $da
              2090 0085  ld   $85
              2091 00bc  ld   $bc
              2092 005d  ld   $5d
              2093 008c  ld   $8c
              2094 00ff  ld   $ff
              2095 0035  ld   $35
              2096 003f  ld   $3f
              2097 00d2  ld   $d2
              2098 0063  ld   $63
              2099 00ff  ld   $ff
              209a 0093  ld   $93
              209b 001b  ld   $1b
              209c 00ff  ld   $ff
              209d 005d  ld   $5d
              209e 00a0  ld   $a0
              209f 0035  ld   $35
              20a0 00cd  ld   $cd
              20a1 00ab  ld   $ab
              20a2 0011  ld   $11
              20a3 0009  ld   $09
              20a4 000b  ld   $0b
              20a5 002b  ld   $2b
              20a6 0022  ld   $22
              20a7 0011  ld   $11
              20a8 0078  ld   $78
              20a9 0080  ld   $80
              20aa 00b4  ld   $b4
              20ab 00fa  ld   $fa
              20ac 00ff  ld   $ff
              20ad 00cd  ld   $cd
              20ae 00b8  ld   $b8
              20af 0011  ld   $11
              20b0 0009  ld   $09
              20b1 000b  ld   $0b
              20b2 002b  ld   $2b
              20b3 0022  ld   $22
              20b4 0011  ld   $11
              20b5 007c  ld   $7c
              20b6 0080  ld   $80
              20b7 00b4  ld   $b4
              20b8 00fa  ld   $fa
              20b9 00ff  ld   $ff
              20ba 00cd  ld   $cd
              20bb 00d0  ld   $d0
              20bc 0059  ld   $59
              20bd 00ff  ld   $ff
              20be 005e  ld   $5e
              20bf 002a  ld   $2a
              20c0 0059  ld   $59
              20c1 002a  ld   $2a
              20c2 002b  ld   $2b
              20c3 0024  ld   $24
              20c4 00e3  ld   $e3
              20c5 0001  ld   $01
              20c6 002b  ld   $2b
              20c7 0026  ld   $26
              20c8 0011  ld   $11
              20c9 0015  ld   $15
              20ca 000b  ld   $0b
              20cb 002b  ld   $2b
              20cc 0022  ld   $22
              20cd 00b4  ld   $b4
              20ce 00cb  ld   $cb
              20cf 001a  ld   $1a
              20d0 002a  ld   $2a
              20d1 00ff  ld   $ff
              20d2 0093  ld   $93
              20d3 001b  ld   $1b
              20d4 00ff  ld   $ff
              20d5 005e  ld   $5e
              20d6 00a0  ld   $a0
              20d7 0029  ld   $29
              20d8 00cd  ld   $cd
              20d9 00c4  ld   $c4
              20da 00fc  ld   $fc
              20db 0043  ld   $43
              20dc 005e  ld   $5e
              20dd 0043  ld   $43
              20de 0059  ld   $59
              20df 0008  ld   $08
              20e0 002b  ld   $2b
              20e1 0034  ld   $34
              20e2 0021  ld   $21
              20e3 0042  ld   $42
              20e4 0035  ld   $35
              20e5 0053  ld   $53
              20e6 00b8  ld   $b8
              20e7 0099  ld   $99
              20e8 0042  ld   $42
              20e9 002b  ld   $2b
              20ea 0042  ld   $42
              20eb 0011  ld   $11
              20ec 0021  ld   $21
              20ed 0010  ld   $10
              20ee 00fc  ld   $fc
              20ef 0042  ld   $42
              20f0 0090  ld   $90
              20f1 00ba  ld   $ba
              20f2 0099  ld   $99
              20f3 0042  ld   $42
              20f4 002b  ld   $2b
              20f5 0042  ld   $42
              20f6 0021  ld   $21
              20f7 0034  ld   $34
              20f8 00e6  ld   $e6
              20f9 0001  ld   $01
              20fa 0035  ld   $35
              20fb fe00  bra  ac          ;+-----------------------------------+
              20fc fcfd  bra  $20fd       ;|                                   |
              20fd 1404  ld   $04,y       ;| Trampoline for page $2000 lookups |
              20fe e068  jmp  y,$68       ;|                                   |
              20ff c218  st   [$18]       ;+-----------------------------------+
              2100 004d  ld   $4d
              2101 00a6  ld   $a6
              2102 00ff  ld   $ff
              2103 0093  ld   $93
              2104 001b  ld   $1b
              2105 00ff  ld   $ff
              2106 005f  ld   $5f
              2107 00a0  ld   $a0
              2108 0057  ld   $57
              2109 00cd  ld   $cd
              210a 00d6  ld   $d6
              210b 0075  ld   $75
              210c 002b  ld   $2b
              210d 003a  ld   $3a
              210e 0021  ld   $21
              210f 0044  ld   $44
              2110 002b  ld   $2b
              2111 003c  ld   $3c
              2112 0059  ld   $59
              2113 00ff  ld   $ff
              2114 00f0  ld   $f0
              2115 003c  ld   $3c
              2116 0093  ld   $93
              2117 003c  ld   $3c
              2118 00f0  ld   $f0
              2119 003c  ld   $3c
              211a 0093  ld   $93
              211b 003c  ld   $3c
              211c 0059  ld   $59
              211d 0006  ld   $06
              211e 002b  ld   $2b
              211f 0034  ld   $34
              2120 0021  ld   $21
              2121 003a  ld   $3a
              2122 00ad  ld   $ad
              2123 0093  ld   $93
              2124 003a  ld   $3a
              2125 00f0  ld   $f0
              2126 003c  ld   $3c
              2127 0093  ld   $93
              2128 003c  ld   $3c
              2129 0021  ld   $21
              212a 0034  ld   $34
              212b 00e6  ld   $e6
              212c 0001  ld   $01
              212d 0035  ld   $35
              212e 004d  ld   $4d
              212f 00b3  ld   $b3
              2130 0021  ld   $21
              2131 0044  ld   $44
              2132 002b  ld   $2b
              2133 0024  ld   $24
              2134 00e3  ld   $e3
              2135 0008  ld   $08
              2136 002b  ld   $2b
              2137 0026  ld   $26
              2138 0011  ld   $11
              2139 0015  ld   $15
              213a 000b  ld   $0b
              213b 002b  ld   $2b
              213c 0022  ld   $22
              213d 00b4  ld   $b4
              213e 00cb  ld   $cb
              213f 0063  ld   $63
              2140 00ff  ld   $ff
              2141 00cd  ld   $cd
              2142 00f2  ld   $f2
              2143 0075  ld   $75
              2144 0059  ld   $59
              2145 0008  ld   $08
              2146 002b  ld   $2b
              2147 0034  ld   $34
              2148 0085  ld   $85
              2149 00bc  ld   $bc
              214a 005d  ld   $5d
              214b 0082  ld   $82
              214c 0080  ld   $80
              214d 0035  ld   $35
              214e 003f  ld   $3f
              214f 00ec  ld   $ec
              2150 0021  ld   $21
              2151 0034  ld   $34
              2152 00e6  ld   $e6
              2153 0001  ld   $01
              2154 0035  ld   $35
              2155 004d  ld   $4d
              2156 00db  ld   $db
              2157 001a  ld   $1a
              2158 002a  ld   $2a
              2159 002b  ld   $2b
              215a 0038  ld   $38
              215b 0063  ld   $63
              215c 00ff  ld   $ff
              215d 0093  ld   $93
              215e 001b  ld   $1b
              215f 00ff  ld   $ff
              2160 0060  ld   $60
              2161 00a0  ld   $a0
              2162 004f  ld   $4f
              2163 00cd  ld   $cd
              2164 00c3  ld   $c3
              2165 0075  ld   $75
              2166 0085  ld   $85
              2167 00cc  ld   $cc
              2168 0058  ld   $58
              2169 0085  ld   $85
              216a 00a2  ld   $a2
              216b 0059  ld   $59
              216c 0085  ld   $85
              216d 00c8  ld   $c8
              216e 005b  ld   $5b
              216f 0021  ld   $21
              2170 0036  ld   $36
              2171 00e6  ld   $e6
              2172 0002  ld   $02
              2173 0035  ld   $35
              2174 0072  ld   $72
              2175 00b4  ld   $b4
              2176 0085  ld   $85
              2177 00a2  ld   $a2
              2178 005a  ld   $5a
              2179 0021  ld   $21
              217a 0036  ld   $36
              217b 00e6  ld   $e6
              217c 0002  ld   $02
              217d 0035  ld   $35
              217e 004d  ld   $4d
              217f 00be  ld   $be
              2180 0085  ld   $85
              2181 00df  ld   $df
              2182 005b  ld   $5b
              2183 0085  ld   $85
              2184 00af  ld   $af
              2185 005d  ld   $5d
              2186 0063  ld   $63
              2187 00ff  ld   $ff
              2188 00cd  ld   $cd
              2189 00ea  ld   $ea
              218a 0075  ld   $75
              218b 0085  ld   $85
              218c 00a2  ld   $a2
              218d 0063  ld   $63
              218e 00cd  ld   $cd
              218f 00d3  ld   $d3
              2190 0056  ld   $56
              2191 006f  ld   $6f
              2192 006c  ld   $6c
              2193 002e  ld   $2e
              2194 0049  ld   $49
              2195 0044  ld   $44
              2196 0020  ld   $20
              2197 0000  ld   $00
              2198 0085  ld   $85
              2199 00a2  ld   $a2
              219a 0069  ld   $69
              219b 0059  ld   $59
              219c 000b  ld   $0b
              219d 0099  ld   $99
              219e 0030  ld   $30
              219f 00f6  ld   $f6
              21a0 002b  ld   $2b
              21a1 0046  ld   $46
              21a2 0085  ld   $85
              21a3 00ce  ld   $ce
              21a4 0067  ld   $67
              21a5 0011  ld   $11
              21a6 0000  ld   $00
              21a7 0002  ld   $02
              21a8 00fc  ld   $fc
              21a9 0046  ld   $46
              21aa 0085  ld   $85
              21ab 00bb  ld   $bb
              21ac 0068  ld   $68
              21ad 0063  ld   $63
              21ae 00ff  ld   $ff
              21af 0093  ld   $93
              21b0 001b  ld   $1b
              21b1 00ff  ld   $ff
              21b2 0061  ld   $61
              21b3 00a0  ld   $a0
              21b4 005e  ld   $5e
              21b5 00cd  ld   $cd
              21b6 00ea  ld   $ea
              21b7 0075  ld   $75
              21b8 0059  ld   $59
              21b9 0000  ld   $00
              21ba 002b  ld   $2b
              21bb 0040  ld   $40
              21bc 002b  ld   $2b
              21bd 003e  ld   $3e
              21be 0085  ld   $85
              21bf 00a2  ld   $a2
              21c0 0063  ld   $63
              21c1 00cd  ld   $cd
              21c2 00b1  ld   $b1
              21c3 004d  ld   $4d
              21c4 0042  ld   $42
              21c5 0052  ld   $52
              21c6 0020  ld   $20
              21c7 0000  ld   $00
              21c8 0085  ld   $85
              21c9 00a2  ld   $a2
              21ca 0069  ld   $69
              21cb 0011  ld   $11
              21cc 00fe  ld   $fe
              21cd 0001  ld   $01
              21ce 0099  ld   $99
              21cf 0030  ld   $30
              21d0 00f6  ld   $f6
              21d1 002b  ld   $2b
              21d2 0046  ld   $46
              21d3 0011  ld   $11
              21d4 0055  ld   $55
              21d5 00aa  ld   $aa
              21d6 00fc  ld   $fc
              21d7 0046  ld   $46
              21d8 0035  ld   $35
              21d9 0072  ld   $72
              21da 00e8  ld   $e8
              21db 0011  ld   $11
              21dc 00c6  ld   $c6
              21dd 0001  ld   $01
              21de 0099  ld   $99
              21df 0030  ld   $30
              21e0 00f6  ld   $f6
              21e1 002b  ld   $2b
              21e2 0040  ld   $40
              21e3 0011  ld   $11
              21e4 00c8  ld   $c8
              21e5 0001  ld   $01
              21e6 0099  ld   $99
              21e7 0030  ld   $30
              21e8 00f6  ld   $f6
              21e9 002b  ld   $2b
              21ea 003e  ld   $3e
              21eb 0011  ld   $11
              21ec 00c2  ld   $c2
              21ed 0001  ld   $01
              21ee 0099  ld   $99
              21ef 0030  ld   $30
              21f0 00ad  ld   $ad
              21f1 002b  ld   $2b
              21f2 0046  ld   $46
              21f3 0085  ld   $85
              21f4 00a2  ld   $a2
              21f5 0068  ld   $68
              21f6 0059  ld   $59
              21f7 000b  ld   $0b
              21f8 00fc  ld   $fc
              21f9 0046  ld   $46
              21fa 0035  ld   $35
              21fb fe00  bra  ac          ;+-----------------------------------+
              21fc fcfd  bra  $21fd       ;|                                   |
              21fd 1404  ld   $04,y       ;| Trampoline for page $2100 lookups |
              21fe e068  jmp  y,$68       ;|                                   |
              21ff c218  st   [$18]       ;+-----------------------------------+
              2200 003f  ld   $3f
              2201 00e8  ld   $e8
              2202 008c  ld   $8c
              2203 0007  ld   $07
              2204 0063  ld   $63
              2205 00ff  ld   $ff
              2206 00cd  ld   $cd
              2207 00f9  ld   $f9
              2208 002b  ld   $2b
              2209 0048  ld   $48
              220a 0099  ld   $99
              220b 0048  ld   $48
              220c 00e6  ld   $e6
              220d 0001  ld   $01
              220e 005e  ld   $5e
              220f 0019  ld   $19
              2210 0088  ld   $88
              2211 00ff  ld   $ff
              2212 002b  ld   $2b
              2213 004a  ld   $4a
              2214 00ff  ld   $ff
              2215 0093  ld   $93
              2216 001b  ld   $1b
              2217 00ff  ld   $ff
              2218 0062  ld   $62
              2219 00a0  ld   $a0
              221a 0060  ld   $60
              221b 00cd  ld   $cd
              221c 00fb  ld   $fb
              221d 0075  ld   $75
              221e 0059  ld   $59
              221f 000d  ld   $0d
              2220 0099  ld   $99
              2221 0030  ld   $30
              2222 00ad  ld   $ad
              2223 0085  ld   $85
              2224 00ee  ld   $ee
              2225 0061  ld   $61
              2226 0021  ld   $21
              2227 0040  ld   $40
              2228 002b  ld   $2b
              2229 004c  ld   $4c
              222a 0021  ld   $21
              222b 003e  ld   $3e
              222c 002b  ld   $2b
              222d 004e  ld   $4e
              222e 0059  ld   $59
              222f 000e  ld   $0e
              2230 0099  ld   $99
              2231 0030  ld   $30
              2232 00f6  ld   $f6
              2233 002b  ld   $2b
              2234 0050  ld   $50
              2235 0085  ld   $85
              2236 00d2  ld   $d2
              2237 0066  ld   $66
              2238 002b  ld   $2b
              2239 0052  ld   $52
              223a 0021  ld   $21
              223b 004e  ld   $4e
              223c 002b  ld   $2b
              223d 0054  ld   $54
              223e 0059  ld   $59
              223f 0024  ld   $24
              2240 0099  ld   $99
              2241 0030  ld   $30
              2242 00f6  ld   $f6
              2243 002b  ld   $2b
              2244 0050  ld   $50
              2245 0059  ld   $59
              2246 0026  ld   $26
              2247 0099  ld   $99
              2248 0030  ld   $30
              2249 00f6  ld   $f6
              224a 002b  ld   $2b
              224b 0056  ld   $56
              224c 0085  ld   $85
              224d 00d6  ld   $d6
              224e 0066  ld   $66
              224f 0085  ld   $85
              2250 00d6  ld   $d6
              2251 0066  ld   $66
              2252 0059  ld   $59
              2253 0000  ld   $00
              2254 00b8  ld   $b8
              2255 0048  ld   $48
              2256 00b8  ld   $b8
              2257 0048  ld   $48
              2258 002b  ld   $2b
              2259 0050  ld   $50
              225a 0011  ld   $11
              225b 00ff  ld   $ff
              225c 00ff  ld   $ff
              225d 002b  ld   $2b
              225e 0056  ld   $56
              225f 0085  ld   $85
              2260 00d6  ld   $d6
              2261 0066  ld   $66
              2262 002b  ld   $2b
              2263 0058  ld   $58
              2264 0021  ld   $21
              2265 004e  ld   $4e
              2266 002b  ld   $2b
              2267 005a  ld   $5a
              2268 0059  ld   $59
              2269 002c  ld   $2c
              226a 0099  ld   $99
              226b 0030  ld   $30
              226c 00f6  ld   $f6
              226d 002b  ld   $2b
              226e 005c  ld   $5c
              226f 0059  ld   $59
              2270 002e  ld   $2e
              2271 0099  ld   $99
              2272 0030  ld   $30
              2273 00f6  ld   $f6
              2274 002b  ld   $2b
              2275 005e  ld   $5e
              2276 0063  ld   $63
              2277 00ff  ld   $ff
              2278 0093  ld   $93
              2279 001b  ld   $1b
              227a 00ff  ld   $ff
              227b 0063  ld   $63
              227c 00a0  ld   $a0
              227d 003e  ld   $3e
              227e 00cd  ld   $cd
              227f 00d9  ld   $d9
              2280 0075  ld   $75
              2281 0085  ld   $85
              2282 00a2  ld   $a2
              2283 005d  ld   $5d
              2284 0021  ld   $21
              2285 0036  ld   $36
              2286 00e6  ld   $e6
              2287 0002  ld   $02
              2288 0035  ld   $35
              2289 004d  ld   $4d
              228a 00ae  ld   $ae
              228b 0085  ld   $85
              228c 00a2  ld   $a2
              228d 0066  ld   $66
              228e 0085  ld   $85
              228f 00a2  ld   $a2
              2290 005c  ld   $5c
              2291 001a  ld   $1a
              2292 002a  ld   $2a
              2293 008c  ld   $8c
              2294 00fe  ld   $fe
              2295 0035  ld   $35
              2296 0072  ld   $72
              2297 00d7  ld   $d7
              2298 0011  ld   $11
              2299 0015  ld   $15
              229a 000b  ld   $0b
              229b 002b  ld   $2b
              229c 0022  ld   $22
              229d 0011  ld   $11
              229e 0000  ld   $00
              229f 007c  ld   $7c
              22a0 002b  ld   $2b
              22a1 0024  ld   $24
              22a2 0021  ld   $21
              22a3 0030  ld   $30
              22a4 002b  ld   $2b
              22a5 0026  ld   $26
              22a6 00b4  ld   $b4
              22a7 00cb  ld   $cb
              22a8 0093  ld   $93
              22a9 0027  ld   $27
              22aa 00b4  ld   $b4
              22ab 00cb  ld   $cb
              22ac 0085  ld   $85
              22ad 00bc  ld   $bc
              22ae 005d  ld   $5d
              22af 0085  ld   $85
              22b0 00bc  ld   $bc
              22b1 005d  ld   $5d
              22b2 0085  ld   $85
              22b3 00af  ld   $af
              22b4 005d  ld   $5d
              22b5 0059  ld   $59
              22b6 0000  ld   $00
              22b7 0063  ld   $63
              22b8 00ff  ld   $ff
              22b9 0093  ld   $93
              22ba 001b  ld   $1b
              22bb 00ff  ld   $ff
              22bc 0064  ld   $64
              22bd 00a0  ld   $a0
              22be 0050  ld   $50
              22bf 00cd  ld   $cd
              22c0 00eb  ld   $eb
              22c1 0075  ld   $75
              22c2 0021  ld   $21
              22c3 0060  ld   $60
              22c4 00fc  ld   $fc
              22c5 0062  ld   $62
              22c6 0035  ld   $35
              22c7 0072  ld   $72
              22c8 00ae  ld   $ae
              22c9 0021  ld   $21
              22ca 0064  ld   $64
              22cb 00fc  ld   $fc
              22cc 0066  ld   $66
              22cd 001a  ld   $1a
              22ce 0019  ld   $19
              22cf 0035  ld   $35
              22d0 0072  ld   $72
              22d1 00b5  ld   $b5
              22d2 0021  ld   $21
              22d3 0066  ld   $66
              22d4 0090  ld   $90
              22d5 00bb  ld   $bb
              22d6 0021  ld   $21
              22d7 0064  ld   $64
              22d8 0088  ld   $88
              22d9 00ff  ld   $ff
              22da 00e3  ld   $e3
              22db 0001  ld   $01
              22dc 00b8  ld   $b8
              22dd 0064  ld   $64
              22de 002b  ld   $2b
              22df 0068  ld   $68
              22e0 0035  ld   $35
              22e1 003f  ld   $3f
              22e2 00e5  ld   $e5
              22e3 0011  ld   $11
              22e4 00ff  ld   $ff
              22e5 0001  ld   $01
              22e6 00f8  ld   $f8
              22e7 0064  ld   $64
              22e8 0035  ld   $35
              22e9 003f  ld   $3f
              22ea 00ce  ld   $ce
              22eb 0099  ld   $99
              22ec 0030  ld   $30
              22ed 0090  ld   $90
              22ee 00e5  ld   $e5
              22ef 0085  ld   $85
              22f0 00a2  ld   $a2
              22f1 0063  ld   $63
              22f2 0035  ld   $35
              22f3 0072  ld   $72
              22f4 00db  ld   $db
              22f5 0085  ld   $85
              22f6 00a2  ld   $a2
              22f7 0075  ld   $75
              22f8 0021  ld   $21
              22f9 0030  ld   $30
              22fa 0090  ld   $90
              22fb fe00  bra  ac          ;+-----------------------------------+
              22fc fcfd  bra  $22fd       ;|                                   |
              22fd 1404  ld   $04,y       ;| Trampoline for page $2200 lookups |
              22fe e068  jmp  y,$68       ;|                                   |
              22ff c218  st   [$18]       ;+-----------------------------------+
              2300 00e5  ld   $e5
              2301 0021  ld   $21
              2302 0060  ld   $60
              2303 002b  ld   $2b
              2304 0062  ld   $62
              2305 0021  ld   $21
              2306 0064  ld   $64
              2307 002b  ld   $2b
              2308 0066  ld   $66
              2309 0059  ld   $59
              230a 0000  ld   $00
              230b 002b  ld   $2b
              230c 006a  ld   $6a
              230d 0021  ld   $21
              230e 0068  ld   $68
              230f 0063  ld   $63
              2310 00ff  ld   $ff
              2311 0093  ld   $93
              2312 001b  ld   $1b
              2313 00ff  ld   $ff
              2314 0065  ld   $65
              2315 00a0  ld   $a0
              2316 0060  ld   $60
              2317 00cd  ld   $cd
              2318 00cb  ld   $cb
              2319 0075  ld   $75
              231a 0059  ld   $59
              231b 0000  ld   $00
              231c 002b  ld   $2b
              231d 0064  ld   $64
              231e 002b  ld   $2b
              231f 0060  ld   $60
              2320 0021  ld   $21
              2321 003a  ld   $3a
              2322 00e3  ld   $e3
              2323 001c  ld   $1c
              2324 00f6  ld   $f6
              2325 002b  ld   $2b
              2326 0066  ld   $66
              2327 0021  ld   $21
              2328 003a  ld   $3a
              2329 00e3  ld   $e3
              232a 001e  ld   $1e
              232b 00f6  ld   $f6
              232c 002b  ld   $2b
              232d 0062  ld   $62
              232e 0021  ld   $21
              232f 003a  ld   $3a
              2330 00e3  ld   $e3
              2331 001a  ld   $1a
              2332 00f6  ld   $f6
              2333 002b  ld   $2b
              2334 004c  ld   $4c
              2335 0021  ld   $21
              2336 003a  ld   $3a
              2337 00e3  ld   $e3
              2338 0014  ld   $14
              2339 00f6  ld   $f6
              233a 002b  ld   $2b
              233b 004e  ld   $4e
              233c 0085  ld   $85
              233d 00a2  ld   $a2
              233e 0076  ld   $76
              233f 0085  ld   $85
              2340 00cf  ld   $cf
              2341 0065  ld   $65
              2342 0063  ld   $63
              2343 00ff  ld   $ff
              2344 00cd  ld   $cd
              2345 00fb  ld   $fb
              2346 0075  ld   $75
              2347 001a  ld   $1a
              2348 004f  ld   $4f
              2349 0082  ld   $82
              234a 000f  ld   $0f
              234b 005e  ld   $5e
              234c 004f  ld   $4f
              234d 0059  ld   $59
              234e 0001  ld   $01
              234f 002b  ld   $2b
              2350 0046  ld   $46
              2351 00b8  ld   $b8
              2352 0048  ld   $48
              2353 0035  ld   $35
              2354 0053  ld   $53
              2355 00e6  ld   $e6
              2356 0085  ld   $85
              2357 00c2  ld   $c2
              2358 0066  ld   $66
              2359 0021  ld   $21
              235a 0046  ld   $46
              235b 0099  ld   $99
              235c 0046  ld   $46
              235d 0090  ld   $90
              235e 00d6  ld   $d6
              235f 0021  ld   $21
              2360 0058  ld   $58
              2361 002b  ld   $2b
              2362 0050  ld   $50
              2363 0021  ld   $21
              2364 005a  ld   $5a
              2365 002b  ld   $2b
              2366 0056  ld   $56
              2367 0085  ld   $85
              2368 00d6  ld   $d6
              2369 0066  ld   $66
              236a 0021  ld   $21
              236b 004c  ld   $4c
              236c 002b  ld   $2b
              236d 0040  ld   $40
              236e 0021  ld   $21
              236f 004e  ld   $4e
              2370 002b  ld   $2b
              2371 003e  ld   $3e
              2372 0063  ld   $63
              2373 00ff  ld   $ff
              2374 0093  ld   $93
              2375 001b  ld   $1b
              2376 00ff  ld   $ff
              2377 0066  ld   $66
              2378 00a0  ld   $a0
              2379 005f  ld   $5f
              237a 00cd  ld   $cd
              237b 00be  ld   $be
              237c 0075  ld   $75
              237d 0059  ld   $59
              237e 0000  ld   $00
              237f 005e  ld   $5e
              2380 0050  ld   $50
              2381 001a  ld   $1a
              2382 004c  ld   $4c
              2383 005e  ld   $5e
              2384 0051  ld   $51
              2385 001a  ld   $1a
              2386 004d  ld   $4d
              2387 005e  ld   $5e
              2388 0056  ld   $56
              2389 001a  ld   $1a
              238a 004e  ld   $4e
              238b 005e  ld   $5e
              238c 0057  ld   $57
              238d 0021  ld   $21
              238e 0050  ld   $50
              238f 002b  ld   $2b
              2390 004c  ld   $4c
              2391 0021  ld   $21
              2392 0056  ld   $56
              2393 002b  ld   $2b
              2394 004e  ld   $4e
              2395 0085  ld   $85
              2396 00d6  ld   $d6
              2397 0066  ld   $66
              2398 0063  ld   $63
              2399 00ff  ld   $ff
              239a 00cd  ld   $cd
              239b 00fa  ld   $fa
              239c 0075  ld   $75
              239d 0021  ld   $21
              239e 004c  ld   $4c
              239f 002b  ld   $2b
              23a0 0050  ld   $50
              23a1 0021  ld   $21
              23a2 004e  ld   $4e
              23a3 002b  ld   $2b
              23a4 0056  ld   $56
              23a5 0085  ld   $85
              23a6 00d6  ld   $d6
              23a7 0066  ld   $66
              23a8 0021  ld   $21
              23a9 0056  ld   $56
              23aa 0063  ld   $63
              23ab 00ff  ld   $ff
              23ac 0059  ld   $59
              23ad 0000  ld   $00
              23ae 002b  ld   $2b
              23af 0056  ld   $56
              23b0 0021  ld   $21
              23b1 004c  ld   $4c
              23b2 00fc  ld   $fc
              23b3 0050  ld   $50
              23b4 0035  ld   $35
              23b5 0053  ld   $53
              23b6 00df  ld   $df
              23b7 0021  ld   $21
              23b8 004c  ld   $4c
              23b9 0090  ld   $90
              23ba 00e2  ld   $e2
              23bb 0011  ld   $11
              23bc 0000  ld   $00
              23bd 0080  ld   $80
              23be 0099  ld   $99
              23bf 0050  ld   $50
              23c0 0035  ld   $35
              23c1 0050  ld   $50
              23c2 00ed  ld   $ed
              23c3 0021  ld   $21
              23c4 004e  ld   $4e
              23c5 00e3  ld   $e3
              23c6 0001  ld   $01
              23c7 002b  ld   $2b
              23c8 004e  ld   $4e
              23c9 0021  ld   $21
              23ca 004e  ld   $4e
              23cb 0099  ld   $99
              23cc 0056  ld   $56
              23cd 002b  ld   $2b
              23ce 004e  ld   $4e
              23cf 0021  ld   $21
              23d0 004c  ld   $4c
              23d1 0099  ld   $99
              23d2 0050  ld   $50
              23d3 002b  ld   $2b
              23d4 004c  ld   $4c
              23d5 00ff  ld   $ff
              23d6 0093  ld   $93
              23d7 001b  ld   $1b
              23d8 00ff  ld   $ff
              23d9 0067  ld   $67
              23da 00a0  ld   $a0
              23db 0040  ld   $40
              23dc 00cd  ld   $cd
              23dd 00b8  ld   $b8
              23de 0075  ld   $75
              23df 00e6  ld   $e6
              23e0 0020  ld   $20
              23e1 0035  ld   $35
              23e2 0053  ld   $53
              23e3 00aa  ld   $aa
              23e4 0059  ld   $59
              23e5 007f  ld   $7f
              23e6 0090  ld   $90
              23e7 00b1  ld   $b1
              23e8 00e6  ld   $e6
              23e9 0060  ld   $60
              23ea 0035  ld   $35
              23eb 0050  ld   $50
              23ec 00b1  ld   $b1
              23ed 0059  ld   $59
              23ee 007f  ld   $7f
              23ef 0082  ld   $82
              23f0 007f  ld   $7f
              23f1 0085  ld   $85
              23f2 00a2  ld   $a2
              23f3 006e  ld   $6e
              23f4 0063  ld   $63
              23f5 00ff  ld   $ff
              23f6 00cd  ld   $cd
              23f7 00ca  ld   $ca
              23f8 0075  ld   $75
              23f9 0021  ld   $21
              23fa 004e  ld   $4e
              23fb fe00  bra  ac          ;+-----------------------------------+
              23fc fcfd  bra  $23fd       ;|                                   |
              23fd 1404  ld   $04,y       ;| Trampoline for page $2300 lookups |
              23fe e068  jmp  y,$68       ;|                                   |
              23ff c218  st   [$18]       ;+-----------------------------------+
              2400 0085  ld   $85
              2401 00ce  ld   $ce
              2402 0067  ld   $67
              2403 0021  ld   $21
              2404 004c  ld   $4c
              2405 0085  ld   $85
              2406 00ce  ld   $ce
              2407 0067  ld   $67
              2408 0085  ld   $85
              2409 00a2  ld   $a2
              240a 006d  ld   $6d
              240b 0063  ld   $63
              240c 00ff  ld   $ff
              240d 00cd  ld   $cd
              240e 00db  ld   $db
              240f 0075  ld   $75
              2410 002b  ld   $2b
              2411 0046  ld   $46
              2412 001a  ld   $1a
              2413 0047  ld   $47
              2414 0085  ld   $85
              2415 00a2  ld   $a2
              2416 0068  ld   $68
              2417 001a  ld   $1a
              2418 0046  ld   $46
              2419 0085  ld   $85
              241a 00a2  ld   $a2
              241b 0068  ld   $68
              241c 0063  ld   $63
              241d 00ff  ld   $ff
              241e 0093  ld   $93
              241f 001b  ld   $1b
              2420 00ff  ld   $ff
              2421 0068  ld   $68
              2422 00a0  ld   $a0
              2423 0054  ld   $54
              2424 00cd  ld   $cd
              2425 00b7  ld   $b7
              2426 0075  ld   $75
              2427 00df  ld   $df
              2428 00fe  ld   $fe
              2429 00ec  ld   $ec
              242a 0000  ld   $00
              242b 00e9  ld   $e9
              242c 00e9  ld   $e9
              242d 00e9  ld   $e9
              242e 00e9  ld   $e9
              242f 001a  ld   $1a
              2430 0019  ld   $19
              2431 0085  ld   $85
              2432 00de  ld   $de
              2433 0068  ld   $68
              2434 00ee  ld   $ee
              2435 0000  ld   $00
              2436 00df  ld   $df
              2437 0002  ld   $02
              2438 0085  ld   $85
              2439 00de  ld   $de
              243a 0068  ld   $68
              243b 0063  ld   $63
              243c 00ff  ld   $ff
              243d 00cd  ld   $cd
              243e 00da  ld   $da
              243f 0075  ld   $75
              2440 002b  ld   $2b
              2441 0046  ld   $46
              2442 0035  ld   $35
              2443 0072  ld   $72
              2444 00c8  ld   $c8
              2445 00cd  ld   $cd
              2446 00c6  ld   $c6
              2447 0020  ld   $20
              2448 004f  ld   $4f
              2449 004b  ld   $4b
              244a 000a  ld   $0a
              244b 0000  ld   $00
              244c 0090  ld   $90
              244d 00d3  ld   $d3
              244e 00cd  ld   $cd
              244f 00d3  ld   $d3
              2450 0020  ld   $20
              2451 0046  ld   $46
              2452 0041  ld   $41
              2453 0049  ld   $49
              2454 004c  ld   $4c
              2455 0045  ld   $45
              2456 0044  ld   $44
              2457 000a  ld   $0a
              2458 0000  ld   $00
              2459 0085  ld   $85
              245a 00a2  ld   $a2
              245b 0069  ld   $69
              245c 0021  ld   $21
              245d 0046  ld   $46
              245e 0063  ld   $63
              245f 00ff  ld   $ff
              2460 00cd  ld   $cd
              2461 00ef  ld   $ef
              2462 0075  ld   $75
              2463 0082  ld   $82
              2464 000f  ld   $0f
              2465 00e6  ld   $e6
              2466 000a  ld   $0a
              2467 0035  ld   $35
              2468 0053  ld   $53
              2469 00e8  ld   $e8
              246a 00e3  ld   $e3
              246b 003a  ld   $3a
              246c 0090  ld   $90
              246d 00ea  ld   $ea
              246e 00e3  ld   $e3
              246f 0041  ld   $41
              2470 0085  ld   $85
              2471 00a2  ld   $a2
              2472 006e  ld   $6e
              2473 0063  ld   $63
              2474 00ff  ld   $ff
              2475 0093  ld   $93
              2476 001b  ld   $1b
              2477 00ff  ld   $ff
              2478 0069  ld   $69
              2479 00a0  ld   $a0
              247a 004f  ld   $4f
              247b 00cd  ld   $cd
              247c 00be  ld   $be
              247d 0075  ld   $75
              247e 002b  ld   $2b
              247f 003c  ld   $3c
              2480 0021  ld   $21
              2481 003c  ld   $3c
              2482 00ad  ld   $ad
              2483 0035  ld   $35
              2484 003f  ld   $3f
              2485 00bc  ld   $bc
              2486 008c  ld   $8c
              2487 000a  ld   $0a
              2488 0035  ld   $35
              2489 003f  ld   $3f
              248a 00b5  ld   $b5
              248b 008c  ld   $8c
              248c 000a  ld   $0a
              248d 0085  ld   $85
              248e 00a2  ld   $a2
              248f 006e  ld   $6e
              2490 0090  ld   $90
              2491 00b8  ld   $b8
              2492 0085  ld   $85
              2493 00a2  ld   $a2
              2494 006d  ld   $6d
              2495 0093  ld   $93
              2496 003c  ld   $3c
              2497 0090  ld   $90
              2498 00a3  ld   $a3
              2499 0063  ld   $63
              249a 00ff  ld   $ff
              249b 00cd  ld   $cd
              249c 00ea  ld   $ea
              249d 0075  ld   $75
              249e 00cd  ld   $cd
              249f 00cb  ld   $cb
              24a0 0056  ld   $56
              24a1 006f  ld   $6f
              24a2 006c  ld   $6c
              24a3 0075  ld   $75
              24a4 006d  ld   $6d
              24a5 0065  ld   $65
              24a6 0020  ld   $20
              24a7 0000  ld   $00
              24a8 0085  ld   $85
              24a9 00a2  ld   $a2
              24aa 0069  ld   $69
              24ab 0021  ld   $21
              24ac 003a  ld   $3a
              24ad 002b  ld   $2b
              24ae 003c  ld   $3c
              24af 0059  ld   $59
              24b0 000b  ld   $0b
              24b1 002b  ld   $2b
              24b2 0046  ld   $46
              24b3 0021  ld   $21
              24b4 003c  ld   $3c
              24b5 00ad  ld   $ad
              24b6 0093  ld   $93
              24b7 003c  ld   $3c
              24b8 0085  ld   $85
              24b9 00a2  ld   $a2
              24ba 0067  ld   $67
              24bb 0021  ld   $21
              24bc 0046  ld   $46
              24bd 00e6  ld   $e6
              24be 0001  ld   $01
              24bf 0035  ld   $35
              24c0 004d  ld   $4d
              24c1 00d4  ld   $d4
              24c2 0085  ld   $85
              24c3 00a2  ld   $a2
              24c4 006d  ld   $6d
              24c5 0063  ld   $63
              24c6 00ff  ld   $ff
              24c7 0093  ld   $93
              24c8 001b  ld   $1b
              24c9 00ff  ld   $ff
              24ca 006a  ld   $6a
              24cb 00a0  ld   $a0
              24cc 0050  ld   $50
              24cd 00cd  ld   $cd
              24ce 00b5  ld   $b5
              24cf 0075  ld   $75
              24d0 002b  ld   $2b
              24d1 006c  ld   $6c
              24d2 0059  ld   $59
              24d3 0030  ld   $30
              24d4 002b  ld   $2b
              24d5 0046  ld   $46
              24d6 0059  ld   $59
              24d7 000a  ld   $0a
              24d8 0085  ld   $85
              24d9 00a2  ld   $a2
              24da 006c  ld   $6c
              24db 0021  ld   $21
              24dc 006c  ld   $6c
              24dd 00e3  ld   $e3
              24de 0030  ld   $30
              24df 0085  ld   $85
              24e0 00a2  ld   $a2
              24e1 006e  ld   $6e
              24e2 0063  ld   $63
              24e3 00ff  ld   $ff
              24e4 00cd  ld   $cd
              24e5 00eb  ld   $eb
              24e6 0075  ld   $75
              24e7 0011  ld   $11
              24e8 0000  ld   $00
              24e9 0006  ld   $06
              24ea 002b  ld   $2b
              24eb 0022  ld   $22
              24ec 0021  ld   $21
              24ed 003a  ld   $3a
              24ee 00e3  ld   $e3
              24ef 0011  ld   $11
              24f0 00ad  ld   $ad
              24f1 00b4  ld   $b4
              24f2 00f6  ld   $f6
              24f3 00e6  ld   $e6
              24f4 0014  ld   $14
              24f5 0035  ld   $35
              24f6 0053  ld   $53
              24f7 00cb  ld   $cb
              24f8 00e3  ld   $e3
              24f9 0064  ld   $64
              24fa 0085  ld   $85
              24fb fe00  bra  ac          ;+-----------------------------------+
              24fc fcfd  bra  $24fd       ;|                                   |
              24fd 1404  ld   $04,y       ;| Trampoline for page $2400 lookups |
              24fe e068  jmp  y,$68       ;|                                   |
              24ff c218  st   [$18]       ;+-----------------------------------+
              2500 00a2  ld   $a2
              2501 006a  ld   $6a
              2502 0011  ld   $11
              2503 006d  ld   $6d
              2504 0006  ld   $06
              2505 002b  ld   $2b
              2506 0022  ld   $22
              2507 0021  ld   $21
              2508 003a  ld   $3a
              2509 00e3  ld   $e3
              250a 0010  ld   $10
              250b 00f6  ld   $f6
              250c 00b4  ld   $b4
              250d 00f5  ld   $f5
              250e 0082  ld   $82
              250f 000f  ld   $0f
              2510 0085  ld   $85
              2511 00a2  ld   $a2
              2512 006a  ld   $6a
              2513 0021  ld   $21
              2514 003a  ld   $3a
              2515 00e3  ld   $e3
              2516 0010  ld   $10
              2517 00ad  ld   $ad
              2518 0082  ld   $82
              2519 001f  ld   $1f
              251a 0085  ld   $85
              251b 00a2  ld   $a2
              251c 006a  ld   $6a
              251d 0063  ld   $63
              251e 00ff  ld   $ff
              251f 0093  ld   $93
              2520 001b  ld   $1b
              2521 00ff  ld   $ff
              2522 006b  ld   $6b
              2523 00a0  ld   $a0
              2524 0055  ld   $55
              2525 00cd  ld   $cd
              2526 00bb  ld   $bb
              2527 0075  ld   $75
              2528 0085  ld   $85
              2529 00b9  ld   $b9
              252a 006a  ld   $6a
              252b 0059  ld   $59
              252c 0004  ld   $04
              252d 0099  ld   $99
              252e 006e  ld   $6e
              252f 002b  ld   $2b
              2530 006e  ld   $6e
              2531 0085  ld   $85
              2532 00a2  ld   $a2
              2533 0070  ld   $70
              2534 0059  ld   $59
              2535 0004  ld   $04
              2536 0099  ld   $99
              2537 006e  ld   $6e
              2538 002b  ld   $2b
              2539 006e  ld   $6e
              253a 0085  ld   $85
              253b 00bf  ld   $bf
              253c 006b  ld   $6b
              253d 0085  ld   $85
              253e 00a2  ld   $a2
              253f 006d  ld   $6d
              2540 0063  ld   $63
              2541 00ff  ld   $ff
              2542 00cd  ld   $cd
              2543 00f0  ld   $f0
              2544 0075  ld   $75
              2545 0021  ld   $21
              2546 003a  ld   $3a
              2547 002b  ld   $2b
              2548 003c  ld   $3c
              2549 0059  ld   $59
              254a 000b  ld   $0b
              254b 002b  ld   $2b
              254c 0046  ld   $46
              254d 008c  ld   $8c
              254e 0003  ld   $03
              254f 0035  ld   $35
              2550 0072  ld   $72
              2551 00d8  ld   $d8
              2552 0021  ld   $21
              2553 003c  ld   $3c
              2554 00ad  ld   $ad
              2555 008c  ld   $8c
              2556 0020  ld   $20
              2557 0035  ld   $35
              2558 003f  ld   $3f
              2559 00d8  ld   $d8
              255a 0059  ld   $59
              255b 002e  ld   $2e
              255c 0085  ld   $85
              255d 00a2  ld   $a2
              255e 006e  ld   $6e
              255f 0021  ld   $21
              2560 003c  ld   $3c
              2561 00ad  ld   $ad
              2562 0093  ld   $93
              2563 003c  ld   $3c
              2564 008c  ld   $8c
              2565 0020  ld   $20
              2566 0035  ld   $35
              2567 003f  ld   $3f
              2568 00e7  ld   $e7
              2569 008c  ld   $8c
              256a 0020  ld   $20
              256b 0085  ld   $85
              256c 00a2  ld   $a2
              256d 0067  ld   $67
              256e 0021  ld   $21
              256f 0046  ld   $46
              2570 00e6  ld   $e6
              2571 0001  ld   $01
              2572 0035  ld   $35
              2573 004d  ld   $4d
              2574 00c4  ld   $c4
              2575 0063  ld   $63
              2576 00ff  ld   $ff
              2577 0093  ld   $93
              2578 001b  ld   $1b
              2579 00ff  ld   $ff
              257a 006c  ld   $6c
              257b 00a0  ld   $a0
              257c 002c  ld   $2c
              257d 00cd  ld   $cd
              257e 00c7  ld   $c7
              257f 0075  ld   $75
              2580 002b  ld   $2b
              2581 0034  ld   $34
              2582 0021  ld   $21
              2583 006c  ld   $6c
              2584 00b8  ld   $b8
              2585 0034  ld   $34
              2586 0035  ld   $35
              2587 0050  ld   $50
              2588 00b0  ld   $b0
              2589 002b  ld   $2b
              258a 006c  ld   $6c
              258b 0093  ld   $93
              258c 0046  ld   $46
              258d 0090  ld   $90
              258e 00a5  ld   $a5
              258f 0021  ld   $21
              2590 0046  ld   $46
              2591 0035  ld   $35
              2592 0072  ld   $72
              2593 00bc  ld   $bc
              2594 0059  ld   $59
              2595 0020  ld   $20
              2596 0085  ld   $85
              2597 00a2  ld   $a2
              2598 006e  ld   $6e
              2599 0090  ld   $90
              259a 00c5  ld   $c5
              259b 0088  ld   $88
              259c 0030  ld   $30
              259d 0085  ld   $85
              259e 00a2  ld   $a2
              259f 006e  ld   $6e
              25a0 0059  ld   $59
              25a1 0030  ld   $30
              25a2 002b  ld   $2b
              25a3 0046  ld   $46
              25a4 0063  ld   $63
              25a5 00ff  ld   $ff
              25a6 0093  ld   $93
              25a7 001b  ld   $1b
              25a8 00ff  ld   $ff
              25a9 006d  ld   $6d
              25aa 00a0  ld   $a0
              25ab 004c  ld   $4c
              25ac 00cd  ld   $cd
              25ad 00e7  ld   $e7
              25ae 0011  ld   $11
              25af 0000  ld   $00
              25b0 003f  ld   $3f
              25b1 002b  ld   $2b
              25b2 0024  ld   $24
              25b3 0059  ld   $59
              25b4 0000  ld   $00
              25b5 005e  ld   $5e
              25b6 006e  ld   $6e
              25b7 0011  ld   $11
              25b8 0020  ld   $20
              25b9 0001  ld   $01
              25ba 00ad  ld   $ad
              25bb 005e  ld   $5e
              25bc 006f  ld   $6f
              25bd 0021  ld   $21
              25be 006e  ld   $6e
              25bf 002b  ld   $2b
              25c0 0028  ld   $28
              25c1 005e  ld   $5e
              25c2 0026  ld   $26
              25c3 0011  ld   $11
              25c4 00e1  ld   $e1
              25c5 0004  ld   $04
              25c6 002b  ld   $2b
              25c7 0022  ld   $22
              25c8 00b4  ld   $b4
              25c9 00cb  ld   $cb
              25ca 0093  ld   $93
              25cb 0028  ld   $28
              25cc 001a  ld   $1a
              25cd 0028  ld   $28
              25ce 008c  ld   $8c
              25cf 00a0  ld   $a0
              25d0 0035  ld   $35
              25d1 0072  ld   $72
              25d2 00b5  ld   $b5
              25d3 0059  ld   $59
              25d4 0001  ld   $01
              25d5 005e  ld   $5e
              25d6 0035  ld   $35
              25d7 0059  ld   $59
              25d8 00c0  ld   $c0
              25d9 00e3  ld   $e3
              25da 001e  ld   $1e
              25db 005e  ld   $5e
              25dc 0034  ld   $34
              25dd 0021  ld   $21
              25de 0034  ld   $34
              25df 00ad  ld   $ad
              25e0 00e6  ld   $e6
              25e1 0070  ld   $70
              25e2 0035  ld   $35
              25e3 0053  ld   $53
              25e4 00db  ld   $db
              25e5 00e3  ld   $e3
              25e6 0078  ld   $78
              25e7 0090  ld   $90
              25e8 00dd  ld   $dd
              25e9 00e3  ld   $e3
              25ea 0018  ld   $18
              25eb 00f0  ld   $f0
              25ec 0034  ld   $34
              25ed 001a  ld   $1a
              25ee 0034  ld   $34
              25ef 00e6  ld   $e6
              25f0 0020  ld   $20
              25f1 0035  ld   $35
              25f2 004d  ld   $4d
              25f3 00cb  ld   $cb
              25f4 00ff  ld   $ff
              25f5 0093  ld   $93
              25f6 001b  ld   $1b
              25f7 00ff  ld   $ff
              25f8 006e  ld   $6e
              25f9 00a0  ld   $a0
              25fa 004e  ld   $4e
              25fb fe00  bra  ac          ;+-----------------------------------+
              25fc fcfd  bra  $25fd       ;|                                   |
              25fd 1404  ld   $04,y       ;| Trampoline for page $2500 lookups |
              25fe e068  jmp  y,$68       ;|                                   |
              25ff c218  st   [$18]       ;+-----------------------------------+
              2600 00cd  ld   $cd
              2601 00e9  ld   $e9
              2602 00e6  ld   $e6
              2603 0052  ld   $52
              2604 0035  ld   $35
              2605 0053  ld   $53
              2606 00ae  ld   $ae
              2607 00e3  ld   $e3
              2608 0032  ld   $32
              2609 002b  ld   $2b
              260a 0034  ld   $34
              260b 0011  ld   $11
              260c 0000  ld   $00
              260d 0007  ld   $07
              260e 0090  ld   $90
              260f 00b3  ld   $b3
              2610 002b  ld   $2b
              2611 0034  ld   $34
              2612 0011  ld   $11
              2613 0000  ld   $00
              2614 0008  ld   $08
              2615 002b  ld   $2b
              2616 0070  ld   $70
              2617 0021  ld   $21
              2618 0034  ld   $34
              2619 00e9  ld   $e9
              261a 00e9  ld   $e9
              261b 0099  ld   $99
              261c 0034  ld   $34
              261d 0099  ld   $99
              261e 0070  ld   $70
              261f 002b  ld   $2b
              2620 0070  ld   $70
              2621 0011  ld   $11
              2622 0000  ld   $00
              2623 003f  ld   $3f
              2624 002b  ld   $2b
              2625 0024  ld   $24
              2626 0021  ld   $21
              2627 006e  ld   $6e
              2628 002b  ld   $2b
              2629 0028  ld   $28
              262a 00e3  ld   $e3
              262b 0006  ld   $06
              262c 002b  ld   $2b
              262d 006e  ld   $6e
              262e 0011  ld   $11
              262f 00e1  ld   $e1
              2630 0004  ld   $04
              2631 002b  ld   $2b
              2632 0022  ld   $22
              2633 0059  ld   $59
              2634 0005  ld   $05
              2635 002b  ld   $2b
              2636 0034  ld   $34
              2637 0021  ld   $21
              2638 0070  ld   $70
              2639 007f  ld   $7f
              263a 0000  ld   $00
              263b 005e  ld   $5e
              263c 0026  ld   $26
              263d 00b4  ld   $b4
              263e 00cb  ld   $cb
              263f 0093  ld   $93
              2640 0070  ld   $70
              2641 0093  ld   $93
              2642 0028  ld   $28
              2643 0021  ld   $21
              2644 0034  ld   $34
              2645 00e6  ld   $e6
              2646 0001  ld   $01
              2647 0035  ld   $35
              2648 004d  ld   $4d
              2649 00d3  ld   $d3
              264a 00ff  ld   $ff
              264b 0093  ld   $93
              264c 001b  ld   $1b
              264d 00ff  ld   $ff
              264e 006f  ld   $6f
              264f 00a0  ld   $a0
              2650 004f  ld   $4f
              2651 00cd  ld   $cd
              2652 00ea  ld   $ea
              2653 0075  ld   $75
              2654 0085  ld   $85
              2655 00a2  ld   $a2
              2656 0064  ld   $64
              2657 0021  ld   $21
              2658 006a  ld   $6a
              2659 002b  ld   $2b
              265a 003a  ld   $3a
              265b 00ad  ld   $ad
              265c 0035  ld   $35
              265d 003f  ld   $3f
              265e 00e8  ld   $e8
              265f 008c  ld   $8c
              2660 00e5  ld   $e5
              2661 0035  ld   $35
              2662 003f  ld   $3f
              2663 00e1  ld   $e1
              2664 0021  ld   $21
              2665 003a  ld   $3a
              2666 00e3  ld   $e3
              2667 000b  ld   $0b
              2668 00ad  ld   $ad
              2669 002b  ld   $2b
              266a 0046  ld   $46
              266b 008c  ld   $8c
              266c 000f  ld   $0f
              266d 0035  ld   $35
              266e 003f  ld   $3f
              266f 00e1  ld   $e1
              2670 0082  ld   $82
              2671 0002  ld   $02
              2672 0035  ld   $35
              2673 003f  ld   $3f
              2674 00e1  ld   $e1
              2675 0021  ld   $21
              2676 0046  ld   $46
              2677 0082  ld   $82
              2678 0008  ld   $08
              2679 0035  ld   $35
              267a 003f  ld   $3f
              267b 00ce  ld   $ce
              267c 0085  ld   $85
              267d 00c2  ld   $c2
              267e 0069  ld   $69
              267f 0090  ld   $90
              2680 00e1  ld   $e1
              2681 0085  ld   $85
              2682 00a2  ld   $a2
              2683 006b  ld   $6b
              2684 0085  ld   $85
              2685 00a2  ld   $a2
              2686 0074  ld   $74
              2687 0035  ld   $35
              2688 0072  ld   $72
              2689 00e1  ld   $e1
              268a 0059  ld   $59
              268b 00d0  ld   $d0
              268c 00f0  ld   $f0
              268d 0032  ld   $32
              268e 0085  ld   $85
              268f 00a2  ld   $a2
              2690 0073  ld   $73
              2691 0085  ld   $85
              2692 00cd  ld   $cd
              2693 0074  ld   $74
              2694 0059  ld   $59
              2695 0020  ld   $20
              2696 0085  ld   $85
              2697 00c6  ld   $c6
              2698 0075  ld   $75
              2699 0090  ld   $90
              269a 00a1  ld   $a1
              269b 0063  ld   $63
              269c 00ff  ld   $ff
              269d 0093  ld   $93
              269e 001b  ld   $1b
              269f 00ff  ld   $ff
              26a0 0070  ld   $70
              26a1 00a0  ld   $a0
              26a2 005e  ld   $5e
              26a3 00cd  ld   $cd
              26a4 00f9  ld   $f9
              26a5 0075  ld   $75
              26a6 0021  ld   $21
              26a7 003a  ld   $3a
              26a8 00e3  ld   $e3
              26a9 000b  ld   $0b
              26aa 00ad  ld   $ad
              26ab 0082  ld   $82
              26ac 0010  ld   $10
              26ad 0035  ld   $35
              26ae 003f  ld   $3f
              26af 00b7  ld   $b7
              26b0 00cd  ld   $cd
              26b1 00b5  ld   $b5
              26b2 0020  ld   $20
              26b3 0020  ld   $20
              26b4 003c  ld   $3c
              26b5 0044  ld   $44
              26b6 0049  ld   $49
              26b7 0052  ld   $52
              26b8 003e  ld   $3e
              26b9 0000  ld   $00
              26ba 0090  ld   $90
              26bb 00f4  ld   $f4
              26bc 0021  ld   $21
              26bd 003a  ld   $3a
              26be 00e3  ld   $e3
              26bf 001c  ld   $1c
              26c0 00f6  ld   $f6
              26c1 002b  ld   $2b
              26c2 004c  ld   $4c
              26c3 0021  ld   $21
              26c4 003a  ld   $3a
              26c5 00e3  ld   $e3
              26c6 001e  ld   $1e
              26c7 00f6  ld   $f6
              26c8 002b  ld   $2b
              26c9 004e  ld   $4e
              26ca 0085  ld   $85
              26cb 00a2  ld   $a2
              26cc 0071  ld   $71
              26cd 0059  ld   $59
              26ce 0000  ld   $00
              26cf 002b  ld   $2b
              26d0 0070  ld   $70
              26d1 0059  ld   $59
              26d2 0008  ld   $08
              26d3 002b  ld   $2b
              26d4 0034  ld   $34
              26d5 0021  ld   $21
              26d6 003c  ld   $3c
              26d7 00ad  ld   $ad
              26d8 008c  ld   $8c
              26d9 0030  ld   $30
              26da 0035  ld   $35
              26db 0072  ld   $72
              26dc 00f0  ld   $f0
              26dd 0021  ld   $21
              26de 0034  ld   $34
              26df 00e6  ld   $e6
              26e0 0006  ld   $06
              26e1 0035  ld   $35
              26e2 0053  ld   $53
              26e3 00e5  ld   $e5
              26e4 0059  ld   $59
              26e5 0020  ld   $20
              26e6 00f0  ld   $f0
              26e7 003c  ld   $3c
              26e8 0090  ld   $90
              26e9 00e7  ld   $e7
              26ea 0093  ld   $93
              26eb 0070  ld   $70
              26ec 0093  ld   $93
              26ed 003c  ld   $3c
              26ee 0021  ld   $21
              26ef 0034  ld   $34
              26f0 00e6  ld   $e6
              26f1 0001  ld   $01
              26f2 0035  ld   $35
              26f3 0053  ld   $53
              26f4 00ce  ld   $ce
              26f5 0021  ld   $21
              26f6 0044  ld   $44
              26f7 0099  ld   $99
              26f8 0070  ld   $70
              26f9 0085  ld   $85
              26fa 00a2  ld   $a2
              26fb fe00  bra  ac          ;+-----------------------------------+
              26fc fcfd  bra  $26fd       ;|                                   |
              26fd 1404  ld   $04,y       ;| Trampoline for page $2600 lookups |
              26fe e068  jmp  y,$68       ;|                                   |
              26ff c218  st   [$18]       ;+-----------------------------------+
              2700 0069  ld   $69
              2701 0063  ld   $63
              2702 00ff  ld   $ff
              2703 0093  ld   $93
              2704 001b  ld   $1b
              2705 00ff  ld   $ff
              2706 0071  ld   $71
              2707 00a0  ld   $a0
              2708 0060  ld   $60
              2709 00cd  ld   $cd
              270a 00fb  ld   $fb
              270b 0075  ld   $75
              270c 0059  ld   $59
              270d 0009  ld   $09
              270e 002b  ld   $2b
              270f 0034  ld   $34
              2710 0021  ld   $21
              2711 0044  ld   $44
              2712 0099  ld   $99
              2713 0034  ld   $34
              2714 002b  ld   $2b
              2715 003c  ld   $3c
              2716 0059  ld   $59
              2717 0030  ld   $30
              2718 00f0  ld   $f0
              2719 003c  ld   $3c
              271a 0021  ld   $21
              271b 0034  ld   $34
              271c 00e6  ld   $e6
              271d 0001  ld   $01
              271e 0035  ld   $35
              271f 0053  ld   $53
              2720 00a3  ld   $a3
              2721 0059  ld   $59
              2722 001f  ld   $1f
              2723 002b  ld   $2b
              2724 0070  ld   $70
              2725 0085  ld   $85
              2726 00c2  ld   $c2
              2727 0066  ld   $66
              2728 0035  ld   $35
              2729 0050  ld   $50
              272a 00c4  ld   $c4
              272b 0059  ld   $59
              272c 006a  ld   $6a
              272d 0090  ld   $90
              272e 00c6  ld   $c6
              272f 0059  ld   $59
              2730 0069  ld   $69
              2731 002b  ld   $2b
              2732 0046  ld   $46
              2733 0059  ld   $59
              2734 0009  ld   $09
              2735 002b  ld   $2b
              2736 0034  ld   $34
              2737 0021  ld   $21
              2738 0044  ld   $44
              2739 0099  ld   $99
              273a 0034  ld   $34
              273b 002b  ld   $2b
              273c 003c  ld   $3c
              273d 0021  ld   $21
              273e 003c  ld   $3c
              273f 00ad  ld   $ad
              2740 00e9  ld   $e9
              2741 00b8  ld   $b8
              2742 0046  ld   $46
              2743 0035  ld   $35
              2744 0053  ld   $53
              2745 00e3  ld   $e3
              2746 00e3  ld   $e3
              2747 003a  ld   $3a
              2748 00f0  ld   $f0
              2749 003c  ld   $3c
              274a 0059  ld   $59
              274b 006a  ld   $6a
              274c 0090  ld   $90
              274d 00e9  ld   $e9
              274e 00e3  ld   $e3
              274f 0030  ld   $30
              2750 00f0  ld   $f0
              2751 003c  ld   $3c
              2752 0059  ld   $59
              2753 0069  ld   $69
              2754 002b  ld   $2b
              2755 0046  ld   $46
              2756 0021  ld   $21
              2757 0034  ld   $34
              2758 00e6  ld   $e6
              2759 0001  ld   $01
              275a 0035  ld   $35
              275b 0053  ld   $53
              275c 00ca  ld   $ca
              275d 0021  ld   $21
              275e 0070  ld   $70
              275f 00e6  ld   $e6
              2760 0001  ld   $01
              2761 0035  ld   $35
              2762 0053  ld   $53
              2763 00b8  ld   $b8
              2764 0063  ld   $63
              2765 00ff  ld   $ff
              2766 0093  ld   $93
              2767 001b  ld   $1b
              2768 00ff  ld   $ff
              2769 0072  ld   $72
              276a 00a0  ld   $a0
              276b 004f  ld   $4f
              276c 00cd  ld   $cd
              276d 00ab  ld   $ab
              276e 002d  ld   $2d
              276f 002d  ld   $2d
              2770 002d  ld   $2d
              * 10 times
              2778 0000  ld   $00
              2779 002b  ld   $2b
              277a 0044  ld   $44
              277b 00cd  ld   $cd
              277c 00ea  ld   $ea
              277d 0075  ld   $75
              277e 005e  ld   $5e
              277f 0025  ld   $25
              2780 0011  ld   $11
              2781 0003  ld   $03
              2782 000b  ld   $0b
              2783 002b  ld   $2b
              2784 0022  ld   $22
              2785 0059  ld   $59
              2786 0018  ld   $18
              2787 002b  ld   $2b
              2788 0034  ld   $34
              2789 0011  ld   $11
              278a 0020  ld   $20
              278b 0001  ld   $01
              278c 002b  ld   $2b
              278d 0046  ld   $46
              278e 0021  ld   $21
              278f 0034  ld   $34
              2790 00f0  ld   $f0
              2791 0046  ld   $46
              2792 005e  ld   $5e
              2793 0027  ld   $27
              2794 0059  ld   $59
              2795 0000  ld   $00
              2796 005e  ld   $5e
              2797 0026  ld   $26
              2798 0059  ld   $59
              2799 00a0  ld   $a0
              279a 005e  ld   $5e
              279b 0024  ld   $24
              279c 00b4  ld   $b4
              279d 00f3  ld   $f3
              279e 0059  ld   $59
              279f 0001  ld   $01
              27a0 0099  ld   $99
              27a1 0034  ld   $34
              27a2 002b  ld   $2b
              27a3 0034  ld   $34
              27a4 0059  ld   $59
              27a5 0002  ld   $02
              27a6 0099  ld   $99
              27a7 0046  ld   $46
              27a8 002b  ld   $2b
              27a9 0046  ld   $46
              27aa 0011  ld   $11
              27ab 00f0  ld   $f0
              27ac 0001  ld   $01
              27ad 00fc  ld   $fc
              27ae 0046  ld   $46
              27af 0035  ld   $35
              27b0 0072  ld   $72
              27b1 00c0  ld   $c0
              27b2 0059  ld   $59
              27b3 0000  ld   $00
              27b4 00f0  ld   $f0
              27b5 0032  ld   $32
              27b6 0063  ld   $63
              27b7 00ff  ld   $ff
              27b8 0093  ld   $93
              27b9 001b  ld   $1b
              27ba 00ff  ld   $ff
              27bb 0073  ld   $73
              27bc 00a0  ld   $a0
              27bd 0056  ld   $56
              27be 00cd  ld   $cd
              27bf 00f1  ld   $f1
              27c0 0075  ld   $75
              27c1 00cd  ld   $cd
              27c2 00ac  ld   $ac
              27c3 004c  ld   $4c
              27c4 006f  ld   $6f
              27c5 0061  ld   $61
              27c6 0064  ld   $64
              27c7 0069  ld   $69
              27c8 006e  ld   $6e
              27c9 0067  ld   $67
              27ca 0020  ld   $20
              27cb 0000  ld   $00
              27cc 0085  ld   $85
              27cd 00a2  ld   $a2
              27ce 0069  ld   $69
              27cf 0085  ld   $85
              27d0 00bf  ld   $bf
              27d1 006b  ld   $6b
              27d2 0085  ld   $85
              27d3 00a2  ld   $a2
              27d4 0065  ld   $65
              27d5 0085  ld   $85
              27d6 00de  ld   $de
              27d7 0075  ld   $75
              27d8 005e  ld   $5e
              27d9 0073  ld   $73
              27da 0085  ld   $85
              27db 00de  ld   $de
              27dc 0075  ld   $75
              27dd 005e  ld   $5e
              27de 0072  ld   $72
              27df 0085  ld   $85
              27e0 00de  ld   $de
              27e1 0075  ld   $75
              27e2 00e6  ld   $e6
              27e3 0001  ld   $01
              27e4 0082  ld   $82
              27e5 00ff  ld   $ff
              27e6 00e3  ld   $e3
              27e7 0001  ld   $01
              27e8 002b  ld   $2b
              27e9 0074  ld   $74
              27ea 0085  ld   $85
              27eb 00a2  ld   $a2
              27ec 0078  ld   $78
              27ed 0021  ld   $21
              27ee 0074  ld   $74
              27ef 0035  ld   $35
              27f0 0072  ld   $72
              27f1 00d8  ld   $d8
              27f2 0085  ld   $85
              27f3 00de  ld   $de
              27f4 0075  ld   $75
              27f5 0035  ld   $35
              27f6 0072  ld   $72
              27f7 00b8  ld   $b8
              27f8 0085  ld   $85
              27f9 00de  ld   $de
              27fa 0075  ld   $75
              27fb fe00  bra  ac          ;+-----------------------------------+
              27fc fcfd  bra  $27fd       ;|                                   |
              27fd 1404  ld   $04,y       ;| Trampoline for page $2700 lookups |
              27fe e068  jmp  y,$68       ;|                                   |
              27ff c218  st   [$18]       ;+-----------------------------------+
              2800 005e  ld   $5e
              2801 0073  ld   $73
              2802 0085  ld   $85
              2803 00de  ld   $de
              2804 0075  ld   $75
              2805 005e  ld   $5e
              2806 0072  ld   $72
              2807 0085  ld   $85
              2808 00de  ld   $de
              2809 0075  ld   $75
              280a 0035  ld   $35
              280b 0050  ld   $50
              280c 00ec  ld   $ec
              280d 0059  ld   $59
              280e 0000  ld   $00
              280f 002b  ld   $2b
              2810 0072  ld   $72
              2811 0085  ld   $85
              2812 00af  ld   $af
              2813 005d  ld   $5d
              2814 0063  ld   $63
              2815 00ff  ld   $ff
              2816 0093  ld   $93
              2817 001b  ld   $1b
              2818 00ff  ld   $ff
              2819 0074  ld   $74
              281a 00a0  ld   $a0
              281b 003c  ld   $3c
              281c 00cd  ld   $cd
              281d 00c9  ld   $c9
              281e 00cd  ld   $cd
              281f 00ae  ld   $ae
              2820 0053  ld   $53
              2821 0059  ld   $59
              2822 0053  ld   $53
              2823 0054  ld   $54
              2824 0045  ld   $45
              2825 004d  ld   $4d
              2826 0020  ld   $20
              2827 0020  ld   $20
              2828 0047  ld   $47
              2829 0054  ld   $54
              282a 0031  ld   $31
              282b 0000  ld   $00
              282c 002b  ld   $2b
              282d 003c  ld   $3c
              282e 0021  ld   $21
              282f 003a  ld   $3a
              2830 002b  ld   $2b
              2831 0034  ld   $34
              2832 0021  ld   $21
              2833 003c  ld   $3c
              2834 00ad  ld   $ad
              2835 0093  ld   $93
              2836 003c  ld   $3c
              2837 0035  ld   $35
              2838 003f  ld   $3f
              2839 00c8  ld   $c8
              283a 002b  ld   $2b
              283b 0070  ld   $70
              283c 0021  ld   $21
              283d 0034  ld   $34
              283e 00ad  ld   $ad
              283f 0093  ld   $93
              2840 0034  ld   $34
              2841 00fc  ld   $fc
              2842 0070  ld   $70
              2843 0035  ld   $35
              2844 003f  ld   $3f
              2845 00b4  ld   $b4
              2846 00ff  ld   $ff
              2847 00cd  ld   $cd
              2848 00d7  ld   $d7
              2849 0059  ld   $59
              284a 0020  ld   $20
              284b 0085  ld   $85
              284c 00b1  ld   $b1
              284d 0072  ld   $72
              284e 0021  ld   $21
              284f 0072  ld   $72
              2850 0035  ld   $35
              2851 003f  ld   $3f
              2852 00d2  ld   $d2
              2853 00cf  ld   $cf
              2854 0018  ld   $18
              2855 0093  ld   $93
              2856 001b  ld   $1b
              2857 00ff  ld   $ff
              2858 0075  ld   $75
              2859 00a0  ld   $a0
              285a 0059  ld   $59
              285b 00cd  ld   $cd
              285c 00c2  ld   $c2
              285d 0075  ld   $75
              285e 0093  ld   $93
              285f 0040  ld   $40
              2860 0011  ld   $11
              2861 0000  ld   $00
              2862 0002  ld   $02
              2863 0099  ld   $99
              2864 0064  ld   $64
              2865 00f8  ld   $f8
              2866 004a  ld   $4a
              2867 0035  ld   $35
              2868 0072  ld   $72
              2869 00c0  ld   $c0
              286a 0021  ld   $21
              286b 0076  ld   $76
              286c 00e3  ld   $e3
              286d 0004  ld   $04
              286e 002b  ld   $2b
              286f 0076  ld   $76
              2870 00f6  ld   $f6
              2871 002b  ld   $2b
              2872 004c  ld   $4c
              2873 0021  ld   $21
              2874 0076  ld   $76
              2875 00e3  ld   $e3
              2876 0002  ld   $02
              2877 00f6  ld   $f6
              2878 002b  ld   $2b
              2879 004e  ld   $4e
              287a 0085  ld   $85
              287b 00cf  ld   $cf
              287c 0065  ld   $65
              287d 0063  ld   $63
              287e 00ff  ld   $ff
              287f 00cd  ld   $cd
              2880 00da  ld   $da
              2881 002b  ld   $2b
              2882 0034  ld   $34
              2883 0099  ld   $99
              2884 0064  ld   $64
              2885 002b  ld   $2b
              2886 0064  ld   $64
              2887 0035  ld   $35
              2888 0072  ld   $72
              2889 00d3  ld   $d3
              288a 0059  ld   $59
              288b 0001  ld   $01
              288c 0099  ld   $99
              288d 0060  ld   $60
              288e 002b  ld   $2b
              288f 0060  ld   $60
              2890 0021  ld   $21
              2891 0068  ld   $68
              2892 00b8  ld   $b8
              2893 0034  ld   $34
              2894 002b  ld   $2b
              2895 0068  ld   $68
              2896 00ff  ld   $ff
              2897 00cd  ld   $cd
              2898 00f4  ld   $f4
              2899 0075  ld   $75
              289a 0085  ld   $85
              289b 00a2  ld   $a2
              289c 0064  ld   $64
              289d 0035  ld   $35
              289e 0056  ld   $56
              289f 00ef  ld   $ef
              28a0 0059  ld   $59
              28a1 0001  ld   $01
              28a2 0085  ld   $85
              28a3 00c6  ld   $c6
              28a4 0075  ld   $75
              28a5 0021  ld   $21
              28a6 006a  ld   $6a
              28a7 00ad  ld   $ad
              28a8 0093  ld   $93
              28a9 006a  ld   $6a
              28aa 0090  ld   $90
              28ab 00f2  ld   $f2
              28ac 0011  ld   $11
              28ad 00ff  ld   $ff
              28ae 00ff  ld   $ff
              28af 0063  ld   $63
              28b0 00ff  ld   $ff
              28b1 0093  ld   $93
              28b2 001b  ld   $1b
              28b3 00ff  ld   $ff
              28b4 0076  ld   $76
              28b5 00a0  ld   $a0
              28b6 0044  ld   $44
              28b7 00cd  ld   $cd
              28b8 00df  ld   $df
              28b9 0075  ld   $75
              28ba 0011  ld   $11
              28bb 0000  ld   $00
              28bc 007f  ld   $7f
              28bd 002b  ld   $2b
              28be 0076  ld   $76
              28bf 0021  ld   $21
              28c0 004c  ld   $4c
              28c1 00f3  ld   $f3
              28c2 0076  ld   $76
              28c3 0093  ld   $93
              28c4 0076  ld   $76
              28c5 0093  ld   $93
              28c6 0076  ld   $76
              28c7 0021  ld   $21
              28c8 004e  ld   $4e
              28c9 00f3  ld   $f3
              28ca 0076  ld   $76
              28cb 0093  ld   $93
              28cc 0076  ld   $76
              28cd 0093  ld   $93
              28ce 0076  ld   $76
              28cf 0011  ld   $11
              28d0 0000  ld   $00
              28d1 00f0  ld   $f0
              28d2 00fa  ld   $fa
              28d3 004e  ld   $4e
              28d4 00e3  ld   $e3
              28d5 0001  ld   $01
              28d6 0035  ld   $35
              28d7 0072  ld   $72
              28d8 00c6  ld   $c6
              28d9 0059  ld   $59
              28da 0007  ld   $07
              28db 00fa  ld   $fa
              28dc 004c  ld   $4c
              28dd 00e3  ld   $e3
              28de 0001  ld   $01
              28df 0035  ld   $35
              28e0 003f  ld   $3f
              28e1 00ce  ld   $ce
              28e2 0085  ld   $85
              28e3 00a2  ld   $a2
              28e4 0077  ld   $77
              28e5 0090  ld   $90
              28e6 00a6  ld   $a6
              28e7 0011  ld   $11
              28e8 0000  ld   $00
              28e9 007f  ld   $7f
              28ea 002b  ld   $2b
              28eb 0076  ld   $76
              28ec 00f6  ld   $f6
              28ed 002b  ld   $2b
              28ee 004c  ld   $4c
              28ef 0021  ld   $21
              28f0 0076  ld   $76
              28f1 00e3  ld   $e3
              28f2 0002  ld   $02
              28f3 00f6  ld   $f6
              28f4 002b  ld   $2b
              28f5 004e  ld   $4e
              28f6 0063  ld   $63
              28f7 00ff  ld   $ff
              28f8 0093  ld   $93
              28f9 001b  ld   $1b
              28fa 00ff  ld   $ff
              28fb fe00  bra  ac          ;+-----------------------------------+
              28fc fcfd  bra  $28fd       ;|                                   |
              28fd 1404  ld   $04,y       ;| Trampoline for page $2800 lookups |
              28fe e068  jmp  y,$68       ;|                                   |
              28ff c218  st   [$18]       ;+-----------------------------------+
              2900 0077  ld   $77
              2901 00a0  ld   $a0
              2902 005d  ld   $5d
              2903 00cd  ld   $cd
              2904 00f8  ld   $f8
              2905 0075  ld   $75
              2906 001a  ld   $1a
              2907 004d  ld   $4d
              2908 005e  ld   $5e
              2909 0050  ld   $50
              290a 001a  ld   $1a
              290b 004e  ld   $4e
              290c 005e  ld   $5e
              290d 0051  ld   $51
              290e 001a  ld   $1a
              290f 004f  ld   $4f
              2910 002b  ld   $2b
              2911 0056  ld   $56
              2912 001a  ld   $1a
              2913 004c  ld   $4c
              2914 002b  ld   $2b
              2915 0078  ld   $78
              2916 0082  ld   $82
              2917 0080  ld   $80
              2918 00ad  ld   $ad
              2919 002b  ld   $2b
              291a 004c  ld   $4c
              291b 0059  ld   $59
              291c 0000  ld   $00
              291d 002b  ld   $2b
              291e 004e  ld   $4e
              291f 0085  ld   $85
              2920 00d6  ld   $d6
              2921 0066  ld   $66
              2922 0085  ld   $85
              2923 00d6  ld   $d6
              2924 0066  ld   $66
              2925 0021  ld   $21
              2926 0052  ld   $52
              2927 002b  ld   $2b
              2928 0050  ld   $50
              2929 0021  ld   $21
              292a 0054  ld   $54
              292b 002b  ld   $2b
              292c 0056  ld   $56
              292d 0085  ld   $85
              292e 00d6  ld   $d6
              292f 0066  ld   $66
              2930 00fc  ld   $fc
              2931 0040  ld   $40
              2932 0035  ld   $35
              2933 0072  ld   $72
              2934 00d4  ld   $d4
              2935 0021  ld   $21
              2936 004e  ld   $4e
              2937 00fc  ld   $fc
              2938 003e  ld   $3e
              2939 0035  ld   $35
              293a 003f  ld   $3f
              293b 00e2  ld   $e2
              293c 0021  ld   $21
              293d 004c  ld   $4c
              293e 002b  ld   $2b
              293f 0040  ld   $40
              2940 0021  ld   $21
              2941 004e  ld   $4e
              2942 002b  ld   $2b
              2943 003e  ld   $3e
              2944 0085  ld   $85
              2945 00a2  ld   $a2
              2946 0063  ld   $63
              2947 0021  ld   $21
              2948 0078  ld   $78
              2949 0082  ld   $82
              294a 007f  ld   $7f
              294b 00e9  ld   $e9
              294c 00e9  ld   $e9
              294d 0099  ld   $99
              294e 0030  ld   $30
              294f 002b  ld   $2b
              2950 0078  ld   $78
              2951 00f6  ld   $f6
              2952 002b  ld   $2b
              2953 004c  ld   $4c
              2954 0021  ld   $21
              2955 0078  ld   $78
              2956 00e3  ld   $e3
              2957 0002  ld   $02
              2958 00f6  ld   $f6
              2959 002b  ld   $2b
              295a 004e  ld   $4e
              295b 0063  ld   $63
              295c 00ff  ld   $ff
              295d 0093  ld   $93
              295e 001b  ld   $1b
              295f 00ff  ld   $ff
              2960 0078  ld   $78
              2961 00a0  ld   $a0
              2962 0038  ld   $38
              2963 00cd  ld   $cd
              2964 00d3  ld   $d3
              2965 0075  ld   $75
              2966 0085  ld   $85
              2967 00a2  ld   $a2
              2968 0064  ld   $64
              2969 0035  ld   $35
              296a 0056  ld   $56
              296b 00d1  ld   $d1
              296c 00b8  ld   $b8
              296d 0074  ld   $74
              296e 0035  ld   $35
              296f 0056  ld   $56
              2970 00ae  ld   $ae
              2971 0059  ld   $59
              2972 0000  ld   $00
              2973 0099  ld   $99
              2974 0074  ld   $74
              2975 0085  ld   $85
              2976 00c6  ld   $c6
              2977 0075  ld   $75
              2978 0021  ld   $21
              2979 006a  ld   $6a
              297a 002b  ld   $2b
              297b 0026  ld   $26
              297c 0021  ld   $21
              297d 0072  ld   $72
              297e 002b  ld   $2b
              297f 0024  ld   $24
              2980 0099  ld   $99
              2981 0034  ld   $34
              2982 002b  ld   $2b
              2983 0072  ld   $72
              2984 0011  ld   $11
              2985 00e9  ld   $e9
              2986 0000  ld   $00
              2987 002b  ld   $2b
              2988 0022  ld   $22
              2989 0021  ld   $21
              298a 0034  ld   $34
              298b 00b4  ld   $b4
              298c 00e6  ld   $e6
              298d 0021  ld   $21
              298e 0074  ld   $74
              298f 00b8  ld   $b8
              2990 0034  ld   $34
              2991 002b  ld   $2b
              2992 0074  ld   $74
              2993 0035  ld   $35
              2994 004d  ld   $4d
              2995 00a1  ld   $a1
              2996 0063  ld   $63
              2997 00ff  ld   $ff
              2998 0093  ld   $93
              2999 001b  ld   $1b
              299a 00ff  ld   $ff
              299b 0079  ld   $79
              299c 00a0  ld   $a0
              299d 0040  ld   $40
              299e 00cd  ld   $cd
              299f 00bf  ld   $bf
              29a0 0075  ld   $75
              29a1 0059  ld   $59
              29a2 0000  ld   $00
              29a3 002b  ld   $2b
              29a4 0064  ld   $64
              29a5 002b  ld   $2b
              29a6 0060  ld   $60
              29a7 0059  ld   $59
              29a8 0000  ld   $00
              29a9 002b  ld   $2b
              29aa 0066  ld   $66
              29ab 0059  ld   $59
              29ac 0001  ld   $01
              29ad 002b  ld   $2b
              29ae 0062  ld   $62
              29af 0021  ld   $21
              29b0 005c  ld   $5c
              29b1 002b  ld   $2b
              29b2 004c  ld   $4c
              29b3 0021  ld   $21
              29b4 005e  ld   $5e
              29b5 002b  ld   $2b
              29b6 004e  ld   $4e
              29b7 0085  ld   $85
              29b8 00a2  ld   $a2
              29b9 0076  ld   $76
              29ba 0085  ld   $85
              29bb 00cf  ld   $cf
              29bc 0065  ld   $65
              29bd 0063  ld   $63
              29be 00ff  ld   $ff
              29bf 00cd  ld   $cd
              29c0 00db  ld   $db
              29c1 0075  ld   $75
              29c2 00cd  ld   $cd
              29c3 00ce  ld   $ce
              29c4 0043  ld   $43
              29c5 0061  ld   $61
              29c6 0072  ld   $72
              29c7 0064  ld   $64
              29c8 0054  ld   $54
              29c9 0079  ld   $79
              29ca 0070  ld   $70
              29cb 0065  ld   $65
              29cc 0020  ld   $20
              29cd 0000  ld   $00
              29ce 0085  ld   $85
              29cf 00a2  ld   $a2
              29d0 0069  ld   $69
              29d1 0021  ld   $21
              29d2 0036  ld   $36
              29d3 0085  ld   $85
              29d4 00a2  ld   $a2
              29d5 0068  ld   $68
              29d6 0085  ld   $85
              29d7 00a2  ld   $a2
              29d8 006d  ld   $6d
              29d9 0063  ld   $63
              29da 00ff  ld   $ff
              29db 0093  ld   $93
              29dc 001b  ld   $1b
              29dd 00ff  ld   $ff
              29de 007a  ld   $7a
              29df 00a0  ld   $a0
              29e0 0057  ld   $57
              29e1 00cd  ld   $cd
              29e2 00af  ld   $af
              29e3 000a  ld   $0a
              29e4 002a  ld   $2a
              29e5 002a  ld   $2a
              29e6 002a  ld   $2a
              29e7 0020  ld   $20
              29e8 0043  ld   $43
              29e9 0061  ld   $61
              29ea 0072  ld   $72
              29eb 0064  ld   $64
              29ec 0042  ld   $42
              29ed 006f  ld   $6f
              29ee 006f  ld   $6f
              29ef 0074  ld   $74
              29f0 000a  ld   $0a
              29f1 0000  ld   $00
              29f2 0085  ld   $85
              29f3 00a2  ld   $a2
              29f4 0069  ld   $69
              29f5 0059  ld   $59
              29f6 0000  ld   $00
              29f7 005e  ld   $5e
              29f8 000e  ld   $0e
              29f9 0085  ld   $85
              29fa 00a2  ld   $a2
              29fb fe00  bra  ac          ;+-----------------------------------+
              29fc fcfd  bra  $29fd       ;|                                   |
              29fd 1404  ld   $04,y       ;| Trampoline for page $2900 lookups |
              29fe e068  jmp  y,$68       ;|                                   |
              29ff c218  st   [$18]       ;+-----------------------------------+
              2a00 0060  ld   $60
              2a01 0085  ld   $85
              2a02 00c3  ld   $c3
              2a03 0079  ld   $79
              2a04 0085  ld   $85
              2a05 00a2  ld   $a2
              2a06 0061  ld   $61
              2a07 0085  ld   $85
              2a08 00bb  ld   $bb
              2a09 0068  ld   $68
              2a0a 0085  ld   $85
              2a0b 00c7  ld   $c7
              2a0c 0060  ld   $60
              2a0d 0035  ld   $35
              2a0e 0072  ld   $72
              2a0f 00d1  ld   $d1
              2a10 0085  ld   $85
              2a11 00a2  ld   $a2
              2a12 0062  ld   $62
              2a13 0085  ld   $85
              2a14 00a2  ld   $a2
              2a15 0079  ld   $79
              2a16 0085  ld   $85
              2a17 00a2  ld   $a2
              2a18 006f  ld   $6f
              2a19 0059  ld   $59
              2a1a 0020  ld   $20
              2a1b 00f0  ld   $f0
              2a1c 0032  ld   $32
              2a1d 0085  ld   $85
              2a1e 00a2  ld   $a2
              2a1f 006d  ld   $6d
              2a20 00cd  ld   $cd
              2a21 00f0  ld   $f0
              2a22 0053  ld   $53
              2a23 0059  ld   $59
              2a24 0053  ld   $53
              2a25 0054  ld   $54
              2a26 0045  ld   $45
              2a27 004d  ld   $4d
              2a28 002e  ld   $2e
              2a29 0047  ld   $47
              2a2a 0054  ld   $54
              2a2b 0031  ld   $31
              2a2c 0020  ld   $20
              2a2d 006e  ld   $6e
              2a2e 006f  ld   $6f
              2a2f 0074  ld   $74
              2a30 0020  ld   $20
              2a31 0066  ld   $66
              2a32 006f  ld   $6f
              2a33 0075  ld   $75
              2a34 006e  ld   $6e
              2a35 0064  ld   $64
              2a36 0021  ld   $21
              2a37 0000  ld   $00
              2a38 0085  ld   $85
              2a39 00a2  ld   $a2
              2a3a 0069  ld   $69
              2a3b 00b4  ld   $b4
              2a3c 0080  ld   $80
              2a3d 0000  ld   $00
              2a3e 0000  ld   $00         ;End of Apps/CardBoot/CardBoot.gt1, size 2922
sys_ReadRomDir:
              2a3f f045  beq  .sysDir#20
              2a40 1024  ld   $24,x
              2a41 1600  ld   ac,y
              2a42 0118  ld   [$18]
              2a43 a00e  suba $0e
              2a44 e200  jmp  y,ac
.sysDir#20:   2a45 1400  ld   $00,y
              2a46 004a  ld   $4a
              2a47 142a  ld   $2a,y
              2a48 e200  jmp  y,ac
              2a49 1400  ld   $00,y
.sysDir#25:   2a4a dc42  st   $42,[y,x++] ;'B'
              2a4b dc6f  st   $6f,[y,x++] ;'o'
              2a4c dc6f  st   $6f,[y,x++] ;'o'
              2a4d dc74  st   $74,[y,x++] ;'t'
              2a4e dc00  st   $00,[y,x++] ;'\x00'
              2a4f dc00  st   $00,[y,x++] ;'\x00'
              2a50 dc00  st   $00,[y,x++] ;'\x00'
              2a51 dc00  st   $00,[y,x++] ;'\x00'
              2a52 00d5  ld   $d5
              2a53 c218  st   [$18]
              2a54 001e  ld   $1e
              2a55 142a  ld   $2a,y
              2a56 e058  jmp  y,$58
              2a57 c219  st   [$19]
.sysDir#39:   2a58 1403  ld   $03,y
              2a59 e0cb  jmp  y,$cb
              2a5a 00ea  ld   $ea
              2a5b 0200  nop              ;160 fillers
              2a5c 0200  nop
              2a5d 0200  nop
              * 160 times
              2afb fe00  bra  ac          ;+-----------------------------------+
              2afc fcfd  bra  $2afd       ;|                                   |
              2afd 1404  ld   $04,y       ;| Trampoline for page $2a00 lookups |
              2afe e068  jmp  y,$68       ;|                                   |
              2aff c218  st   [$18]       ;+-----------------------------------+
              2b00
