* source: /var/www/html/phpbb/ext/at67/gigatronrombuilder/romsrc/ROMv6.asm.py
                                          178   enableListing()
                                          179   #-----------------------------------------------------------------------
                                          180   #
                                          181   #  Start of core
                                          182   #
                                          183   #-----------------------------------------------------------------------
                                          184
                                          185   # Pre-loading the formal interface as a way to get warnings when
                                          186   # accidentally redefined with a different value
                                          187   loadBindings('interface.json')
                                          188   loadBindings('Core/interface-dev.json') # Provisional values for DEVROM
                                          189
                                          190   # Gigatron clock
                                          191   cpuClock = 6.250e+06
                                          192
                                          193   # Output pin assignment for VGA
                                          194   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          195   syncBits = hSync+vSync # Both pulses negative
                                          196
                                          197   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          198   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          199   assert syncBits & hSync != 0
                                          200
                                          201   # VGA 640x480 defaults (to be adjusted below!)
                                          202   vFront = 10     # Vertical front porch
                                          203   vPulse = 2      # Vertical sync pulse
                                          204   vBack  = 33     # Vertical back porch
                                          205   vgaLines = vFront + vPulse + vBack + 480
                                          206   vgaClock = 25.175e+06
                                          207
                                          208   # Video adjustments for Gigatron
                                          209   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          210   #    accept the decreased frame rate, so we restore the frame rate to above
                                          211   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          212   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          213   vFront -= vFrontAdjust
                                          214   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          215   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          216   vPulseExtension = max(0, 8-vPulse)
                                          217   vPulse += vPulseExtension
                                          218   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          219   #    unaffected
                                          220   vBack -= vPulseExtension
                                          221
                                          222   # Start value of vertical blank counter
                                          223   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          224
                                          225   # Mismatch between video lines and sound channels
                                          226   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          227
                                          228   # QQVGA resolution
                                          229   qqVgaWidth      = 160
                                          230   qqVgaHeight     = 120
                                          231
                                          232   # Game controller bits (actual controllers in kit have negative output)
                                          233   # +----------------------------------------+
                                          234   # |       Up                        B*     |
                                          235   # |  Left    Right               B     A*  |
                                          236   # |      Down      Select Start     A      |
                                          237   # +----------------------------------------+ *=Auto fire
                                          238   buttonRight     = 1
                                          239   buttonLeft      = 2
                                          240   buttonDown      = 4
                                          241   buttonUp        = 8
                                          242   buttonStart     = 16
                                          243   buttonSelect    = 32
                                          244   buttonB         = 64
                                          245   buttonA         = 128
                                          246
                                          247   #-----------------------------------------------------------------------
                                          248   #
                                          249   #  RAM page 0: zero-page variables
                                          250   #
                                          251   #-----------------------------------------------------------------------
                                          252
                                          253   # Memory size in pages from auto-detect
                                          254   memSize         = zpByte()
                                          255
                                          256   # The current channel number for sound generation. Advanced every scan line
                                          257   # and independent of the vertical refresh to maintain constant oscillation.
                                          258   channel         = zpByte()
                                          259
                                          260   # Next sound sample being synthesized
                                          261   sample          = zpByte()
                                          262   # To save one instruction in the critical inner loop, `sample' is always
                                          263   # reset with its own address instead of, for example, the value 0. Compare:
                                          264   # 1 instruction reset
                                          265   #       st sample,[sample]
                                          266   # 2 instruction reset:
                                          267   #       ld 0
                                          268   #       st [sample]
                                          269   # The difference is not audible. This is fine when the reset/address
                                          270   # value is low and doesn't overflow with 4 channels added to it.
                                          271   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          272   #       st [sample],[sample]
                                          273   assert 4*63 + sample < 256
                                          274   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          275   assert sample == 3
                                          276
                                          277   # Former bootCount and bootCheck (<= ROMv3)
                                          278   zpReserved      = zpByte() # Recycled and still unused. Candidate future uses:
                                          279                              # - Video driver high address (for alternative video modes)
                                          280                              # - v6502: ADH offset ("MMU")
                                          281                              # - v8080: ???
                                          282   vCpuSelect      = zpByte() # Active interpreter page
                                          283
                                          284   # Entropy harvested from SRAM startup and controller input
                                          285   entropy         = zpByte(3)
                                          286
                                          287   # Visible video
                                          288   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          289                              # Counts up (and is odd) during vertical blank
                                          290   videoModeB      = zpByte() # Handler for every 2nd line (pixel burst or vCPU)
                                          291   videoModeC      = zpByte() # Handler for every 3rd line (pixel burst or vCPU)
                                          292   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          293
                                          294   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          295   videoPulse      = nextVideo # Used for pulse width modulation
                                          296
                                          297   # Frame counter is good enough as system clock
                                          298   frameCount      = zpByte(1)
                                          299
                                          300   # Serial input (game controller)
                                          301   serialRaw       = zpByte() # New raw serial read
                                          302   serialLast      = zpByte() # Previous serial read
                                          303   buttonState     = zpByte() # Clearable button state
                                          304   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          305                              # XXX move to page 1 to free up space
                                          306
                                          307   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          308   # value must be present in AC during a rising hSync edge. It then gets
                                          309   # copied to the XOUT register by the hardware. The XOUT register is only
                                          310   # accessible in this indirect manner because it isn't part of the core
                                          311   # CPU architecture.
                                          312   xout            = zpByte()
                                          313   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          314
                                          315   # vCPU interpreter
                                          316   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          317   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          318   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          319   vLR             = zpByte(2) # Return address, for returning after CALL
                                          320   vSP             = zpByte(1) # Stack pointer
                                          321   vTmp            = zpByte()
                                          322   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          323
                                          324   # Scratch
                                          325   frameX          = zpByte() # Starting byte within page
                                          326   frameY          = zpByte() # Page of current pixel line (updated by videoA)
                                          327
                                          328   # Vertical blank (reuse some variables used in the visible part)
                                          329   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          330   videoSync1      = frameY   # Same during horizontal pulse (0x80 or 0x00)
                                          331
                                          332   # Versioning for GT1 compatibility
                                          333   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          334   romType         = zpByte(1)
                                          335
                                          336   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          337   # Valid bit combinations are:
                                          338   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          339   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          340   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          341   # The main application for this is to free up the high bytes of page 2,3,4.
                                          342   channelMask = symbol('channelMask_v4')
                                          343   assert romType == channelMask
                                          344
                                          345   # SYS function arguments and results/scratch
                                          346   sysFn           = zpByte(2)
                                          347   sysArgs         = zpByte(8)
                                          348
                                          349   # Play sound if non-zero, count down and stop sound when zero
                                          350   soundTimer      = zpByte()
                                          351
                                          352   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          353   ledTimer        = zpByte() # Number of ticks until next LED change
                                          354   ledState_v2     = zpByte() # Current LED state
                                          355   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          356
                                          357
                                          358   # Management of free space in page zero (userVars)
                                          359   # * Programs that only use the features of ROMvx can
                                          360   #   safely use all bytes above userVars_vx except 0x80.
                                          361   # * Programs that use some but not all features of ROMvx
                                          362   #   may exceptionally use bytes between userVars
                                          363   #   and userVars_vx if they avoid using ROM features
                                          364   #   that need them. This is considerably riskier.
                                          365   userVars        = zpByte(0)
                                          366   userVars_v4     = zpByte(0)
                                          367   # Saved vCPU context during vIRQ
                                          368   # Code that uses vCPU interrupts should not use these locations.
                                          369   vIrqSave        = zpByte(6)
                                          370   # Start of safely usable bytes under ROMv5
                                          371   userVars_v5     = zpByte(0)
                                          372   # Start of safely usable bytes under ROMv6
                                          373   userVars_v6     = zpByte(0)
                                          374
                                          375   # [0x80]
                                          376   # Constant 0x01.
                                          377   zpReset(0x80)
                                          378   oneConst        = zpByte(1)
                                          379   userVars2       = zpByte(0)
                                          380
                                          381   # Warning: One should avoid using SYS_ExpanderControl
                                          382   # under ROMv4 overwrites becauses it overwrites 0x81.
                                          383
                                          384
                                          385   #-----------------------------------------------------------------------
                                          386   #
                                          387   #  RAM page 1: video line table
                                          388   #
                                          389   #-----------------------------------------------------------------------
                                          390
                                          391   # Byte 0-239 define the video lines
                                          392   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          393
                                          394   vReset          = 0x01f0
                                          395   vIRQ_v5         = 0x01f6
                                          396   ctrlBits        = 0x01f8
                                          397   videoTop_v5     = 0x01f9 # Number of skip lines
                                          398
                                          399   # Highest bytes are for sound channel variables
                                          400   wavA = 250      # Waveform modulation with `adda'
                                          401   wavX = 251      # Waveform modulation with `xora'
                                          402   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          403   keyH = 253      # Frequency high 8 bits
                                          404   oscL = 254      # Phase low 7 bits
                                          405   oscH = 255      # Phase high 8 bits
                                          406
                                          407   #-----------------------------------------------------------------------
                                          408   #  Memory layout
                                          409   #-----------------------------------------------------------------------
                                          410
                                          411   userCode = 0x0200       # Application vCPU code
                                          412   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          413   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          414
                                          415   #-----------------------------------------------------------------------
                                          416   #  Application definitions
                                          417   #-----------------------------------------------------------------------
                                          418
                                          419   maxTicks = 28//2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          420   minTicks = 14//2                 # vcPU's fastest instruction
                                          421   v6502_maxTicks = 38//2           # Max duration of v6502 processing phase (ticks)
                                          422
                                          423   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          424   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          425   v6502_overhead = 11             # Callee overhead for v6502 (cycles)
                                          426
                                          427   v6502_adjust = (v6502_maxTicks - maxTicks) + (v6502_overhead - vCPU_overhead)//2
                                          428   assert v6502_adjust >= 0        # v6502's overhead is a bit more than vCPU
                                          429
                                          430   def runVcpu(n, ref=None, returnTo=None):
                                          431     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          432
                                          433     - `n' is the number of available Gigatron cycles including overhead.
                                          434       This is converted into interpreter ticks and takes into account
                                          435       the vCPU calling overheads. A `nop' is inserted when necessary
                                          436       for alignment between cycles and ticks.
                                          437     - `returnTo' is where program flow continues after return. If not set
                                          438        explicitely, it will be the first instruction behind the expansion.
                                          439     - If another interpreter than vCPU is active (v6502...), that one
                                          440       must adjust for the timing differences, because runVcpu wouldn't know."""
                                          441
                                          442     overhead = runVcpu_overhead + vCPU_overhead
                                          443     if returnTo == 0x100:         # Special case for videoZ
                                          444       overhead -= 2
                                          445
                                          446     if n is None:
                                          447       # (Clumsily) create a maximum time slice, corresponding to a vTicks
                                          448       # value of 127 (giving 282 cycles). A higher value doesn't work because
                                          449       # then SYS functions that just need 28 cycles (0 excess) won't start.
                                          450       n = (127 + maxTicks) * 2 + overhead
                                          451
                                          452     n -= overhead
                                          453     assert n > 0
                                          454
                                          455     if n % 2 == 1:
                                          456       nop()                       # Tick alignment
                                          457       n -= 1
                                          458     assert n % 2 == 0
                                          459
                                          460     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          461
                                          462     if returnTo != 0x100:
                                          463       if returnTo is None:
                                          464         returnTo = pc() + 5       # Next instruction
                                          465       ld(lo(returnTo))            #0
                                          466       st([vReturn])               #1
                                          467
                                          468     n //= 2
                                          469     n -= maxTicks                 # First instruction always runs
                                          470     assert n < 128
                                          471     assert n >= v6502_adjust
                                          472
                                          473     ld([vCpuSelect],Y)            #2
                                          474     jmp(Y,'ENTER')                #3
                                          475     ld(n)                         #4
                                          476   assert runVcpu_overhead ==       5
                                          477
                                          478   #-----------------------------------------------------------------------
                                          479   #       v6502 definitions
                                          480   #-----------------------------------------------------------------------
                                          481
                                          482   # Registers are zero page variables
                                          483   v6502_PC        = vLR           # Program Counter
                                          484   v6502_PCL       = vLR+0         # Program Counter Low
                                          485   v6502_PCH       = vLR+1         # Program Counter High
                                          486   v6502_S         = vSP           # Stack Pointer (kept as "S+1")
                                          487   v6502_A         = vAC+0         # Accumulator
                                          488   v6502_BI        = vAC+1         # B Input Register (used by SBC)
                                          489   v6502_ADL       = sysArgs+0     # Low Address Register
                                          490   v6502_ADH       = sysArgs+1     # High Address Register
                                          491   v6502_IR        = sysArgs+2     # Instruction Register
                                          492   v6502_P         = sysArgs+3     # Processor Status Register (V flag in bit 7)
                                          493   v6502_Qz        = sysArgs+4     # Quick Status Register for Z flag
                                          494   v6502_Qn        = sysArgs+5     # Quick Status Register for N flag
                                          495   v6502_X         = sysArgs+6     # Index Register X
                                          496   v6502_Y         = sysArgs+7     # Index Register Y
                                          497   v6502_Tmp       = vTmp          # Scratch (may be clobbered outside v6502)
                                          498
                                          499   # MOS 6502 definitions for P register
                                          500   v6502_Cflag = 1                 # Carry Flag (unsigned overflow)
                                          501   v6502_Zflag = 2                 # Zero Flag (all bits zero)
                                          502   v6502_Iflag = 4                 # Interrupt Enable Flag (1=Disable)
                                          503   v6502_Dflag = 8                 # Decimal Enable Flag (aka BCD mode, 1=Enable)
                                          504   v6502_Bflag = 16                # Break (or PHP) Instruction Flag
                                          505   v6502_Uflag = 32                # Unused (always 1)
                                          506   v6502_Vflag = 64                # Overflow Flag (signed overflow)
                                          507   v6502_Nflag = 128               # Negative Flag (bit 7 of result)
                                          508
                                          509   # In emulation it is much faster to keep the V flag in bit 7
                                          510   # This can be corrected when importing/exporting with PHP, PLP, etc
                                          511   v6502_Vemu = 128
                                          512
                                          513   # On overflow:
                                          514   #       """Overflow is set if two inputs with the same sign produce
                                          515   #          a result with a different sign. Otherwise it is clear."""
                                          516   # Formula (without carry/borrow in!):
                                          517   #       (A ^ (A+B)) & (B ^ (A+B)) & 0x80
                                          518   # References:
                                          519   #       http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                                          520   #       http://6502.org/tutorials/vflag.html
                                          521
                                          522   # Memory layout
                                          523   v6502_Stack     = 0x0000        # 0x0100 is already used in the Gigatron
                                          524   #v6502_NMI      = 0xfffa
                                          525   #v6502_RESET    = 0xfffc
                                          526   #v6502_IRQ      = 0xfffe
                                          527
                                          528   #-----------------------------------------------------------------------
                                          529   #
                                          530   #  $0000 ROM page 0: Boot
                                          531   #
                                          532   #-----------------------------------------------------------------------
                                          533
                                          534   align(0x100, size=0x80)
                                          535
                                          536   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         537   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     538   ld(syncBits^hSync,OUT)          # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     539   ld(syncBits,OUT)                # hSync goes up, updating XOUT
                                          540
                                          541   # Setup I/O and RAM expander
              0003 c17f  rand $7f         542   ctrl(0b01111111)                # Reset signal (default state | 0x3)
              0004 c17c  rand $7c         543   ctrl(0b01111100)                # Disable SPI slaves, enable RAM, bank 1
                                          544   #      ^^^^^^^^
                                          545   #      |||||||`-- SCLK
                                          546   #      ||||||`--- Not connected
                                          547   #      |||||`---- /SS0
                                          548   #      ||||`----- /SS1
                                          549   #      |||`------ /SS2
                                          550   #      ||`------- /SS3
                                          551   #      |`-------- B0
                                          552   #      `--------- B1
                                          553   # bit15 --------- MOSI = 0
                                          554
                                          555   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0005 0001  ld   $01         556   ld(1)                           # Quick RAM test and count
                                          557   label('.countMem0')
.countMem0:   0006 d601  st   [$01],y     558   st([memSize],Y)                 # Store in RAM and load AC in Y
              0007 00ff  ld   $ff         559   ld(255)
              0008 6900  xora [y,$00]     560   xora([Y,0])                     # Invert value from memory
              0009 ca00  st   [y,$00]     561   st([Y,0])                       # Test RAM by writing the new value
              000a c200  st   [$00]       562   st([0])                         # Copy result in [0]
              000b 6900  xora [y,$00]     563   xora([Y,0])                     # Read back and compare if written ok
              000c ec0c  bne  $000c       564   bne(pc())                       # Loop forever on RAM failure here
              000d 00ff  ld   $ff         565   ld(255)
              000e 6900  xora [y,$00]     566   xora([Y,0])                     # Invert memory value again
              000f ca00  st   [y,$00]     567   st([Y,0])                       # To restore original value
              0010 6100  xora [$00]       568   xora([0])                       # Compare with inverted copy
              0011 f015  beq  .countMem1  569   beq('.countMem1')               # If equal, we wrapped around
              0012 0101  ld   [$01]       570   ld([memSize])
              0013 fc06  bra  .countMem0  571   bra('.countMem0')               # Loop to test next address line
              0014 8200  adda ac          572   adda(AC)                        # Executes in the branch delay slot!
                                          573   label('.countMem1')
                                          574
                                          575   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          576   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          577   # Real-world switches normally bounce shorter than that.
                                          578   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          579   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          580   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          581
.countMem1:   0015 00ff  ld   $ff         582   ld(255)                         # Debounce reset button
                                          583   label('.debounce')
.debounce:    0016 c200  st   [$00]       584   st([0])
              0017 ec17  bne  $0017       585   bne(pc())
              0018 a001  suba $01         586   suba(1)                         # Branch delay slot
              0019 0100  ld   [$00]       587   ld([0])
              001a ec16  bne  .debounce   588   bne('.debounce')
              001b a001  suba $01         589   suba(1)                         # Branch delay slot
                                          590
                                          591   # Update LEDs (memory is present and counted, reset is stable)
              001c 0001  ld   $01         592   ld(0b0001)                      # LEDs |*OOO|
              001d 1880  ld   $80,out     593   ld(syncBits^hSync,OUT)
              001e 18c0  ld   $c0,out     594   ld(syncBits,OUT)
                                          595
                                          596   # Scan the entire RAM space to collect entropy for a random number generator.
                                          597   # The 16-bit address space is scanned, even if less RAM was detected.
              001f 0000  ld   $00         598   ld(0)                           # Collect entropy from RAM
              0020 d218  st   [$18],x     599   st([vAC+0],X)
              0021 d619  st   [$19],y     600   st([vAC+1],Y)
                                          601   label('.initEnt0')
.initEnt0:    0022 0106  ld   [$06]       602   ld([entropy+0])
              0023 f426  bge  .initEnt1   603   bpl('.initEnt1')
              0024 8d00  adda [y,x]       604   adda([Y,X])
              0025 60bf  xora $bf         605   xora(191)
                                          606   label('.initEnt1')
.initEnt1:    0026 c206  st   [$06]       607   st([entropy+0])
              0027 0107  ld   [$07]       608   ld([entropy+1])
              0028 f42b  bge  .initEnt2   609   bpl('.initEnt2')
              0029 8106  adda [$06]       610   adda([entropy+0])
              002a 60c1  xora $c1         611   xora(193)
                                          612   label('.initEnt2')
.initEnt2:    002b c207  st   [$07]       613   st([entropy+1])
              002c 8108  adda [$08]       614   adda([entropy+2])
              002d c208  st   [$08]       615   st([entropy+2])
              002e 0118  ld   [$18]       616   ld([vAC+0])
              002f 8001  adda $01         617   adda(1)
              0030 ec22  bne  .initEnt0   618   bne('.initEnt0')
              0031 d218  st   [$18],x     619   st([vAC+0],X)
              0032 0119  ld   [$19]       620   ld([vAC+1])
              0033 8001  adda $01         621   adda(1)
              0034 ec22  bne  .initEnt0   622   bne('.initEnt0')
              0035 d619  st   [$19],y     623   st([vAC+1],Y)
                                          624
                                          625   # Update LEDs
              0036 0003  ld   $03         626   ld(0b0011)                      # LEDs |**OO|
              0037 1880  ld   $80,out     627   ld(syncBits^hSync,OUT)
              0038 18c0  ld   $c0,out     628   ld(syncBits,OUT)
                                          629
                                          630   # vCPU reset handler
              0039 00ee  ld   $ee         631   ld((vReset&255)-2)              # Setup vCPU reset handler
              003a c216  st   [$16]       632   st([vPC])
              003b 9002  adda $02,x       633   adda(2,X)
              003c 0001  ld   $01         634   ld(vReset>>8)
              003d d617  st   [$17],y     635   st([vPC+1],Y)
              003e dc59  st   $59,[y,x++] 636   st('LDI',             [Y,Xpp])
              003f dc5f  st   $5f,[y,x++] 637   st('SYS_Reset_88',    [Y,Xpp])
              0040 dc2b  st   $2b,[y,x++] 638   st('STW',             [Y,Xpp])
              0041 dc22  st   $22,[y,x++] 639   st(sysFn,             [Y,Xpp])
              0042 dcb4  st   $b4,[y,x++] 640   st('SYS',             [Y,Xpp])  # SYS -> SYS_Reset_88 -> SYS_Exec_88
              0043 dce2  st   $e2,[y,x++] 641   st(256-88//2+maxTicks,[Y,Xpp])
              0044 dc00  st   $00,[y,x++] 642   st(0,                 [Y,Xpp])  # vIRQ_v5: Disable interrupts
              0045 dc00  st   $00,[y,x++] 643   st(0,                 [Y,Xpp])  # vIRQ_v5
              0046 dcfc  st   $fc,[y,x++] 644   st(0b11111100,        [Y,Xpp])  # Control register
              0047 dc00  st   $00,[y,x++] 645   st(0,                 [Y,Xpp])  # videoTop
                                          646
              0048 0002  ld   $02         647   ld(hi('ENTER'))                 # Active interpreter (vCPU,v6502) = vCPU
              0049 c205  st   [$05]       648   st([vCpuSelect])
                                          649
              004a 00ff  ld   $ff         650   ld(255)                         # Setup serial input
              004b c20e  st   [$0e]       651   st([frameCount])
              004c c20f  st   [$0f]       652   st([serialRaw])
              004d c210  st   [$10]       653   st([serialLast])
              004e c211  st   [$11]       654   st([buttonState])
              004f c212  st   [$12]       655   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          656
              0050 0007  ld   $07         657   ld(0b0111)                      # LEDs |***O|
              0051 1880  ld   $80,out     658   ld(syncBits^hSync,OUT)
              0052 18c0  ld   $c0,out     659   ld(syncBits,OUT)
                                          660
              0053 0000  ld   $00         661   ld(0)
              0054 c200  st   [$00]       662   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
              0055 c202  st   [$02]       663   st([channel])
              0056 c22c  st   [$2c]       664   st([soundTimer])
                                          665
              0057 000f  ld   $0f         666   ld(0b1111)                      # LEDs |****|
              0058 1880  ld   $80,out     667   ld(syncBits^hSync,OUT)
              0059 18c0  ld   $c0,out     668   ld(syncBits,OUT)
              005a c213  st   [$13]       669   st([xout])                      # Setup for control by video loop
              005b c214  st   [$14]       670   st([xoutMask])
                                          671
              005c 1401  ld   $01,y       672   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005d e003  jmp  y,$03       673   jmp(Y,'startVideo')
              005e c22e  st   [$2e]       674   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          675
                                          676   #-----------------------------------------------------------------------
                                          677   # Extension SYS_Reset_88: Soft reset
                                          678   #-----------------------------------------------------------------------
                                          679
                                          680   # SYS_Reset_88 initiates an immediate Gigatron reset from within the vCPU.
                                          681   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          682   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          683   # some vCPU bootstrapping code gets loaded with SYS_Exec_88.
                                          684   # !!! This function was REMOVED from interface.json
                                          685   # !!! Better use vReset as generic entry point for soft reset
                                          686
                                          687   # ROM type (see also Docs/GT1-files.txt)
                                          688   romTypeValue = symbol('romTypeValue_ROMv6')
                                          689
                                          690   label('SYS_Reset_88')
                                          691   assert pc()>>8 == 0
                                          692   assert (romTypeValue & 7) == 0
SYS_Reset_88: 005f 0048  ld   $48         693   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              0060 c221  st   [$21]       694   st([romType])                   #16
              0061 0000  ld   $00         695   ld(0)                           #17
              0062 c21c  st   [$1c]       696   st([vSP])                       #18 vSP
              0063 1401  ld   $01,y       697   ld(hi('videoTop_v5'),Y)         #19
              0064 caf9  st   [y,$f9]     698   st([Y,lo('videoTop_v5')])       #20 Show all 120 pixel lines
              0065 caf6  st   [y,$f6]     699   st([Y,vIRQ_v5])                 #21 Disable vIRQ dispatch
              0066 caf7  st   [y,$f7]     700   st([Y,vIRQ_v5+1])               #22
              0067 c22c  st   [$2c]       701   st([soundTimer])                #23 soundTimer
                                          702   assert userCode&255 == 0
              0068 c21a  st   [$1a]       703   st([vLR])                       #24 vLR
              0069 0002  ld   $02         704   ld(userCode>>8)                 #25
              006a c21b  st   [$1b]       705   st([vLR+1])                     #26
              006b 00f6  ld   $f6         706   ld('nopixels')                  #27 Video mode 3 (fast)
              006c c20a  st   [$0a]       707   st([videoModeB])                #28
              006d c20b  st   [$0b]       708   st([videoModeC])                #29
              006e c20c  st   [$0c]       709   st([videoModeD])                #30
              006f 00ad  ld   $ad         710   ld('SYS_Exec_88')               #31 SYS_Exec_88
              0070 c222  st   [$22]       711   st([sysFn])                     #32 High byte (remains) 0
              0071 000e  ld   $0e         712   ld('Reset')                     #33 Reset.gt1 from EPROM
              0072 c224  st   [$24]       713   st([sysArgs+0])                 #34
              0073 0015  ld   $15         714   ld(hi('Reset'))                 #35
              0074 c225  st   [$25]       715   st([sysArgs+1])                 #36
              0075 0116  ld   [$16]       716   ld([vPC])                       #37 Force second SYS call
              0076 a002  suba $02         717   suba(2)                         #38
              0077 c216  st   [$16]       718   st([vPC])                       #39
                                          719   # Reset expansion board
              0078 c17f  rand $7f         720   ctrl(0b01111111)                #40 Reset signal (default state | 0x3)
              0079 c17c  rand $7c         721   ctrl(0b01111100)                #41 Default state.
              007a 011d  ld   [$1d]       722   ld([vTmp])                      #42 Always load after ctrl
                                          723   # Return to interpreter
              007b 1403  ld   $03,y       724   ld(hi('REENTER'),Y)             #43
              007c e0cb  jmp  y,$cb       725   jmp(Y,'REENTER')                #44
              007d 00e8  ld   $e8         726   ld(-48/2)                       #45
                                          727
                                          728   #-----------------------------------------------------------------------
                                          729   # Placeholders for future SYS functions. This works as a kind of jump
                                          730   # table. The indirection allows SYS implementations to be moved around
                                          731   # between ROM versions, at the expense of 2 clock cycles (or 1). When
                                          732   # the function is not present it just acts as a NOP. Of course, when a
                                          733   # SYS function must be patched or extended it needs to have budget for
                                          734   # that in its declared maximum cycle count.
                                          735   #
                                          736   # Technically the same goal can be achieved by starting each function
                                          737   # with 2 nop's, or by overdeclaring their duration in the first place
                                          738   # (a bit is still wise to do). But this can result in fragmentation
                                          739   # of future ROM images. The indirection avoids that.
                                          740   #
                                          741   # An added advantage of having these in ROM page 0 is that it saves one
                                          742   # byte when setting sysFn: LDI+STW (4 bytes) instead of LDWI+STW (5 bytes)
                                          743   #-----------------------------------------------------------------------
                                          744
              007e 0200  nop              745   align(0x80, size=0x80)
              007f 0200  nop
                                          746   assert pc() == 0x80
                                          747
              0080 1403  ld   $03,y       748   ld(hi('REENTER'),Y)             #15 slot 0x80
              0081 e0cb  jmp  y,$cb       749   jmp(Y,'REENTER')                #16
              0082 00f6  ld   $f6         750   ld(-20/2)                       #17
                                          751
              0083 1403  ld   $03,y       752   ld(hi('REENTER'),Y)             #15 slot 0x83
              0084 e0cb  jmp  y,$cb       753   jmp(Y,'REENTER')                #16
              0085 00f6  ld   $f6         754   ld(-20/2)                       #17
                                          755
              0086 1403  ld   $03,y       756   ld(hi('REENTER'),Y)             #15 slot 0x86
              0087 e0cb  jmp  y,$cb       757   jmp(Y,'REENTER')                #16
              0088 00f6  ld   $f6         758   ld(-20/2)                       #17
                                          759
              0089 1403  ld   $03,y       760   ld(hi('REENTER'),Y)             #15 slot 0x89
              008a e0cb  jmp  y,$cb       761   jmp(Y,'REENTER')                #16
              008b 00f6  ld   $f6         762   ld(-20/2)                       #17
                                          763
              008c 1403  ld   $03,y       764   ld(hi('REENTER'),Y)             #15 slot 0x8c
              008d e0cb  jmp  y,$cb       765   jmp(Y,'REENTER')                #16
              008e 00f6  ld   $f6         766   ld(-20/2)                       #17
                                          767
              008f 1403  ld   $03,y       768   ld(hi('REENTER'),Y)             #15 slot 0x8f
              0090 e0cb  jmp  y,$cb       769   jmp(Y,'REENTER')                #16
              0091 00f6  ld   $f6         770   ld(-20/2)                       #17
                                          771
              0092 1403  ld   $03,y       772   ld(hi('REENTER'),Y)             #15 slot 0x92
              0093 e0cb  jmp  y,$cb       773   jmp(Y,'REENTER')                #16
              0094 00f6  ld   $f6         774   ld(-20/2)                       #17
                                          775
              0095 1403  ld   $03,y       776   ld(hi('REENTER'),Y)             #15 slot 0x95
              0096 e0cb  jmp  y,$cb       777   jmp(Y,'REENTER')                #16
              0097 00f6  ld   $f6         778   ld(-20/2)                       #17
                                          779
              0098 1403  ld   $03,y       780   ld(hi('REENTER'),Y)             #15 slot 0x98
              0099 e0cb  jmp  y,$cb       781   jmp(Y,'REENTER')                #16
              009a 00f6  ld   $f6         782   ld(-20/2)                       #17
                                          783
              009b 1403  ld   $03,y       784   ld(hi('REENTER'),Y)             #15 slot 0x9b
              009c e0cb  jmp  y,$cb       785   jmp(Y,'REENTER')                #16
              009d 00f6  ld   $f6         786   ld(-20/2)                       #17
                                          787
                                          788   #-----------------------------------------------------------------------
                                          789   # Extension SYS_Multiply_s16_v6_66: 16 bit multiplication
                                          790   #-----------------------------------------------------------------------
                                          791   #
                                          792   # Computes C = C + A * B where A,B,C are 16 bits integers.
                                          793   # Returns 16 bits result in vAC as well
                                          794   #
                                          795   #       sysArgs[0:1]    Multiplicand A (in)
                                          796   #       sysArgs[2:3]    Multiplicand B (in)
                                          797   #       sysArgs[4:5]    C (inout)
                                          798   #       sysArgs[6:7]    Must be set to 1 (in)
                                          799   #
                                          800   # Credits: at67
                                          801
                                          802   label('SYS_Multiply_s16_v6_66')
SYS_Multiply_s16_v6_66:
              009e 1414  ld   $14,y       803   ld(hi('sys_Multiply_s16'),Y)    #15 slot 0x9e
              009f e05c  jmp  y,$5c       804   jmp(Y,'sys_Multiply_s16')       #16
              00a0 012a  ld   [$2a]       805   ld([sysArgs+6])                 #17 load mask.lo
                                          806
                                          807   #-----------------------------------------------------------------------
                                          808   # Extension SYS_Divide_s16_v6_80: 15 bit division
                                          809   #-----------------------------------------------------------------------
                                          810   #
                                          811   # Computes the Euclidean division of 0<=A<=32767 and 0<B<=32767.
                                          812   # An external wrapper is needed to handle signed division or
                                          813   # to handle unsigned division with full range.
                                          814   #
                                          815   #       sysArgs[0:1]    Dividend A (in) Quotient (out)
                                          816   #       sysArgs[2:3]    Divisor B (in)
                                          817   #       sysArgs[4:5]    Must be set to 0 (in) Remainder (out)
                                          818   #       sysArgs[6:7]    Must be set to 1 (in)
                                          819   #
                                          820   # Credits: at67
                                          821
                                          822   label('SYS_Divide_s16_v6_80')
SYS_Divide_s16_v6_80:
              00a1 1414  ld   $14,y       823   ld(hi('sys_Divide_s16'),Y)      #15 slot 0xa1
              00a2 e094  jmp  y,$94       824   jmp(Y,'sys_Divide_s16')         #16
              00a3 0128  ld   [$28]       825   ld([sysArgs+4])                 #17
                                          826
                                          827   #-----------------------------------------------------------------------
                                          828   # More placeholders for future SYS functions
                                          829   #-----------------------------------------------------------------------
                                          830
              00a4 1403  ld   $03,y       831   ld(hi('REENTER'),Y)             #15 slot 0xa4
              00a5 e0cb  jmp  y,$cb       832   jmp(Y,'REENTER')                #16
              00a6 00f6  ld   $f6         833   ld(-20/2)                       #17
                                          834
              00a7 1403  ld   $03,y       835   ld(hi('REENTER'),Y)             #15 slot 0xa7
              00a8 e0cb  jmp  y,$cb       836   jmp(Y,'REENTER')                #16
              00a9 00f6  ld   $f6         837   ld(-20/2)                       #17
                                          838
              00aa 1403  ld   $03,y       839   ld(hi('REENTER'),Y)             #15 slot 0xaa
              00ab e0cb  jmp  y,$cb       840   jmp(Y,'REENTER')                #16
              00ac 00f6  ld   $f6         841   ld(-20/2)                       #17
                                          842
                                          843   #-----------------------------------------------------------------------
                                          844   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          845   #-----------------------------------------------------------------------
                                          846   #
                                          847   # This loads the vCPU code with consideration of the current vSP
                                          848   # Used during reset, but also for switching between applications or for
                                          849   # loading data from ROM from within an application (overlays).
                                          850   #
                                          851   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          852   # on top of lookup tables.
                                          853   #
                                          854   # Variables:
                                          855   #       sysArgs[0:1]    ROM pointer (in)
                                          856   #       sysArgs[2:3]    RAM pointer (changed)
                                          857   #       sysArgs[4]      State counter (changed)
                                          858   #       vLR             vCPU continues here (in)
                                          859
                                          860   label('SYS_Exec_88')
SYS_Exec_88:  00ad 1412  ld   $12,y       861   ld(hi('sys_Exec'),Y)            #15
              00ae e042  jmp  y,$42       862   jmp(Y,'sys_Exec')               #16
              00af 0000  ld   $00         863   ld(0)                           #17 Address of loader on zero page
                                          864
                                          865   #-----------------------------------------------------------------------
                                          866   # More placeholders for future SYS functions
                                          867   #-----------------------------------------------------------------------
                                          868
              00b0 1403  ld   $03,y       869   ld(hi('REENTER'),Y)             #15 slot 0xb0
              00b1 e0cb  jmp  y,$cb       870   jmp(Y,'REENTER')                #16
              00b2 00f6  ld   $f6         871   ld(-20/2)                       #17
                                          872
              00b3 1403  ld   $03,y       873   ld(hi('REENTER'),Y)             #15 slot 0xb3
              00b4 e0cb  jmp  y,$cb       874   jmp(Y,'REENTER')                #16
              00b5 00f6  ld   $f6         875   ld(-20/2)                       #17
                                          876
              00b6 1403  ld   $03,y       877   ld(hi('REENTER'),Y)             #15 slot 0xb6
              00b7 e0cb  jmp  y,$cb       878   jmp(Y,'REENTER')                #16
              00b8 00f6  ld   $f6         879   ld(-20/2)                       #17
                                          880
              00b9 1403  ld   $03,y       881   ld(hi('REENTER'),Y)             #15 slot 0xb9
              00ba e0cb  jmp  y,$cb       882   jmp(Y,'REENTER')                #16
              00bb 00f6  ld   $f6         883   ld(-20/2)                       #17
                                          884
              00bc 1403  ld   $03,y       885   ld(hi('REENTER'),Y)             #15 slot 0xbc
              00bd e0cb  jmp  y,$cb       886   jmp(Y,'REENTER')                #16
              00be 00f6  ld   $f6         887   ld(-20/2)                       #17
                                          888
              00bf 1403  ld   $03,y       889   ld(hi('REENTER'),Y)             #15 slot 0xbf
              00c0 e0cb  jmp  y,$cb       890   jmp(Y,'REENTER')                #16
              00c1 00f6  ld   $f6         891   ld(-20/2)                       #17
                                          892
              00c2 1403  ld   $03,y       893   ld(hi('REENTER'),Y)             #15 slot 0xc2
              00c3 e0cb  jmp  y,$cb       894   jmp(Y,'REENTER')                #16
              00c4 00f6  ld   $f6         895   ld(-20/2)                       #17
                                          896
              00c5 1403  ld   $03,y       897   ld(hi('REENTER'),Y)             #15 slot 0xc5
              00c6 e0cb  jmp  y,$cb       898   jmp(Y,'REENTER')                #16
              00c7 00f6  ld   $f6         899   ld(-20/2)                       #17
                                          900
              00c8 1403  ld   $03,y       901   ld(hi('REENTER'),Y)             #15 slot 0xc8
              00c9 e0cb  jmp  y,$cb       902   jmp(Y,'REENTER')                #16
              00ca 00f6  ld   $f6         903   ld(-20/2)                       #17
                                          904
              00cb 1403  ld   $03,y       905   ld(hi('REENTER'),Y)             #15 slot 0xcb
              00cc e0cb  jmp  y,$cb       906   jmp(Y,'REENTER')                #16
              00cd 00f6  ld   $f6         907   ld(-20/2)                       #17
                                          908
              00ce 1403  ld   $03,y       909   ld(hi('REENTER'),Y)             #15 slot 0xce
              00cf e0cb  jmp  y,$cb       910   jmp(Y,'REENTER')                #16
              00d0 00f6  ld   $f6         911   ld(-20/2)                       #17
                                          912
              00d1 1403  ld   $03,y       913   ld(hi('REENTER'),Y)             #15 slot 0xd1
              00d2 e0cb  jmp  y,$cb       914   jmp(Y,'REENTER')                #16
              00d3 00f6  ld   $f6         915   ld(-20/2)                       #17
                                          916
              00d4 1403  ld   $03,y       917   ld(hi('REENTER'),Y)             #15 slot 0xd4
              00d5 e0cb  jmp  y,$cb       918   jmp(Y,'REENTER')                #16
              00d6 00f6  ld   $f6         919   ld(-20/2)                       #17
                                          920
              00d7 1403  ld   $03,y       921   ld(hi('REENTER'),Y)             #15 slot 0xd7
              00d8 e0cb  jmp  y,$cb       922   jmp(Y,'REENTER')                #16
              00d9 00f6  ld   $f6         923   ld(-20/2)                       #17
                                          924
              00da 1403  ld   $03,y       925   ld(hi('REENTER'),Y)             #15 slot 0xda
              00db e0cb  jmp  y,$cb       926   jmp(Y,'REENTER')                #16
              00dc 00f6  ld   $f6         927   ld(-20/2)                       #17
                                          928
              00dd 1403  ld   $03,y       929   ld(hi('REENTER'),Y)             #15 slot 0xdd
              00de e0cb  jmp  y,$cb       930   jmp(Y,'REENTER')                #16
              00df 00f6  ld   $f6         931   ld(-20/2)                       #17
                                          932
              00e0 1403  ld   $03,y       933   ld(hi('REENTER'),Y)             #15 slot 0xe0
              00e1 e0cb  jmp  y,$cb       934   jmp(Y,'REENTER')                #16
              00e2 00f6  ld   $f6         935   ld(-20/2)                       #17
                                          936
                                          937   #-----------------------------------------------------------------------
                                          938   # Extension SYS_ScanMemoryExt_v6_50
                                          939   #-----------------------------------------------------------------------
                                          940
                                          941   # SYS function for searching a byte in a 0 to 256 bytes string located
                                          942   # in a different bank. Doesn't cross page boundaries. Returns a
                                          943   # pointer to the target if found or zero. Temporarily deselects SPI
                                          944   # devices.
                                          945   #
                                          946   # sysArgs[0:1]            Start address
                                          947   # sysArgs[2], sysArgs[3]  Bytes to locate in the string
                                          948   # vACL                    Length of the string (0 means 256)
                                          949   # vACH                    Bit 6 and 7 contain the bank number
                                          950
                                          951   label('SYS_ScanMemoryExt_v6_50')
SYS_ScanMemoryExt_v6_50:
              00e3 1414  ld   $14,y       952   ld(hi('sys_ScanMemoryExt'),Y)   #15 slot 0xe3
              00e4 e027  jmp  y,$27       953   jmp(Y,'sys_ScanMemoryExt')      #16
              00e5 0119  ld   [$19]       954   ld([vAC+1])                     #17
                                          955
                                          956
                                          957   #-----------------------------------------------------------------------
                                          958   # Extension SYS_ScanMemory_v6_50
                                          959   #-----------------------------------------------------------------------
                                          960
                                          961   # SYS function for searching a byte in a 0 to 256 bytes string.
                                          962   # Returns a pointer to the target if found or zero.  Doesn't cross
                                          963   # page boundaries.
                                          964   #
                                          965   # sysArgs[0:1]            Start address
                                          966   # sysArgs[2], sysArgs[3]  Bytes to locate in the string
                                          967   # vACL                    Length of the string (0 means 256)
                                          968
                                          969   label('SYS_ScanMemory_v6_50')
SYS_ScanMemory_v6_50:
              00e6 1414  ld   $14,y       970   ld(hi('sys_ScanMemory'),Y)      #15 slot 0xe6
              00e7 e000  jmp  y,$00       971   jmp(Y,'sys_ScanMemory')         #16
              00e8 1525  ld   [$25],y     972   ld([sysArgs+1],Y)               #17
                                          973
                                          974   #-----------------------------------------------------------------------
                                          975   # Extension SYS_CopyMemory_v6_80
                                          976   #-----------------------------------------------------------------------
                                          977
                                          978   # SYS function for copying 1..256 bytes
                                          979   #
                                          980   # sysArgs[0:1]    Destination address
                                          981   # sysArgs[2:3]    Source address
                                          982   # vAC[0]          Count (0 means 256)
                                          983   #
                                          984   # Doesn't cross page boundaries.
                                          985   # Overwrites sysArgs[4:7] and vLR.
                                          986
                                          987   label('SYS_CopyMemory_v6_80')
SYS_CopyMemory_v6_80:
              00e9 1413  ld   $13,y       988   ld(hi('sys_CopyMemory'),Y)       # 15 slot 0xe9
              00ea e000  jmp  y,$00       989   jmp(Y, 'sys_CopyMemory')         # 16
              00eb 0118  ld   [$18]       990   ld([vAC])                        # 17
                                          991
                                          992   #-----------------------------------------------------------------------
                                          993   # Extension SYS_CopyMemoryExt_v6_100
                                          994   #-----------------------------------------------------------------------
                                          995
                                          996   # SYS function for copying 1..256 bytes across banks
                                          997   #
                                          998   # sysArgs[0:1]  Destination address
                                          999   # sysArgs[2:3]  Source address
                                          1000  # vAC[0]        Count (0 means 256)
                                          1001  # vAC[1]        Bits 7 and 6 contain the destination bank number,
                                          1002  #               and bits 5 and 4 the source bank number.
                                          1003  #
                                          1004  # Doesn't cross page boundaries.
                                          1005  # Overwrites sysArgs[4:7], vLR, and vTmp.
                                          1006  # Temporarily deselect all SPI devices.
                                          1007  # Should not call without expansion board
                                          1008
                                          1009  label('SYS_CopyMemoryExt_v6_100')
SYS_CopyMemoryExt_v6_100:
              00ec 1413  ld   $13,y       1010  ld(hi('sys_CopyMemoryExt'),Y)    # 15 slot 0xec
              00ed e078  jmp  y,$78       1011  jmp(Y, 'sys_CopyMemoryExt')      # 16
              00ee 0119  ld   [$19]       1012  ld([vAC+1])                      # 17
                                          1013
                                          1014  #-----------------------------------------------------------------------
                                          1015  # Extension SYS_ReadRomDir_v5_80
                                          1016  #-----------------------------------------------------------------------
                                          1017
                                          1018  # Get next entry from ROM file system. Use vAC=0 to get the first entry.
                                          1019
                                          1020  # Variables:
                                          1021  #       vAC             Start address of current entry (inout)
                                          1022  #       sysArgs[0:7]    File name, padded with zeroes (out)
                                          1023
                                          1024  label('SYS_ReadRomDir_v5_80')
SYS_ReadRomDir_v5_80:
              00ef 1431  ld   $31,y       1025  ld(hi('sys_ReadRomDir'),Y)      #15
              00f0 e049  jmp  y,$49       1026  jmp(Y,'sys_ReadRomDir')         #16
              00f1 0119  ld   [$19]       1027  ld([vAC+1])                     #17
                                          1028
              00f2 0200  nop              1029  fillers(until=symbol('SYS_Out_22') & 255)
              00f3 0200  nop
                                          1030
                                          1031  #-----------------------------------------------------------------------
                                          1032  # Extension SYS_Out_22
                                          1033  #-----------------------------------------------------------------------
                                          1034
                                          1035  # Send byte to output port
                                          1036  #
                                          1037  # Variables:
                                          1038  #       vAC
                                          1039
                                          1040  label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   1041  ld([sysArgs+0],OUT)             #15
              00f5 0200  nop              1042  nop()                           #16
              00f6 1403  ld   $03,y       1043  ld(hi('REENTER'),Y)             #17
              00f7 e0cb  jmp  y,$cb       1044  jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         1045  ld(-22/2)                       #19
                                          1046
                                          1047  #-----------------------------------------------------------------------
                                          1048  # Extension SYS_In_24
                                          1049  #-----------------------------------------------------------------------
                                          1050
                                          1051  # Read a byte from the input port
                                          1052  #
                                          1053  # Variables:
                                          1054  #       vAC
                                          1055
                                          1056  label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    1057  st(IN, [vAC])                   #15
              00fa 0000  ld   $00         1058  ld(0)                           #16
              00fb c219  st   [$19]       1059  st([vAC+1])                     #17
              00fc 0200  nop              1060  nop()                           #18
              00fd 1403  ld   $03,y       1061  ld(hi('REENTER'),Y)             #19
              00fe e0cb  jmp  y,$cb       1062  jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         1063  ld(-24/2)                       #21
                                          1064
                                          1065  assert pc()&255 == 0
                                          1066
                                          1067  #-----------------------------------------------------------------------
                                          1068  #
                                          1069  #  $0100 ROM page 1: Video loop vertical blank
                                          1070  #
                                          1071  #-----------------------------------------------------------------------
                                          1072  align(0x100, size=0x100)
                                          1073
                                          1074  # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          1075  # For benchmarking purposes. This still has the overhead for the vTicks
                                          1076  # administration, time slice granularity etc.
                                          1077  label('videoZ')
                                          1078  videoZ = pc()
videoZ:       0100 1505  ld   [$05],y     1079  runVcpu(None, '---- novideo', returnTo=videoZ)
              0101 e0ff  jmp  y,$ff
              0102 007f  ld   $7f
                                          1080
                                          1081  label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         1082  ld(syncBits)
                                          1083
                                          1084  # Start of vertical blank interval
                                          1085  label('vBlankStart')
vBlankStart:  0104 c21f  st   [$1f]       1086  st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         1087  ld(syncBits^hSync)              #33
              0106 c220  st   [$20]       1088  st([videoSync1])                #34
                                          1089
                                          1090  # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         1091  ld(videoYline0)                 #35
              0108 c209  st   [$09]       1092  st([videoY])                    #36
                                          1093
                                          1094  # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         1095  ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       1096  st([0x80])                      #38
              010b 810e  adda [$0e]       1097  adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       1098  st([frameCount])                #40
                                          1099
                                          1100  # Mix entropy (11 cycles)
              010d 6107  xora [$07]       1101  xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       1102  xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       1103  adda([entropy+0])               #43
              0110 c206  st   [$06]       1104  st([entropy+0])                 #44
              0111 8108  adda [$08]       1105  adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       1106  st([entropy+2])                 #46
              0113 e816  blt  $0116       1107  bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       1108  bra(pc()+3)                     #48
              0115 6053  xora $53         1109  xora(64+16+2+1)                 #49
              0116 606c  xora $6c         1110  xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       1111  adda([entropy+1])               #50
              0118 c207  st   [$07]       1112  st([entropy+1])                 #51
                                          1113
                                          1114  # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       1115  ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       1116  beq(pc()+3)                     #53
              011b fc1e  bra  $011e       1117  bra(pc()+3)                     #54
              011c a001  suba $01         1118  suba(1)                         #55
              011d 012f  ld   [$2f]       1119  ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       1120  st([ledTimer])                  #56
              011f f022  beq  $0122       1121  beq(pc()+3)                     #57
              0120 fc23  bra  $0123       1122  bra(pc()+3)                     #58
              0121 0000  ld   $00         1123  ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         1124  ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       1125  adda([ledState_v2])             #60
              0124 ec27  bne  $0127       1126  bne(pc()+3)                     #61
              0125 fc28  bra  $0128       1127  bra(pc()+3)                     #62
              0126 00e8  ld   $e8         1128  ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    1129  bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       1130  st([ledState_v2])               #64
              0129 8048  adda $48         1131  adda('.leds#69')                #65
              012a fe00  bra  ac          1132  bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    1133  bra('.leds#69')                 #67 Single-instruction subroutine
                                          1134
                                          1135  label('.leds#65')
.leds#65:     012c 000f  ld   $0f         1136  ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       1137  st([ledState_v2])               #66
              012e fc48  bra  .leds#69    1138  bra('.leds#69')                 #67
              012f 2114  anda [$14]       1139  anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          1140
              0130 000f  ld   $0f         1141  ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         1142  ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         1143  ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         1144  ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         1145  ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         1146  ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         1147  ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         1148  ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         1149  ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         1150  ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         1151  ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         1152  ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         1153  ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         1154  ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         1155  ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         1156  ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         1157  ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         1158  ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         1159  ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         1160  ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         1161  ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         1162  ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         1163  ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         1164  ld(0b1110)                      #68 LEDs |O***| offset -1
                                          1165  label('.leds#69')
.leds#69:     0148 c214  st   [$14]       1166  st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         1167  ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20d  st   [$0d]       1168  st([videoPulse])                #71
                                          1169
                                          1170  # When the total number of scan lines per frame is not an exact multiple of the
                                          1171  # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          1172  # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          1173  # partial samples after transitioning into vertical blank. This is easiest if
                                          1174  # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          1175  # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          1176  # last case there is no solution yet: give a warning.
                                          1177  extra = 0
                                          1178  if soundDiscontinuity == 2:
                                          1179    st(sample, [sample])          # Sound continuity
                                          1180    extra += 1
                                          1181  if soundDiscontinuity > 2:
                                          1182    highlight('Warning: sound discontinuity not suppressed')
                                          1183
                                          1184  # vCPU interrupt
              014b 010e  ld   [$0e]       1185  ld([frameCount])                #72
                                          1186  beq('vBlankFirst#75')           #73
              014c f052  beq  vBlankFirst#75
                                          1187
              014d 0055  ld   $55         1188  runVcpu(186-74-extra,           #74 Application cycles (scan line 0)
              014e c21e  st   [$1e]
              014f 1505  ld   [$05],y
              0150 e0ff  jmp  y,$ff
              0151 0023  ld   $23
                                          1189      '---D line 0 no timeout',
                                          1190      returnTo='vBlankFirst#186')
                                          1191
                                          1192  label('vBlankFirst#75')
vBlankFirst#75:
              0152 1412  ld   $12,y       1193  ld(hi('vBlankFirst#78'),Y)      #75
              0153 e000  jmp  y,$00       1194  jmp(Y,'vBlankFirst#78')         #76
              0154 1401  ld   $01,y       1195  ld(hi(vIRQ_v5),Y)               #77
                                          1196  label('vBlankFirst#186')
                                          1197
                                          1198  # Mitigation for rogue channelMask (3 cycles)
vBlankFirst#186:
              0155 0121  ld   [$21]       1199  ld([channelMask])               #186 Normalize channelMask, for robustness
              0156 20fb  anda $fb         1200  anda(0b11111011)                #187
              0157 c221  st   [$21]       1201  st([channelMask])               #188
                                          1202
                                          1203  # Sound on/off (6 cycles)
              0158 012c  ld   [$2c]       1204  ld([soundTimer])                #189 Sound on/off
              0159 ec5c  bne  $015c       1205  bne(pc()+3)                     #190
              015a fc5d  bra  $015d       1206  bra(pc()+3)                     #191
              015b 0000  ld   $00         1207  ld(0)                           #192 Keeps sound unchanged (should be off here)
              015c 00f0  ld   $f0         1208  ld(0xf0)                        #192(!) Turns sound back on
              015d 4114  ora  [$14]       1209  ora([xoutMask])                 #193
              015e c214  st   [$14]       1210  st([xoutMask])                  #194
                                          1211
                                          1212  # Sound timer count down (5 cycles)
              015f 012c  ld   [$2c]       1213  ld([soundTimer])                #195 Sound timer
              0160 f063  beq  $0163       1214  beq(pc()+3)                     #196
              0161 fc64  bra  $0164       1215  bra(pc()+3)                     #197
              0162 a001  suba $01         1216  suba(1)                         #198
              0163 0000  ld   $00         1217  ld(0)                           #198
              0164 c22c  st   [$2c]       1218  st([soundTimer])                #199
                                          1219
              0165 191f  ld   [$1f],out   1220  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1221  label('sound1')
sound1:       0166 0102  ld   [$02]       1222  ld([channel])                   #1 Advance to next sound channel
              0167 2121  anda [$21]       1223  anda([channelMask])             #2
              0168 8001  adda $01         1224  adda(1)                         #3
              0169 1920  ld   [$20],out   1225  ld([videoSync1],OUT)            #4 Start horizontal pulse
              016a d602  st   [$02],y     1226  st([channel],Y)                 #5
              016b 007f  ld   $7f         1227  ld(0x7f)                        #6 Update sound channel
              016c 29fe  anda [y,$fe]     1228  anda([Y,oscL])                  #7
              016d 89fc  adda [y,$fc]     1229  adda([Y,keyL])                  #8
              016e cafe  st   [y,$fe]     1230  st([Y,oscL])                    #9
              016f 3080  anda $80,x       1231  anda(0x80,X)                    #10
              0170 0500  ld   [x]         1232  ld([X])                         #11
              0171 89ff  adda [y,$ff]     1233  adda([Y,oscH])                  #12
              0172 89fd  adda [y,$fd]     1234  adda([Y,keyH])                  #13
              0173 caff  st   [y,$ff]     1235  st([Y,oscH])                    #14
              0174 20fc  anda $fc         1236  anda(0xfc)                      #15
              0175 69fb  xora [y,$fb]     1237  xora([Y,wavX])                  #16
              0176 1200  ld   ac,x        1238  ld(AC,X)                        #17
              0177 09fa  ld   [y,$fa]     1239  ld([Y,wavA])                    #18
              0178 1407  ld   $07,y       1240  ld(soundTable>>8,Y)             #19
              0179 8d00  adda [y,x]       1241  adda([Y,X])                     #20
              017a e87d  blt  $017d       1242  bmi(pc()+3)                     #21
              017b fc7e  bra  $017e       1243  bra(pc()+3)                     #22
              017c 203f  anda $3f         1244  anda(63)                        #23
              017d 003f  ld   $3f         1245  ld(63)                          #23(!)
              017e 8103  adda [$03]       1246  adda([sample])                  #24
              017f c203  st   [$03]       1247  st([sample])                    #25
                                          1248
              0180 0113  ld   [$13]       1249  ld([xout])                      #26 Gets copied to XOUT
              0181 1412  ld   $12,y       1250  ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              0182 191f  ld   [$1f],out   1251  ld([videoSync0],OUT)            #28 End horizontal pulse
                                          1252
                                          1253  # Count through the vertical blank interval until its last scan line
              0183 0109  ld   [$09]       1254  ld([videoY])                    #29
                                          1255  bpl('.vBlankLast#32')           #30
              0184 f4b1  bge  .vBlankLast#32
              0185 8002  adda $02         1256  adda(2)                         #31
              0186 c209  st   [$09]       1257  st([videoY])                    #32
                                          1258
                                          1259  # Determine if we're in the vertical sync pulse
              0187 a0bd  suba $bd         1260  suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0188 ec8d  bne  .prepSync36 1261  bne('.prepSync36')              #34 Tests for start of vPulse
              0189 a10d  suba [$0d]       1262  suba([videoPulse])              #35
              018a 0040  ld   $40         1263  ld(syncBits^vSync)              #36 Entering vertical sync pulse
              018b fc92  bra  .prepSync39 1264  bra('.prepSync39')              #37
              018c c21f  st   [$1f]       1265  st([videoSync0])                #38
                                          1266  label('.prepSync36')
.prepSync36:  018d ec91  bne  .prepSync38 1267  bne('.prepSync38')              #36 Tests for end of vPulse
              018e 00c0  ld   $c0         1268  ld(syncBits)                    #37
              018f fc93  bra  .prepSync40 1269  bra('.prepSync40')              #38 Entering vertical back porch
              0190 c21f  st   [$1f]       1270  st([videoSync0])                #39
                                          1271  label('.prepSync38')
.prepSync38:  0191 011f  ld   [$1f]       1272  ld([videoSync0])                #38 Load current value
                                          1273  label('.prepSync39')
.prepSync39:  0192 0200  nop              1274  nop()                           #39
                                          1275  label('.prepSync40')
.prepSync40:  0193 6040  xora $40         1276  xora(hSync)                     #40 Precompute, as during the pulse there is no time
              0194 c220  st   [$20]       1277  st([videoSync1])                #41
                                          1278
                                          1279  # Capture the serial input before the '595 shifts it out
              0195 0109  ld   [$09]       1280  ld([videoY])                    #42 Capture serial input
              0196 60cf  xora $cf         1281  xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0197 ec9a  bne  $019a       1282  bne(pc()+3)                     #44
              0198 fc9b  bra  $019b       1283  bra(pc()+3)                     #45
              0199 c30f  st   in,[$0f]    1284  st(IN, [serialRaw])             #46
              019a c000  st   $00,[$00]   1285  st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          1286
                                          1287  # Update [xout] with the next sound sample every 4 scan lines.
                                          1288  # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              019b 0109  ld   [$09]       1289  ld([videoY])                    #47
              019c 2006  anda $06         1290  anda(6)                         #48
                                          1291  beq('vBlankSample')             #49
              019d f0a6  beq  vBlankSample
              019e 0103  ld   [$03]       1292  ld([sample])                    #50
                                          1293
                                          1294  label('vBlankNormal')
vBlankNormal: 019f 00a4  ld   $a4         1295  runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
              01a0 c21e  st   [$1e]
              01a1 1505  ld   [$05],y
              01a2 e0ff  jmp  y,$ff
              01a3 0035  ld   $35
              01a4 fc66  bra  sound1      1296  bra('sound1')                   #199
              01a5 191f  ld   [$1f],out   1297  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1298
                                          1299  label('vBlankSample')
vBlankSample: 01a6 400f  ora  $0f         1300  ora(0x0f)                       #51 New sound sample is ready
              01a7 2114  anda [$14]       1301  anda([xoutMask])                #52
              01a8 c213  st   [$13]       1302  st([xout])                      #53
              01a9 c003  st   $03,[$03]   1303  st(sample, [sample])            #54 Reset for next sample
                                          1304
              01aa 00af  ld   $af         1305  runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01ab c21e  st   [$1e]
              01ac 1505  ld   [$05],y
              01ad e0ff  jmp  y,$ff
              01ae 0033  ld   $33
              01af fc66  bra  sound1      1306  bra('sound1')                   #199
              01b0 191f  ld   [$1f],out   1307  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1308
                                          1309  #-----------------------------------------------------------------------
                                          1310
                                          1311  label('.vBlankLast#32')
.vBlankLast#32:
              01b1 e025  jmp  y,$25       1312  jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          1313  #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01b2 1401  ld   $01,y       1314  ld(hi(pc()),Y)                  #33
                                          1315
                                          1316  label('vBlankLast#52')
                                          1317
                                          1318  # Respond to reset button (14 cycles)
                                          1319  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1320  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1321  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1322  # - This starts vReset -> SYS_Reset_88 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1323  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1324  # - This requires a full cycle (4s) in the warm boot scenario
                                          1325  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1326  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1327  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1328  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1329  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1330  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1331
vBlankLast#52:
              01b3 0111  ld   [$11]       1332  ld([buttonState])               #52 Check [Start] for soft reset
              01b4 60ef  xora $ef         1333  xora(~buttonStart)              #53
              01b5 ecbe  bne  .restart#56 1334  bne('.restart#56')              #54
              01b6 0112  ld   [$12]       1335  ld([resetTimer])                #55 As long as button pressed
              01b7 a001  suba $01         1336  suba(1)                         #56 ... count down the timer
              01b8 c212  st   [$12]       1337  st([resetTimer])                #57
              01b9 207f  anda $7f         1338  anda(127)                       #58
              01ba f0c6  beq  .restart#61 1339  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01bb 00ee  ld   $ee         1340  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01bc fcc5  bra  .restart#63 1341  bra('.restart#63')              #61 ... otherwise do nothing yet
              01bd fcc4  bra  .restart#64 1342  bra('.restart#64')              #62
                                          1343  label('.restart#56')
.restart#56:  01be 0001  ld   $01         1344  wait(62-56)                     #56
              01bf ecbf  bne  $01bf
              01c0 a001  suba $01
              01c1 0200  nop
              01c2 0080  ld   $80         1345  ld(128)                         #62 Not pressed, reset the timer
              01c3 c212  st   [$12]       1346  st([resetTimer])                #63
                                          1347  label('.restart#64')
.restart#64:  01c4 fccb  bra  .restart#66 1348  bra('.restart#66')              #64
                                          1349  label('.restart#63')
.restart#63:  01c5 0200  nop              1350  nop()                           #63,65
                                          1351  label('.restart#61')
.restart#61:  01c6 c216  st   [$16]       1352  st([vPC])                       #61 Point vPC at vReset
              01c7 0001  ld   $01         1353  ld(vReset>>8)                   #62
              01c8 c217  st   [$17]       1354  st([vPC+1])                     #63
              01c9 0002  ld   $02         1355  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
              01ca c205  st   [$05]       1356  st([vCpuSelect])                #65
                                          1357  label('.restart#66')
                                          1358
                                          1359  # Switch video mode when (only) select is pressed (16 cycles)
                                          1360  # XXX We could make this a vCPU interrupt
.restart#66:  01cb 0111  ld   [$11]       1361  ld([buttonState])               #66 Check [Select] to switch modes
              01cc 60df  xora $df         1362  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01cd ece2  bne  .select#70  1363  bne('.select#70')               #68
              01ce 010b  ld   [$0b]       1364  ld([videoModeC])                #69
              01cf e8d5  blt  .select#72  1365  bmi('.select#72')               #70 Branch when line C is off
              01d0 010a  ld   [$0a]       1366  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01d1 c20b  st   [$0b]       1367  st([videoModeC])                #72
              01d2 010c  ld   [$0c]       1368  ld([videoModeD])                #73
              01d3 c20a  st   [$0a]       1369  st([videoModeB])                #74
              01d4 fcda  bra  .select#77  1370  bra('.select#77')               #75
                                          1371  label('.select#72')
.select#72:   01d5 00f6  ld   $f6         1372  ld('nopixels')                  #72,76
              01d6 000a  ld   $0a         1373  ld('pixels')                    #73 Reset: On->D->B->C
              01d7 c20b  st   [$0b]       1374  st([videoModeC])                #74
              01d8 c20a  st   [$0a]       1375  st([videoModeB])                #75
              01d9 0200  nop              1376  nop()                           #76
                                          1377  label('.select#77')
.select#77:   01da c20c  st   [$0c]       1378  st([videoModeD])                #77
              01db 0035  ld   $35         1379  wait(188-78)                    #78 Don't waste code space expanding runVcpu here
              01dc ecdc  bne  $01dc
              01dd a001  suba $01
              01de 0200  nop
                                          1380  # AC==255 now
              01df c211  st   [$11]       1381  st([buttonState])               #188
                                          1382  bra('vBlankEnd#191')            #189
              01e0 fcea  bra  vBlankEnd#191
              01e1 0000  ld   $00         1383  ld(0)                           #190
                                          1384  label('.select#70')
                                          1385
                                          1386  # Mitigation of runaway channel variable
.select#70:   01e2 0102  ld   [$02]       1387  ld([channel])                   #70 Normalize channel, for robustness
              01e3 2003  anda $03         1388  anda(0b00000011)                #71
              01e4 c202  st   [$02]       1389  st([channel])                   #72 Stop wild channel updates
                                          1390
              01e5 00ea  ld   $ea         1391  runVcpu(191-73, '---D line 40') #73 Application cycles (scan line 40)
              01e6 c21e  st   [$1e]
              01e7 1505  ld   [$05],y
              01e8 e0ff  jmp  y,$ff
              01e9 0026  ld   $26
                                          1392
                                          1393  # AC==0 now
                                          1394  label('vBlankEnd#191')
vBlankEnd#191:
              01ea 1401  ld   $01,y       1395  ld(videoTop_v5>>8,Y)            #191
              01eb 09f9  ld   [y,$f9]     1396  ld([Y,videoTop_v5])             #192
              01ec c209  st   [$09]       1397  st([videoY])                    #193
              01ed c21f  st   [$1f]       1398  st([frameX])                    #194
              01ee ecf1  bne  $01f1       1399  bne(pc()+3)                     #195
              01ef fcf2  bra  $01f2       1400  bra(pc()+3)                     #196
              01f0 0001  ld   $01         1401  ld('videoA')                    #197
              01f1 00ec  ld   $ec         1402  ld('videoF')                    #197(!)
              01f2 c20d  st   [$0d]       1403  st([nextVideo])                 #198
              01f3 0102  ld   [$02]       1404  ld([channel])                   #199 Advance to next sound channel
              01f4 2121  anda [$21]       1405  anda([channelMask])             #0 <New scan line start>
              01f5 8001  adda $01         1406  adda(1)                         #1
              01f6 1402  ld   $02,y       1407  ld(hi('sound2'),Y)              #2
              01f7 e0b1  jmp  y,$b1       1408  jmp(Y,'sound2')                 #3
              01f8 1880  ld   $80,out     1409  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1410
              01f9 0200  nop              1411  fillers(until=0xff)
              01fa 0200  nop
              01fb 0200  nop
              * 6 times
                                          1412
                                          1413  #-----------------------------------------------------------------------
                                          1414  # Return point for vCPU slices during visible screen area
                                          1415  #-----------------------------------------------------------------------
                                          1416
                                          1417  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1418  bra('sound3')                   #200,0 <New scan line start>
                                          1419
                                          1420  #-----------------------------------------------------------------------
                                          1421  #
                                          1422  #  $0200 ROM page 2: Video loop visible scanlines
                                          1423  #
                                          1424  #-----------------------------------------------------------------------
                                          1425  align(0x100, size=0x100)
              0200 0102  ld   [$02]       1426  ld([channel])                   #1 Advance to next sound channel
                                          1427
                                          1428  # Back porch A: first of 4 repeated scan lines
                                          1429  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1430  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1431  label('videoA')
videoA:       0201 00ca  ld   $ca         1432  ld('videoB')                    #29 1st scanline of 4 (always visible)
              0202 c20d  st   [$0d]       1433  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1434  ld(videoTable>>8,Y)             #31
              0204 1109  ld   [$09],x     1435  ld([videoY],X)                  #32
              0205 0d00  ld   [y,x]       1436  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1437  st([Y,Xpp])                     #34 Just X++
              0207 c220  st   [$20]       1438  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1439  ld([Y,X])                       #36
              0209 911f  adda [$1f],x     1440  adda([frameX],X)                #37
                                          1441  label('pixels')
pixels:       020a 1520  ld   [$20],y     1442  ld([frameY],Y)                  #38
              020b 00c0  ld   $c0         1443  ld(syncBits)                    #39
                                          1444
                                          1445  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1446  # Superimpose the sync signal bits to be robust against misprogramming
                                          1447  for i in range(qqVgaWidth):
              020c 5d00  ora  [y,x++],out 1448    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1449  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1450
                                          1451  # Front porch
              02ad 0102  ld   [$02]       1452  ld([channel])                   #1 Advance to next sound channel
                                          1453  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1454  anda([channelMask])             #2
              02af 8001  adda $01         1455  adda(1)                         #3
              02b0 1880  ld   $80,out     1456  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1457
                                          1458  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1459  label('sound2')
sound2:       02b1 d602  st   [$02],y     1460  st([channel],Y)                 #5
              02b2 007f  ld   $7f         1461  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1462  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1463  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1464  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1465  anda(0x80,X)                    #10
              02b7 0500  ld   [x]         1466  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1467  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1468  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1469  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1470  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1471  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1472  ld(AC,X)                        #17
              02be 09fa  ld   [y,$fa]     1473  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1474  ld(soundTable>>8,Y)             #19
              02c0 8d00  adda [y,x]       1475  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1476  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1477  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1478  anda(63)                        #23
              02c4 003f  ld   $3f         1479  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1480  adda([sample])                  #24
              02c6 c203  st   [$03]       1481  st([sample])                    #25
                                          1482
              02c7 0113  ld   [$13]       1483  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0d  bra  [$0d]       1484  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1485  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1486
                                          1487  # Back porch B: second of 4 repeated scan lines
                                          1488  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1489  label('videoB')
videoB:       02ca 00d3  ld   $d3         1490  ld('videoC')                    #29 2nd scanline of 4
              02cb c20d  st   [$0d]       1491  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1492  ld(videoTable>>8,Y)             #31
              02cd 0109  ld   [$09]       1493  ld([videoY])                    #32
              02ce 9001  adda $01,x       1494  adda(1,X)                       #33
              02cf 011f  ld   [$1f]       1495  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1496  adda([Y,X])                     #35
              02d1 fd0a  bra  [$0a]       1497  bra([videoModeB])               #36
              02d2 d21f  st   [$1f],x     1498  st([frameX],X)                  #37 Store in RAM and X
                                          1499
                                          1500  # Back porch C: third of 4 repeated scan lines
                                          1501  # - Nothing new to for video do as Yi and Xi are known,
                                          1502  # - This is the time to emit and reset the next sound sample
                                          1503  label('videoC')
videoC:       02d3 00dc  ld   $dc         1504  ld('videoD')                    #29 3rd scanline of 4
              02d4 c20d  st   [$0d]       1505  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1506  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
              02d6 400f  ora  $0f         1507  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1508  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1509  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1510  st(sample, [sample])            #35 Reset for next sample
              02da fd0b  bra  [$0b]       1511  bra([videoModeC])               #36
              02db 111f  ld   [$1f],x     1512  ld([frameX],X)                  #37
                                          1513
                                          1514  # Back porch D: last of 4 repeated scan lines
                                          1515  # - Calculate the next frame index
                                          1516  # - Decide if this is the last line or not
                                          1517  label('videoD')                 # Default video mode
videoD:       02dc 111f  ld   [$1f],x     1518  ld([frameX], X)                 #29 4th scanline of 4
              02dd 0109  ld   [$09]       1519  ld([videoY])                    #30
              02de a0ee  suba $ee         1520  suba((120-1)*2)                 #31
                                          1521  beq('.lastpixels#34')           #32
              02df f0e5  beq  .lastpixels#34
              02e0 80f0  adda $f0         1522  adda(120*2)                     #33 More pixel lines to go
              02e1 c209  st   [$09]       1523  st([videoY])                    #34
              02e2 0001  ld   $01         1524  ld('videoA')                    #35
              02e3 fd0c  bra  [$0c]       1525  bra([videoModeD])               #36
              02e4 c20d  st   [$0d]       1526  st([nextVideo])                 #37
                                          1527
                                          1528  label('.lastpixels#34')
                                          1529  if soundDiscontinuity == 1:
.lastpixels#34:
              02e5 c003  st   $03,[$03]   1530    st(sample, [sample])          #34 Sound continuity
                                          1531  else:
                                          1532    nop()                         #34
              02e6 00e9  ld   $e9         1533  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0c  bra  [$0c]       1534  bra([videoModeD])               #36
              02e8 c20d  st   [$0d]       1535  st([nextVideo])                 #37
                                          1536
                                          1537  # Back porch "E": after the last line
                                          1538  # - Go back and and enter vertical blank (program page 2)
                                          1539  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1540  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1541  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1542  ld(syncBits)                    #31
                                          1543
                                          1544  # Video mode that blacks out one or more pixel lines from the top of screen.
                                          1545  # This yields some speed, but also frees up screen memory for other purposes.
                                          1546  # Note: Sound output becomes choppier the more pixel lines are skipped
                                          1547  # Note: The vertical blank driver leaves 0x80 behind in [videoSync1]
                                          1548  label('videoF')
videoF:       02ec 0120  ld   [$20]       1549  ld([videoSync1])                #29 Completely black pixel line
              02ed 8080  adda $80         1550  adda(0x80)                      #30
              02ee d220  st   [$20],x     1551  st([videoSync1],X)              #31
              02ef 011f  ld   [$1f]       1552  ld([frameX])                    #32
              02f0 a500  suba [x]         1553  suba([X])                       #33 Decrements every two VGA scanlines
              02f1 f0f4  beq  .videoF#36  1554  beq('.videoF#36')               #34
              02f2 c21f  st   [$1f]       1555  st([frameX])                    #35
              02f3 fcf6  bra  nopixels    1556  bra('nopixels')                 #36
                                          1557  label('.videoF#36')
.videoF#36:   02f4 0001  ld   $01         1558  ld('videoA')                    #36,37 Transfer to visible screen area
              02f5 c20d  st   [$0d]       1559  st([nextVideo])                 #37
                                          1560  #
                                          1561  # Alternative for pixel burst: faster application mode
                                          1562  label('nopixels')
nopixels:     02f6 00ff  ld   $ff         1563  runVcpu(200-38, 'ABCD line 40-520',
              02f7 c21e  st   [$1e]
              02f8 1505  ld   [$05],y
              02f9 e0ff  jmp  y,$ff
              02fa 003c  ld   $3c
                                          1564    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
                                          1565
                                          1566  #-----------------------------------------------------------------------
                                          1567  #
                                          1568  #  $0300 ROM page 3: Application interpreter primary page
                                          1569  #
                                          1570  #-----------------------------------------------------------------------
                                          1571
                                          1572  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1573  #
                                          1574  # This routine will execute as many as possible instructions in the
                                          1575  # allotted time. When time runs out, it synchronizes such that the total
                                          1576  # duration matches the caller's request. Durations are counted in `ticks',
                                          1577  # which are multiples of 2 clock cycles.
                                          1578  #
                                          1579  # Synopsis: Use the runVcpu() macro as entry point
                                          1580
                                          1581  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1582  # precious space in the packed interpreter code page. Although ENTER's
                                          1583  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1584  # in this case it will still jump into the right space, because branches
                                          1585  # from $xxFF land in the next page anyway.
                                          1586  while pc()&255 < 255:
              02fb 0200  nop              1587    nop()
              02fc 0200  nop
              02fd 0200  nop
              02fe 0200  nop
                                          1588  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1589  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1590  # --- Page boundary ---
                                          1591  align(0x100,size=0x100)
                                          1592  label('NEXTY')                  # Alternative for REENTER
NEXTY:        0300 1517  ld   [$17],y     1593  ld([vPC+1],Y)                   #1
                                          1594
                                          1595  # Fetch next instruction and execute it, but only if there are sufficient
                                          1596  # ticks left for the slowest instruction.
                                          1597  label('NEXT')
NEXT:         0301 8115  adda [$15]       1598  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1599  blt('EXIT')                     #1 Escape near time out
                                          1600  label('.next2')
.next2:       0303 c215  st   [$15]       1601  st([vTicks])                    #2
              0304 0116  ld   [$16]       1602  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1603  adda(2)                         #4
              0306 d216  st   [$16],x     1604  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1605  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1606  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1607  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1608  ld([Y,X])                       #9 Prefetch operand
                                          1609
                                          1610  # Resync with video driver and transfer control
                                          1611  label('EXIT')
EXIT:         030b 800e  adda $0e         1612  adda(maxTicks)                  #3
                                          1613  label('RESYNC')
RESYNC:       030c e40c  bgt  RESYNC      1614  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1615  suba(1)                         #5
              030e 1401  ld   $01,y       1616  ld(hi('vBlankStart'),Y)         #6
              030f e11e  jmp  y,[$1e]     1617  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1618  ld(0)                           #8 AC should be 0 already. Still..
                                          1619  assert vCPU_overhead ==          9
                                          1620
                                          1621  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1622  label('LDWI')
LDWI:         0311 c218  st   [$18]       1623  st([vAC])                       #10
              0312 de00  st   [y,x++]     1624  st([Y,Xpp])                     #11 Just X++
              0313 0d00  ld   [y,x]       1625  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1626  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1627  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1628  adda(1)                         #15
              0317 c216  st   [$16]       1629  st([vPC])                       #16
              0318 00f6  ld   $f6         1630  ld(-20/2)                       #17
              0319 fc01  bra  NEXT        1631  bra('NEXT')                     #18
                                          1632  #dummy()                        #19 Overlap
                                          1633  #
                                          1634  # Instruction LD: Load byte from zero page (vAC=[D]), 22 cycles
                                          1635  label('LD')
LD:           031a 1200  ld   ac,x        1636  ld(AC,X)                        #10,19
              031b 0500  ld   [x]         1637  ld([X])                         #11
              031c 1404  ld   $04,y       1638  ld(hi('ld#15'),Y)               #12
              031d e013  jmp  y,$13       1639  jmp(Y,'ld#15')                  #13
              031e c218  st   [$18]       1640  st([vAC])                       #14
                                          1641
                                          1642  # Instruction CMPHS: Adjust high byte for signed compare (vACH=XXX), 28 cycles
                                          1643  label('CMPHS_v5')
CMPHS_v5:     031f 140b  ld   $0b,y       1644  ld(hi('cmphs#13'),Y)            #10
              0320 e0d2  jmp  y,$d2       1645  jmp(Y,'cmphs#13')               #11
                                          1646  #ld(AC,X)                       #12 Overlap
                                          1647  #
                                          1648  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1649  label('LDW')
LDW:          0321 1200  ld   ac,x        1650  ld(AC,X)                        #10,12
              0322 8001  adda $01         1651  adda(1)                         #11
              0323 c21d  st   [$1d]       1652  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1653  ld([X])                         #13
              0325 c218  st   [$18]       1654  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1655  ld([vTmp],X)                    #15
              0327 0500  ld   [x]         1656  ld([X])                         #16
              0328 c219  st   [$19]       1657  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1658  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1659  ld(-20/2)                       #19
                                          1660
                                          1661  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1662  label('STW')
STW:          032b 1200  ld   ac,x        1663  ld(AC,X)                        #10,20
              032c 8001  adda $01         1664  adda(1)                         #11
              032d c21d  st   [$1d]       1665  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1666  ld([vAC])                       #13
              032f c600  st   [x]         1667  st([X])                         #14
              0330 111d  ld   [$1d],x     1668  ld([vTmp],X)                    #15
              0331 0119  ld   [$19]       1669  ld([vAC+1])                     #16
              0332 c600  st   [x]         1670  st([X])                         #17
              0333 fc01  bra  NEXT        1671  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1672  ld(-20/2)                       #19
                                          1673
                                          1674  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1675  label('BCC')
BCC:          0335 0119  ld   [$19]       1676  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .bcc#13     1677  bne('.bcc#13')                  #11
              0337 c21d  st   [$1d]       1678  st([vTmp])                      #12
              0338 0118  ld   [$18]       1679  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .bcc#16     1680  beq('.bcc#16')                  #14
              033a 0001  ld   $01         1681  ld(1)                           #15
              033b c21d  st   [$1d]       1682  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1683  ld([Y,X])                       #17 Operand is the conditional
                                          1684  label('.bcc#18')
.bcc#18:      033d fe00  bra  ac          1685  bra(AC)                         #18
              033e 011d  ld   [$1d]       1686  ld([vTmp])                      #19
                                          1687
                                          1688  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1689  label('EQ')
EQ:           033f ec45  bne  .bcc#22     1690  bne('.bcc#22')                  #20
                                          1691  label('.bcc#13')
.bcc#13:      0340 f048  beq  .bcc#23     1692  beq('.bcc#23')                  #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1693  ld([Y,X])                       #22,14 Overlap with BCC
                                          1694  #
                                          1695  # (continue BCC)
                                          1696  #label('.bcc#13')
                                          1697  #dummy()                        #13
                                          1698  #dummy()                        #14
              0342 0200  nop              1699  nop()                           #15
                                          1700  label('.bcc#16')
.bcc#16:      0343 fc3d  bra  .bcc#18     1701  bra('.bcc#18')                  #16
              0344 0d00  ld   [y,x]       1702  ld([Y,X])                       #17 Operand is the conditional
                                          1703  label('.bcc#22')
.bcc#22:      0345 0116  ld   [$16]       1704  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .bcc#25     1705  bra('.bcc#25')                  #23
              0347 8001  adda $01         1706  adda(1)                         #24
                                          1707  label('.bcc#23')
.bcc#23:      0348 de00  st   [y,x++]     1708  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1709  ld([Y,X])                       #24
                                          1710  label('.bcc#25')
.bcc#25:      034a c216  st   [$16]       1711  st([vPC])                       #25
              034b fc01  bra  NEXT        1712  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1713  ld(-28/2)                       #27
                                          1714
                                          1715  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1716  label('GT')
GT:           034d f845  ble  .bcc#22     1717  ble('.bcc#22')                  #20
              034e e448  bgt  .bcc#23     1718  bgt('.bcc#23')                  #21
              034f 0d00  ld   [y,x]       1719  ld([Y,X])                       #22
                                          1720
                                          1721  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1722  label('LT')
LT:           0350 f445  bge  .bcc#22     1723  bge('.bcc#22')                  #20
              0351 e848  blt  .bcc#23     1724  blt('.bcc#23')                  #21
              0352 0d00  ld   [y,x]       1725  ld([Y,X])                       #22
                                          1726
                                          1727  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1728  label('GE')
GE:           0353 e845  blt  .bcc#22     1729  blt('.bcc#22')                  #20
              0354 f448  bge  .bcc#23     1730  bge('.bcc#23')                  #21
              0355 0d00  ld   [y,x]       1731  ld([Y,X])                       #22
                                          1732
                                          1733  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1734  label('LE')
LE:           0356 e445  bgt  .bcc#22     1735  bgt('.bcc#22')                  #20
              0357 f848  ble  .bcc#23     1736  ble('.bcc#23')                  #21
              0358 0d00  ld   [y,x]       1737  ld([Y,X])                       #22
                                          1738
                                          1739  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1740  label('LDI')
LDI:          0359 c218  st   [$18]       1741  st([vAC])                       #10
              035a 0000  ld   $00         1742  ld(0)                           #11
              035b c219  st   [$19]       1743  st([vAC+1])                     #12
              035c fc00  bra  NEXTY       1744  bra('NEXTY')                    #13
              035d 00f8  ld   $f8         1745  ld(-16/2)                       #14
                                          1746
                                          1747  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1748  label('ST')
ST:           035e 1200  ld   ac,x        1749  ld(AC,X)                        #10,15
              035f 0118  ld   [$18]       1750  ld([vAC])                       #11
              0360 c600  st   [x]         1751  st([X])                         #12
              0361 fc00  bra  NEXTY       1752  bra('NEXTY')                    #13
              0362 00f8  ld   $f8         1753  ld(-16/2)                       #14
                                          1754
                                          1755  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1756  label('POP')
POP:          0363 111c  ld   [$1c],x     1757  ld([vSP],X)                     #10,15
              0364 0500  ld   [x]         1758  ld([X])                         #11
              0365 c21a  st   [$1a]       1759  st([vLR])                       #12
              0366 011c  ld   [$1c]       1760  ld([vSP])                       #13
              0367 9001  adda $01,x       1761  adda(1,X)                       #14
              0368 0500  ld   [x]         1762  ld([X])                         #15
              0369 c21b  st   [$1b]       1763  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1764  ld([vSP])                       #17
              036b 8002  adda $02         1765  adda(2)                         #18
              036c c21c  st   [$1c]       1766  st([vSP])                       #19
                                          1767  label('.pop#20')
.pop#20:      036d 0116  ld   [$16]       1768  ld([vPC])                       #20
              036e a001  suba $01         1769  suba(1)                         #21
              036f c216  st   [$16]       1770  st([vPC])                       #22
              0370 fc00  bra  NEXTY       1771  bra('NEXTY')                    #23
              0371 00f3  ld   $f3         1772  ld(-26/2)                       #24
                                          1773
                                          1774  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1775  label('NE')
NE:           0372 f045  beq  .bcc#22     1776  beq('.bcc#22')                  #20,25
              0373 ec48  bne  .bcc#23     1777  bne('.bcc#23')                  #21
              0374 0d00  ld   [y,x]       1778  ld([Y,X])                       #22
                                          1779
                                          1780  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1781  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1782  ld([vSP])                       #10
              0376 b001  suba $01,x       1783  suba(1,X)                       #11
              0377 011b  ld   [$1b]       1784  ld([vLR+1])                     #12
              0378 c600  st   [x]         1785  st([X])                         #13
              0379 011c  ld   [$1c]       1786  ld([vSP])                       #14
              037a a002  suba $02         1787  suba(2)                         #15
              037b d21c  st   [$1c],x     1788  st([vSP],X)                     #16
              037c 011a  ld   [$1a]       1789  ld([vLR])                       #17
              037d fc6d  bra  .pop#20     1790  bra('.pop#20')                  #18
              037e c600  st   [x]         1791  st([X])                         #19
                                          1792
                                          1793  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1794  label('LUP')
LUP:          037f 1519  ld   [$19],y     1795  ld([vAC+1],Y)                   #10
              0380 e0fb  jmp  y,$fb       1796  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1797  adda([vAC])                     #12
                                          1798
                                          1799  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 22 cycles
                                          1800  label('ANDI')
ANDI:         0382 1404  ld   $04,y       1801  ld(hi('andi#13'),Y)             #10
              0383 e011  jmp  y,$11       1802  jmp(Y,'andi#13')                #11
              0384 2118  anda [$18]       1803  anda([vAC])                     #12
                                          1804
                                          1805  # Instruction CALLI: Goto immediate address and remember vPC (vLR,vPC=vPC+3,$HHLL-2), 28 cycles
                                          1806  label('CALLI_v5')
CALLI_v5:     0385 140b  ld   $0b,y       1807  ld(hi('calli#13'),Y)            #10
              0386 e0c6  jmp  y,$c6       1808  jmp(Y,'calli#13')               #11
              0387 0116  ld   [$16]       1809  ld([vPC])                       #12
                                          1810
                                          1811  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1812  label('ORI')
ORI:          0388 4118  ora  [$18]       1813  ora([vAC])                      #10
              0389 c218  st   [$18]       1814  st([vAC])                       #11
              038a fc01  bra  NEXT        1815  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1816  ld(-14/2)                       #13
                                          1817
                                          1818  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1819  label('XORI')
XORI:         038c 6118  xora [$18]       1820  xora([vAC])                     #10
              038d c218  st   [$18]       1821  st([vAC])                       #11
              038e fc01  bra  NEXT        1822  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1823  ld(-14/2)                       #13
                                          1824
                                          1825  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1826  label('BRA')
BRA:          0390 c216  st   [$16]       1827  st([vPC])                       #10
              0391 fc00  bra  NEXTY       1828  bra('NEXTY')                    #11
              0392 00f9  ld   $f9         1829  ld(-14/2)                       #12
                                          1830
                                          1831  # Instruction INC: Increment zero page byte ([D]++), 20 cycles
                                          1832  label('INC')
INC:          0393 1200  ld   ac,x        1833  ld(AC,X)                        #10,13
              0394 1404  ld   $04,y       1834  ld(hi('inc#14'),Y)              #11
              0395 e0e4  jmp  y,$e4       1835  jmp(Y,'inc#14')                 #12
              0396 0001  ld   $01         1836  ld(1)                           #13
                                          1837
                                          1838  # Instruction CMPHU: Adjust high byte for unsigned compare (vACH=XXX), 28 cycles
                                          1839  label('CMPHU_v5')
CMPHU_v5:     0397 140b  ld   $0b,y       1840  ld(hi('cmphu#13'),Y)            #10
              0398 e0de  jmp  y,$de       1841  jmp(Y,'cmphu#13')               #11
                                          1842  #ld(AC,X)                       #12 Overlap
                                          1843  #
                                          1844  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1845  label('ADDW')
                                          1846  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1847  # But a smaller size is better so more instructions fit in this code page.
                                          1848  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1849  ld(AC,X)                        #10,12 Address of low byte to be added
              039a 8001  adda $01         1850  adda(1)                         #11
              039b c21d  st   [$1d]       1851  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1852  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1853  adda([X])                       #14
              039e c218  st   [$18]       1854  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw#18    1855  bmi('.addw#18')                 #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1856  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw#20    1857  bra('.addw#20')                 #18
              03a2 4500  ora  [x]         1858  ora([X])                        #19 Carry in bit 7
                                          1859  label('.addw#18')
.addw#18:     03a3 2500  anda [x]         1860  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1861  nop()                           #19
                                          1862  label('.addw#20')
.addw#20:     03a5 3080  anda $80,x       1863  anda(0x80,X)                    #20 Move carry to bit 0
              03a6 0500  ld   [x]         1864  ld([X])                         #21
              03a7 8119  adda [$19]       1865  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1866  ld([vTmp],X)                    #23
              03a9 8500  adda [x]         1867  adda([X])                       #24
              03aa c219  st   [$19]       1868  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1869  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1870  ld(-28/2)                       #27
                                          1871
                                          1872  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1873  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1874  ld(hi('peek'),Y)                #10
              03ae e062  jmp  y,$62       1875  jmp(Y,'peek')                   #11
                                          1876  #ld([vPC])                      #12 Overlap
                                          1877  #
                                          1878  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1879  #
                                          1880  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1881  # the operand. As long as there are insufficient ticks available in the current
                                          1882  # time slice, the instruction will be retried. This will effectively wait for
                                          1883  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1884  # native code is made. This code can do whatever it wants, but it must return
                                          1885  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1886  # of) the actual consumed number of whole ticks for the entire virtual
                                          1887  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1888  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1889  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1890  # need. The GCL compiler automatically makes this calculation from gross number
                                          1891  # of cycles to excess number of ticks.
                                          1892  # SYS functions can modify vPC to implement repetition. For example to split
                                          1893  # up work into multiple chucks.
                                          1894  label('.sys#13')
.sys#13:      03af 0116  ld   [$16]       1895  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1896  suba(2)                         #14
              03b1 c216  st   [$16]       1897  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1898  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1899  ld(-20/2)                       #17
                                          1900  label('SYS')
SYS:          03b4 8115  adda [$15]       1901  adda([vTicks])                  #10
              03b5 e8af  blt  .sys#13     1902  blt('.sys#13')                  #11
              03b6 1523  ld   [$23],y     1903  ld([sysFn+1],Y)                 #12
              03b7 e122  jmp  y,[$22]     1904  jmp(Y,[sysFn])                  #13
                                          1905  #dummy()                        #14 Overlap
                                          1906  #
                                          1907  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1908  # All cases can be done in 26 cycles, but the code will become much larger
                                          1909  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1910  ld(AC,X)                        #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1911  adda(1)                         #11
              03ba c21d  st   [$1d]       1912  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1913  ld([vAC])                       #13
              03bc e8c1  blt  .subw#16    1914  bmi('.subw#16')                 #14
              03bd a500  suba [x]         1915  suba([X])                       #15
              03be c218  st   [$18]       1916  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw#19    1917  bra('.subw#19')                 #17
              03c0 4500  ora  [x]         1918  ora([X])                        #18 Carry in bit 7
                                          1919  label('.subw#16')
.subw#16:     03c1 c218  st   [$18]       1920  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1921  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1922  nop()                           #18
                                          1923  label('.subw#19')
.subw#19:     03c4 3080  anda $80,x       1924  anda(0x80,X)                    #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1925  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1926  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1927  ld([vTmp],X)                    #22
              03c8 a500  suba [x]         1928  suba([X])                       #23
              03c9 c219  st   [$19]       1929  st([vAC+1])                     #24
                                          1930  label('REENTER_28')
REENTER_28:   03ca 00f2  ld   $f2         1931  ld(-28/2)                       #25
                                          1932  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1933  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1934  ld([vPC+1],Y)                   #27
                                          1935
                                          1936  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 24 cycles
                                          1937  label('DEF')
DEF:          03cd 1404  ld   $04,y       1938  ld(hi('def#13'),Y)              #10
              03ce e007  jmp  y,$07       1939  jmp(Y,'def#13')                 #11
                                          1940  #st([vTmp])                     #12 Overlap
                                          1941  #
                                          1942  # Instruction CALL: Goto address and remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1943  label('CALL')
CALL:         03cf c21d  st   [$1d]       1944  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1945  ld([vPC])                       #11
              03d1 8002  adda $02         1946  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1947  st([vLR])                       #13
              03d3 0117  ld   [$17]       1948  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1949  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1950  ld([vTmp],X)                    #16
              03d6 0500  ld   [x]         1951  ld([X])                         #17
              03d7 a002  suba $02         1952  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1953  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1954  ld([vTmp])                      #20
              03da 9001  adda $01,x       1955  adda(1,X)                       #21
              03db 0500  ld   [x]         1956  ld([X])                         #22
              03dc d617  st   [$17],y     1957  st([vPC+1],Y)                   #23
              03dd fc01  bra  NEXT        1958  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1959  ld(-26/2)                       #25
                                          1960
                                          1961  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1962  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1963  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1964  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1965  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1966  ld(-14/2)                       #13
                                          1967
                                          1968  # The instructions below are all implemented in the second code page. Jumping
                                          1969  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1970  # primary page for the instructions above. Most of them are in fact not very
                                          1971  # critical, as evidenced by the fact that they weren't needed for the first
                                          1972  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1973  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1974
                                          1975  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1976  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1977  ld(hi('addi'),Y)                #10
              03e4 e018  jmp  y,$18       1978  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1979  st([vTmp])                      #12
                                          1980
                                          1981  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1982  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1983  ld(hi('subi'),Y)                #10
              03e7 e026  jmp  y,$26       1984  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1985  st([vTmp])                      #12
                                          1986
                                          1987  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1988  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1989  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1990  ld(hi('lslw'),Y)                #10
              03ea e035  jmp  y,$35       1991  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1992  ld([vAC])                       #12
                                          1993
                                          1994  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1995  label('STLW')
STLW:         03ec 1404  ld   $04,y       1996  ld(hi('stlw'),Y)                #10
              03ed e041  jmp  y,$41       1997  jmp(Y,'stlw')                   #11
                                          1998  #dummy()                        #12 Overlap
                                          1999  #
                                          2000  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          2001  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       2002  ld(hi('ldlw'),Y)                #10,12
              03ef e04c  jmp  y,$4c       2003  jmp(Y,'ldlw')                   #11
                                          2004  #dummy()                        #12 Overlap
                                          2005  #
                                          2006  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          2007  label('POKE')
POKE:         03f0 1404  ld   $04,y       2008  ld(hi('poke'),Y)                #10,12
              03f1 e057  jmp  y,$57       2009  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       2010  st([vTmp])                      #12
                                          2011
                                          2012  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          2013  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       2014  ld(hi('doke'),Y)                #10
              03f4 e06d  jmp  y,$6d       2015  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       2016  st([vTmp])                      #12
                                          2017
                                          2018  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          2019  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       2020  ld(hi('deek'),Y)                #10
              03f7 e07a  jmp  y,$7a       2021  jmp(Y,'deek')                   #11
                                          2022  #dummy()                        #12 Overlap
                                          2023  #
                                          2024  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          2025  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       2026  ld(hi('andw'),Y)                #10,12
              03f9 e086  jmp  y,$86       2027  jmp(Y,'andw')                   #11
                                          2028  #dummy()                        #12 Overlap
                                          2029  #
                                          2030  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          2031  label('ORW')
ORW:          03fa 1404  ld   $04,y       2032  ld(hi('orw'),Y)                 #10,12
              03fb e091  jmp  y,$91       2033  jmp(Y,'orw')                    #11
                                          2034  #dummy()                        #12 Overlap
                                          2035  #
                                          2036  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          2037  label('XORW')
XORW:         03fc 1404  ld   $04,y       2038  ld(hi('xorw'),Y)                #10,12
              03fd e09c  jmp  y,$9c       2039  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       2040  st([vTmp])                      #12
                                          2041  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          2042  # can be useful for comparing numbers for equality a tiny
                                          2043  # bit faster than with SUBW
                                          2044
                                          2045  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          2046  label('RET')
RET:          03ff 011a  ld   [$1a]       2047  ld([vLR])                       #10
                                          2048  assert pc()&255 == 0
                                          2049
                                          2050  #-----------------------------------------------------------------------
                                          2051  #
                                          2052  #  $0400 ROM page 4: Application interpreter extension
                                          2053  #
                                          2054  #-----------------------------------------------------------------------
                                          2055  align(0x100, size=0x100)
                                          2056
                                          2057  # (Continue RET)
              0400 a002  suba $02         2058  suba(2)                         #11
              0401 c216  st   [$16]       2059  st([vPC])                       #12
              0402 011b  ld   [$1b]       2060  ld([vLR+1])                     #13
              0403 c217  st   [$17]       2061  st([vPC+1])                     #14
              0404 1403  ld   $03,y       2062  ld(hi('REENTER'),Y)             #15
              0405 e0cb  jmp  y,$cb       2063  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         2064  ld(-20/2)                       #17
                                          2065
                                          2066  # DEF implementation
                                          2067  label('def#13')
def#13:       0407 0116  ld   [$16]       2068  ld([vPC])                       #13
              0408 8002  adda $02         2069  adda(2)                         #14
              0409 c218  st   [$18]       2070  st([vAC])                       #15
              040a 0117  ld   [$17]       2071  ld([vPC+1])                     #16
              040b c219  st   [$19]       2072  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       2073  ld([vTmp])                      #18
              040d c216  st   [$16]       2074  st([vPC])                       #19
              040e 1403  ld   $03,y       2075  ld(hi('NEXTY'),Y)               #20
              040f e000  jmp  y,$00       2076  jmp(Y,'NEXTY')                  #21
              0410 00f4  ld   $f4         2077  ld(-24/2)                       #22
                                          2078
                                          2079  # Clear vACH (continuation of ANDI and LD instructions)
                                          2080  label('andi#13')
andi#13:      0411 0200  nop              2081  nop()                           #13
              0412 c218  st   [$18]       2082  st([vAC])                       #14
                                          2083  #
                                          2084  label('ld#15')
ld#15:        0413 0000  ld   $00         2085  ld(0)                           #15 Clear high byte
              0414 c219  st   [$19]       2086  st([vAC+1])                     #16
              0415 1403  ld   $03,y       2087  ld(hi('REENTER'),Y)             #17
              0416 e0cb  jmp  y,$cb       2088  jmp(Y,'REENTER')                #18
              0417 00f5  ld   $f5         2089  ld(-22/2)                       #19
                                          2090
                                          2091  # ADDI implementation
                                          2092  label('addi')
addi:         0418 8118  adda [$18]       2093  adda([vAC])                     #13
              0419 c218  st   [$18]       2094  st([vAC])                       #14 Store low result
              041a e81e  blt  .addi#17    2095  bmi('.addi#17')                 #15 Now figure out if there was a carry
              041b a11d  suba [$1d]       2096  suba([vTmp])                    #16 Gets back the initial value of vAC
              041c fc20  bra  .addi#19    2097  bra('.addi#19')                 #17
              041d 411d  ora  [$1d]       2098  ora([vTmp])                     #18 Carry in bit 7
                                          2099  label('.addi#17')
.addi#17:     041e 211d  anda [$1d]       2100  anda([vTmp])                    #17 Carry in bit 7
              041f 0200  nop              2101  nop()                           #18
                                          2102  label('.addi#19')
.addi#19:     0420 3080  anda $80,x       2103  anda(0x80,X)                    #19 Move carry to bit 0
              0421 0500  ld   [x]         2104  ld([X])                         #20
              0422 8119  adda [$19]       2105  adda([vAC+1])                   #21 Add the high bytes with carry
              0423 1403  ld   $03,y       2106  ld(hi('REENTER_28'),Y)          #22
              0424 e0ca  jmp  y,$ca       2107  jmp(Y,'REENTER_28')             #23
              0425 c219  st   [$19]       2108  st([vAC+1])                     #24 Store high result
                                          2109
                                          2110  # SUBI implementation
                                          2111  label('subi')
subi:         0426 0118  ld   [$18]       2112  ld([vAC])                       #13
              0427 e82c  blt  .subi#16    2113  bmi('.subi#16')                 #14
              0428 a11d  suba [$1d]       2114  suba([vTmp])                    #15
              0429 c218  st   [$18]       2115  st([vAC])                       #16 Store low result
              042a fc2f  bra  .subi#19    2116  bra('.subi#19')                 #17
              042b 411d  ora  [$1d]       2117  ora([vTmp])                     #18 Carry in bit 7
                                          2118  label('.subi#16')
.subi#16:     042c c218  st   [$18]       2119  st([vAC])                       #16 Store low result
              042d 211d  anda [$1d]       2120  anda([vTmp])                    #17 Carry in bit 7
              042e 0200  nop              2121  nop()                           #18
                                          2122  label('.subi#19')
.subi#19:     042f 3080  anda $80,x       2123  anda(0x80,X)                    #19 Move carry to bit 0
              0430 0119  ld   [$19]       2124  ld([vAC+1])                     #20
              0431 a500  suba [x]         2125  suba([X])                       #21
              0432 1403  ld   $03,y       2126  ld(hi('REENTER_28'),Y)          #22
              0433 e0ca  jmp  y,$ca       2127  jmp(Y,'REENTER_28')             #23
              0434 c219  st   [$19]       2128  st([vAC+1])                     #24
                                          2129
                                          2130  # LSLW implementation
                                          2131  label('lslw')
lslw:         0435 3080  anda $80,x       2132  anda(128,X)                     #13
              0436 8118  adda [$18]       2133  adda([vAC])                     #14
              0437 c218  st   [$18]       2134  st([vAC])                       #15
              0438 0500  ld   [x]         2135  ld([X])                         #16
              0439 8119  adda [$19]       2136  adda([vAC+1])                   #17
              043a 8119  adda [$19]       2137  adda([vAC+1])                   #18
              043b c219  st   [$19]       2138  st([vAC+1])                     #19
              043c 0116  ld   [$16]       2139  ld([vPC])                       #20
              043d a001  suba $01         2140  suba(1)                         #21
              043e 1403  ld   $03,y       2141  ld(hi('REENTER_28'),Y)          #22
              043f e0ca  jmp  y,$ca       2142  jmp(Y,'REENTER_28')             #23
              0440 c216  st   [$16]       2143  st([vPC])                       #24
                                          2144
                                          2145  # STLW implementation
                                          2146  label('stlw')
stlw:         0441 811c  adda [$1c]       2147  adda([vSP])                     #13
              0442 c21d  st   [$1d]       2148  st([vTmp])                      #14
              0443 9001  adda $01,x       2149  adda(1,X)                       #15
              0444 0119  ld   [$19]       2150  ld([vAC+1])                     #16
              0445 c600  st   [x]         2151  st([X])                         #17
              0446 111d  ld   [$1d],x     2152  ld([vTmp],X)                    #18
              0447 0118  ld   [$18]       2153  ld([vAC])                       #19
              0448 c600  st   [x]         2154  st([X])                         #20
              0449 1403  ld   $03,y       2155  ld(hi('REENTER'),Y)             #21
              044a e0cb  jmp  y,$cb       2156  jmp(Y,'REENTER')                #22
              044b 00f3  ld   $f3         2157  ld(-26/2)                       #23
                                          2158
                                          2159  # LDLW implementation
                                          2160  label('ldlw')
ldlw:         044c 811c  adda [$1c]       2161  adda([vSP])                     #13
              044d c21d  st   [$1d]       2162  st([vTmp])                      #14
              044e 9001  adda $01,x       2163  adda(1,X)                       #15
              044f 0500  ld   [x]         2164  ld([X])                         #16
              0450 c219  st   [$19]       2165  st([vAC+1])                     #17
              0451 111d  ld   [$1d],x     2166  ld([vTmp],X)                    #18
              0452 0500  ld   [x]         2167  ld([X])                         #19
              0453 c218  st   [$18]       2168  st([vAC])                       #20
              0454 1403  ld   $03,y       2169  ld(hi('REENTER'),Y)             #21
              0455 e0cb  jmp  y,$cb       2170  jmp(Y,'REENTER')                #22
              0456 00f3  ld   $f3         2171  ld(-26/2)                       #23
                                          2172
                                          2173  # POKE implementation
                                          2174  label('poke')
poke:         0457 9001  adda $01,x       2175  adda(1,X)                       #13
              0458 0500  ld   [x]         2176  ld([X])                         #14
              0459 1600  ld   ac,y        2177  ld(AC,Y)                        #15
              045a 111d  ld   [$1d],x     2178  ld([vTmp],X)                    #16
              045b 0500  ld   [x]         2179  ld([X])                         #17
              045c 1200  ld   ac,x        2180  ld(AC,X)                        #18
              045d 0118  ld   [$18]       2181  ld([vAC])                       #19
              045e ce00  st   [y,x]       2182  st([Y,X])                       #20
              045f 1403  ld   $03,y       2183  ld(hi('REENTER'),Y)             #21
              0460 e0cb  jmp  y,$cb       2184  jmp(Y,'REENTER')                #22
              0461 00f3  ld   $f3         2185  ld(-26/2)                       #23
                                          2186
                                          2187  # PEEK implementation
                                          2188  label('peek')
peek:         0462 a001  suba $01         2189  suba(1)                         #13
              0463 c216  st   [$16]       2190  st([vPC])                       #14
              0464 1118  ld   [$18],x     2191  ld([vAC],X)                     #15
              0465 1519  ld   [$19],y     2192  ld([vAC+1],Y)                   #16
              0466 0d00  ld   [y,x]       2193  ld([Y,X])                       #17
              0467 c218  st   [$18]       2194  st([vAC])                       #18
                                          2195  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0468 0000  ld   $00         2196  ld(0)                           #19
              0469 c219  st   [$19]       2197  st([vAC+1])                     #20
              046a 1403  ld   $03,y       2198  ld(hi('REENTER'),Y)             #21
              046b e0cb  jmp  y,$cb       2199  jmp(Y,'REENTER')                #22
              046c 00f3  ld   $f3         2200  ld(-26/2)                       #23
                                          2201
                                          2202  # DOKE implementation
                                          2203  label('doke')
doke:         046d 9001  adda $01,x       2204  adda(1,X)                       #13
              046e 0500  ld   [x]         2205  ld([X])                         #14
              046f 1600  ld   ac,y        2206  ld(AC,Y)                        #15
              0470 111d  ld   [$1d],x     2207  ld([vTmp],X)                    #16
              0471 0500  ld   [x]         2208  ld([X])                         #17
              0472 1200  ld   ac,x        2209  ld(AC,X)                        #18
              0473 0118  ld   [$18]       2210  ld([vAC])                       #19
              0474 de00  st   [y,x++]     2211  st([Y,Xpp])                     #20
              0475 0119  ld   [$19]       2212  ld([vAC+1])                     #21
              0476 ce00  st   [y,x]       2213  st([Y,X])                       #22 Incompatible with REENTER_28
              0477 1403  ld   $03,y       2214  ld(hi('REENTER'),Y)             #23
              0478 e0cb  jmp  y,$cb       2215  jmp(Y,'REENTER')                #24
              0479 00f2  ld   $f2         2216  ld(-28/2)                       #25
                                          2217
                                          2218  # DEEK implementation
                                          2219  label('deek')
deek:         047a 0116  ld   [$16]       2220  ld([vPC])                       #13
              047b a001  suba $01         2221  suba(1)                         #14
              047c c216  st   [$16]       2222  st([vPC])                       #15
              047d 1118  ld   [$18],x     2223  ld([vAC],X)                     #16
              047e 1519  ld   [$19],y     2224  ld([vAC+1],Y)                   #17
              047f 0d00  ld   [y,x]       2225  ld([Y,X])                       #18
              0480 de00  st   [y,x++]     2226  st([Y,Xpp])                     #19 Just X++
              0481 c218  st   [$18]       2227  st([vAC])                       #20
              0482 0d00  ld   [y,x]       2228  ld([Y,X])                       #21
              0483 1403  ld   $03,y       2229  ld(hi('REENTER_28'),Y)          #22
              0484 e0ca  jmp  y,$ca       2230  jmp(Y,'REENTER_28')             #23
              0485 c219  st   [$19]       2231  st([vAC+1])                     #24
                                          2232
                                          2233  # ANDW implementation
                                          2234  label('andw')
andw:         0486 c21d  st   [$1d]       2235  st([vTmp])                      #13
              0487 9001  adda $01,x       2236  adda(1,X)                       #14
              0488 0500  ld   [x]         2237  ld([X])                         #15
              0489 2119  anda [$19]       2238  anda([vAC+1])                   #16
              048a c219  st   [$19]       2239  st([vAC+1])                     #17
              048b 111d  ld   [$1d],x     2240  ld([vTmp],X)                    #18
              048c 0500  ld   [x]         2241  ld([X])                         #19
              048d 2118  anda [$18]       2242  anda([vAC])                     #20
              048e c218  st   [$18]       2243  st([vAC])                       #21
              048f 1403  ld   $03,y       2244  ld(hi('REENTER_28'),Y)          #22
              0490 e0ca  jmp  y,$ca       2245  jmp(Y,'REENTER_28')             #23
                                          2246  #dummy()                        #24 Overlap
                                          2247  #
                                          2248  # ORW implementation
                                          2249  label('orw')
orw:          0491 c21d  st   [$1d]       2250  st([vTmp])                      #13,24
              0492 9001  adda $01,x       2251  adda(1,X)                       #14
              0493 0500  ld   [x]         2252  ld([X])                         #15
              0494 4119  ora  [$19]       2253  ora([vAC+1])                    #16
              0495 c219  st   [$19]       2254  st([vAC+1])                     #17
              0496 111d  ld   [$1d],x     2255  ld([vTmp],X)                    #18
              0497 0500  ld   [x]         2256  ld([X])                         #19
              0498 4118  ora  [$18]       2257  ora([vAC])                      #20
              0499 c218  st   [$18]       2258  st([vAC])                       #21
              049a 1403  ld   $03,y       2259  ld(hi('REENTER_28'),Y)          #22
              049b e0ca  jmp  y,$ca       2260  jmp(Y,'REENTER_28')             #23
                                          2261  #dummy()                        #24 Overlap
                                          2262  #
                                          2263  # XORW implementation
                                          2264  label('xorw')
xorw:         049c 9001  adda $01,x       2265  adda(1,X)                       #13,24
              049d 0500  ld   [x]         2266  ld([X])                         #14
              049e 6119  xora [$19]       2267  xora([vAC+1])                   #15
              049f c219  st   [$19]       2268  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     2269  ld([vTmp],X)                    #17
              04a1 0500  ld   [x]         2270  ld([X])                         #18
              04a2 6118  xora [$18]       2271  xora([vAC])                     #19
              04a3 c218  st   [$18]       2272  st([vAC])                       #20
              04a4 1403  ld   $03,y       2273  ld(hi('REENTER'),Y)             #21
              04a5 e0cb  jmp  y,$cb       2274  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         2275  ld(-26/2)                       #23
                                          2276
                                          2277  #-----------------------------------------------------------------------
                                          2278  #
                                          2279  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          2280  #
                                          2281  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          2282  #
                                          2283  #  With <N> the maximum number of cycles the function will run
                                          2284  #  (counted from NEXT to NEXT). This is the same number that must
                                          2285  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          2286  #  appear in the GCL code upon use.
                                          2287  #
                                          2288  #  If a SYS extension got introduced after ROM v1, the version number of
                                          2289  #  introduction is included in the name. This helps the programmer to be
                                          2290  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          2291  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          2292  #
                                          2293  #-----------------------------------------------------------------------
                                          2294
                                          2295  #-----------------------------------------------------------------------
                                          2296  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          2297  #-----------------------------------------------------------------------
                                          2298
                                          2299  # This same algorithm runs automatically once per vertical blank.
                                          2300  # Use this function to get numbers at a higher rate.
                                          2301  #
                                          2302  # Variables:
                                          2303  #       vAC
                                          2304
                                          2305  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       2306  ld([frameCount])                #15
              04a8 6107  xora [$07]       2307  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       2308  xora([serialRaw])               #17
              04aa 8106  adda [$06]       2309  adda([entropy+0])               #18
              04ab c206  st   [$06]       2310  st([entropy+0])                 #19
              04ac c218  st   [$18]       2311  st([vAC+0])                     #20
              04ad 8108  adda [$08]       2312  adda([entropy+2])               #21
              04ae c208  st   [$08]       2313  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    2314  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    2315  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         2316  xora(64+16+2+1)                 #25
                                          2317  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         2318  xora(64+32+8+4)                 #25
                                          2319  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       2320  adda([entropy+1])               #26
              04b4 c207  st   [$07]       2321  st([entropy+1])                 #27
              04b5 c219  st   [$19]       2322  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       2323  ld(hi('REENTER'),Y)             #29
              04b7 e0cb  jmp  y,$cb       2324  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         2325  ld(-34/2)                       #31
                                          2326
                                          2327  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       2328  ld([vAC])                       #15
              04ba 3080  anda $80,x       2329  anda(128,X)                     #16
              04bb 0119  ld   [$19]       2330  ld([vAC+1])                     #17
              04bc 8200  adda ac          2331  adda(AC)                        #18
              04bd 4500  ora  [x]         2332  ora([X])                        #19
              04be c218  st   [$18]       2333  st([vAC])                       #20
              04bf 0119  ld   [$19]       2334  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       2335  anda(128,X)                     #22
              04c1 0500  ld   [x]         2336  ld([X])                         #23
              04c2 c219  st   [$19]       2337  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       2338  ld(hi('REENTER'),Y)             #25
              04c4 e0cb  jmp  y,$cb       2339  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         2340  ld(-30/2)                       #27
                                          2341
                                          2342  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       2343  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       2344  st([vAC])                       #16
              04c8 0000  ld   $00         2345  ld(0)                           #17
              04c9 c219  st   [$19]       2346  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       2347  ld(hi('REENTER'),Y)             #19
              04cb e0cb  jmp  y,$cb       2348  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         2349  ld(-24/2)                       #21
                                          2350
                                          2351  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       2352  ld([vAC])                       #15
              04ce c219  st   [$19]       2353  st([vAC+1])                     #16
              04cf 0000  ld   $00         2354  ld(0)                           #17
              04d0 c218  st   [$18]       2355  st([vAC])                       #18
              04d1 1403  ld   $03,y       2356  ld(hi('REENTER'),Y)             #19
              04d2 e0cb  jmp  y,$cb       2357  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         2358  ld(-24/2)                       #21
                                          2359
                                          2360  #-----------------------------------------------------------------------
                                          2361  # Extension SYS_Draw4_30
                                          2362  #-----------------------------------------------------------------------
                                          2363
                                          2364  # Draw 4 pixels on screen, horizontally next to each other
                                          2365  #
                                          2366  # Variables:
                                          2367  #       sysArgs[0:3]    Pixels (in)
                                          2368  #       sysArgs[4:5]    Position on screen (in)
                                          2369
                                          2370  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2371  ld([sysArgs+4],X)               #15
              04d5 1529  ld   [$29],y     2372  ld([sysArgs+5],Y)               #16
              04d6 0124  ld   [$24]       2373  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2374  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2375  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2376  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2377  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2378  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2379  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2380  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2381  ld(hi('REENTER'),Y)             #25
              04df e0cb  jmp  y,$cb       2382  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2383  ld(-30/2)                       #27
                                          2384
                                          2385  #-----------------------------------------------------------------------
                                          2386  # Extension SYS_VDrawBits_134:
                                          2387  #-----------------------------------------------------------------------
                                          2388
                                          2389  # Draw slice of a character, 8 pixels vertical
                                          2390  #
                                          2391  # Variables:
                                          2392  #       sysArgs[0]      Color 0 "background" (in)
                                          2393  #       sysArgs[1]      Color 1 "pen" (in)
                                          2394  #       sysArgs[2]      8 bits, highest bit first (in, changed)
                                          2395  #       sysArgs[4:5]    Position on screen (in)
                                          2396
                                          2397  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 1412  ld   $12,y       2398  ld(hi('sys_VDrawBits'),Y)       #15
              04e2 e086  jmp  y,$86       2399  jmp(Y,'sys_VDrawBits')          #16
              04e3 1128  ld   [$28],x     2400  ld([sysArgs+4],X)               #17
                                          2401
                                          2402  #-----------------------------------------------------------------------
                                          2403
                                          2404  # INC implementation
                                          2405  label('inc#14')
inc#14:       04e4 8500  adda [x]         2406  adda([X])                       #14
              04e5 c600  st   [x]         2407  st([X])                         #15
              04e6 1403  ld   $03,y       2408  ld(hi('NEXTY'),Y)               #16
              04e7 e000  jmp  y,$00       2409  jmp(Y,'NEXTY')                  #17
              04e8 00f6  ld   $f6         2410  ld(-20/2)                       #18
                                          2411
                                          2412
                                          2413  # Interrupt handler:
                                          2414  #       ... IRQ payload ...
                                          2415  #       LDWI $400
                                          2416  #       LUP  $xx  ==> vRTI
              04e9 0200  nop              2417  fillers(until=251-17)
                                          2418
                                          2419  label('vRTI#18')
vRTI#18:      04ea 00ea  ld   $ea         2420  ld(-32//2-v6502_adjust)         #18
              04eb 8115  adda [$15]       2421  adda([vTicks])                  #19
              04ec f4f8  bge  vRTI#22     2422  bge('vRTI#22')                  #20
              04ed 0132  ld   [$32]       2423  ld([vIrqSave+2])                #21
              04ee c218  st   [$18]       2424  st([vAC])                       #22
              04ef 0133  ld   [$33]       2425  ld([vIrqSave+3])                #23
              04f0 c219  st   [$19]       2426  st([vAC+1])                     #24
              04f1 0134  ld   [$34]       2427  ld([vIrqSave+4])                #25
              04f2 c205  st   [$05]       2428  st([vCpuSelect])                #26
              04f3 0115  ld   [$15]       2429  ld([vTicks])                    #27
              04f4 8000  adda $00         2430  adda(maxTicks-28//2)            #28-28=0
              04f5 1403  ld   $03,y       2431  ld(hi('RESYNC'),Y)              #1
              04f6 e00c  jmp  y,$0c       2432  jmp(Y,'RESYNC')                 #2
              04f7 0200  nop              2433  nop()                           #3
                                          2434
                                          2435  label('vRTI#22')
vRTI#22:      04f8 1412  ld   $12,y       2436  ld(hi('vRTI#25'),Y)             #22
              04f9 e01e  jmp  y,$1e       2437  jmp(Y,'vRTI#25')                #23
              04fa c218  st   [$18]       2438  st([vAC])                       #24
                                          2439
                                          2440  # vRTI entry point
                                          2441  assert(pc()&255 == 251)         # The landing offset 251 for LUP trampoline is fixed
              04fb 0130  ld   [$30]       2442  ld([vIrqSave+0])                #13
              04fc c216  st   [$16]       2443  st([vPC])                       #14
              04fd 0131  ld   [$31]       2444  ld([vIrqSave+1])                #15
              04fe fcea  bra  vRTI#18     2445  bra('vRTI#18')                  #16
              04ff c217  st   [$17]       2446  st([vPC+1])                     #17
                                          2447
                                          2448
                                          2449
                                          2450  #-----------------------------------------------------------------------
                                          2451  #
                                          2452  #  $0500 ROM page 5-6: Shift table and code
                                          2453  #
                                          2454  #-----------------------------------------------------------------------
                                          2455
                                          2456  align(0x100, size=0x200)
                                          2457
                                          2458  # Lookup table for i>>n, with n in 1..6
                                          2459  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2460  #       ...
                                          2461  #       ld   <.ret
                                          2462  #       st   [vTmp]
                                          2463  #       ld   >shiftTable,y
                                          2464  #       <calculate ix>
                                          2465  #       jmp  y,ac
                                          2466  #       bra  $ff
                                          2467  # .ret: ...
                                          2468  #
                                          2469  # i >> 7 can be always be done with RAM: [i&128]
                                          2470  #       ...
                                          2471  #       anda $80,x
                                          2472  #       ld   [x]
                                          2473  #       ...
                                          2474
                                          2475  label('shiftTable')
                                          2476  shiftTable = pc()
                                          2477
                                          2478  for ix in range(255):
                                          2479    for n in range(1,7): # Find first zero
                                          2480      if ~ix & (1 << (n-1)):
                                          2481        break
                                          2482    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2483    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b00xxxxxx >> 6
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0001  ld   $01         ;0b01xxxxxx >> 6
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0002  ld   $02         ;0b10xxxxxx >> 6
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2484
                                          2485  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2486  bra([vTmp])                     # Jumps back into next page
                                          2487
                                          2488  label('SYS_LSRW1_48')
                                          2489  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2490  nop()                           #15
              0601 1405  ld   $05,y       2491  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2492  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2493  st([vTmp])                      #18
              0604 0118  ld   [$18]       2494  ld([vAC])                       #19
              0605 20fe  anda $fe         2495  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2496  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2497  bra(255)                        #22 bra shiftTable+255
                                          2498  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2499  st([vAC])                       #26
              0609 0119  ld   [$19]       2500  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2501  anda(1)                         #28
              060b 807f  adda $7f         2502  adda(127)                       #29
              060c 2080  anda $80         2503  anda(128)                       #30
              060d 4118  ora  [$18]       2504  ora([vAC])                      #31
              060e c218  st   [$18]       2505  st([vAC])                       #32
              060f 0015  ld   $15         2506  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2507  st([vTmp])                      #34
              0611 0119  ld   [$19]       2508  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2509  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2510  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2511  bra(255)                        #38 bra shiftTable+255
                                          2512  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2513  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2514  ld(hi('REENTER'),Y)             #43
              0617 e0cb  jmp  y,$cb       2515  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2516  ld(-48/2)                       #45
                                          2517
                                          2518  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2519  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2520  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2521  st([vTmp])                      #17
              061c 0118  ld   [$18]       2522  ld([vAC])                       #18
              061d 20fc  anda $fc         2523  anda(0b11111100)                #19
              061e 4001  ora  $01         2524  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2525  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2526  bra(255)                        #22 bra shiftTable+255
                                          2527  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2528  st([vAC])                       #26
              0622 0119  ld   [$19]       2529  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2530  adda(AC)                        #28
              0624 8200  adda ac          2531  adda(AC)                        #29
              0625 8200  adda ac          2532  adda(AC)                        #30
              0626 8200  adda ac          2533  adda(AC)                        #31
              0627 8200  adda ac          2534  adda(AC)                        #32
              0628 8200  adda ac          2535  adda(AC)                        #33
              0629 4118  ora  [$18]       2536  ora([vAC])                      #34
              062a c218  st   [$18]       2537  st([vAC])                       #35
              062b 0032  ld   $32         2538  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2539  st([vTmp])                      #37
              062d 0119  ld   [$19]       2540  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2541  anda(0b11111100)                #39
              062f 4001  ora  $01         2542  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2543  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2544  bra(255)                        #42 bra shiftTable+255
                                          2545  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2546  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2547  ld(hi('REENTER'),Y)             #47
              0634 e0cb  jmp  y,$cb       2548  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2549  ld(-52/2)                       #49
                                          2550
                                          2551  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2552  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2553  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2554  st([vTmp])                      #17
              0639 0118  ld   [$18]       2555  ld([vAC])                       #18
              063a 20f8  anda $f8         2556  anda(0b11111000)                #19
              063b 4003  ora  $03         2557  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2558  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2559  bra(255)                        #22 bra shiftTable+255
                                          2560  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2561  st([vAC])                       #26
              063f 0119  ld   [$19]       2562  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2563  adda(AC)                        #28
              0641 8200  adda ac          2564  adda(AC)                        #29
              0642 8200  adda ac          2565  adda(AC)                        #30
              0643 8200  adda ac          2566  adda(AC)                        #31
              0644 8200  adda ac          2567  adda(AC)                        #32
              0645 4118  ora  [$18]       2568  ora([vAC])                      #33
              0646 c218  st   [$18]       2569  st([vAC])                       #34
              0647 004e  ld   $4e         2570  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2571  st([vTmp])                      #36
              0649 0119  ld   [$19]       2572  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2573  anda(0b11111000)                #38
              064b 4003  ora  $03         2574  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2575  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2576  bra(255)                        #41 bra shiftTable+255
                                          2577  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2578  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2579  ld(-52/2)                       #46
              0650 1403  ld   $03,y       2580  ld(hi('REENTER'),Y)             #47
              0651 e0cb  jmp  y,$cb       2581  jmp(Y,'REENTER')                #48
                                          2582  #nop()                          #49
                                          2583
                                          2584  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2585  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2586  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2587  st([vTmp])                      #17
              0655 0118  ld   [$18]       2588  ld([vAC])                       #18
              0656 20f0  anda $f0         2589  anda(0b11110000)                #19
              0657 4007  ora  $07         2590  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2591  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2592  bra(255)                        #22 bra shiftTable+255
                                          2593  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2594  st([vAC])                       #26
              065b 0119  ld   [$19]       2595  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2596  adda(AC)                        #28
              065d 8200  adda ac          2597  adda(AC)                        #29
              065e 8200  adda ac          2598  adda(AC)                        #30
              065f 8200  adda ac          2599  adda(AC)                        #31
              0660 4118  ora  [$18]       2600  ora([vAC])                      #32
              0661 c218  st   [$18]       2601  st([vAC])                       #33
              0662 0069  ld   $69         2602  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2603  st([vTmp])                      #35
              0664 0119  ld   [$19]       2604  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2605  anda(0b11110000)                #37
              0666 4007  ora  $07         2606  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2607  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2608  bra(255)                        #40 bra shiftTable+255
                                          2609  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2610  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2611  ld(hi('REENTER'),Y)             #45
              066b e0cb  jmp  y,$cb       2612  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2613  ld(-50/2)                       #47
                                          2614
                                          2615  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2616  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2617  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2618  st([vTmp])                      #17
              0670 0118  ld   [$18]       2619  ld([vAC])                       #18
              0671 20e0  anda $e0         2620  anda(0b11100000)                #19
              0672 400f  ora  $0f         2621  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2622  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2623  bra(255)                        #22 bra shiftTable+255
                                          2624  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2625  st([vAC])                       #26
              0676 0119  ld   [$19]       2626  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2627  adda(AC)                        #28
              0678 8200  adda ac          2628  adda(AC)                        #29
              0679 8200  adda ac          2629  adda(AC)                        #30
              067a 4118  ora  [$18]       2630  ora([vAC])                      #31
              067b c218  st   [$18]       2631  st([vAC])                       #32
              067c 0083  ld   $83         2632  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2633  st([vTmp])                      #34
              067e 0119  ld   [$19]       2634  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2635  anda(0b11100000)                #36
              0680 400f  ora  $0f         2636  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2637  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2638  bra(255)                        #39 bra shiftTable+255
                                          2639  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2640  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2641  ld(-50/2)                       #45
              0685 1403  ld   $03,y       2642  ld(hi('REENTER'),Y)             #46
              0686 e0cb  jmp  y,$cb       2643  jmp(Y,'REENTER')                #47
                                          2644  #nop()                          #48
                                          2645
                                          2646  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2647  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2648  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2649  st([vTmp])                      #17
              068a 0118  ld   [$18]       2650  ld([vAC])                       #18
              068b 20c0  anda $c0         2651  anda(0b11000000)                #19
              068c 401f  ora  $1f         2652  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2653  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2654  bra(255)                        #22 bra shiftTable+255
                                          2655  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2656  st([vAC])                       #26
              0690 0119  ld   [$19]       2657  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2658  adda(AC)                        #28
              0692 8200  adda ac          2659  adda(AC)                        #29
              0693 4118  ora  [$18]       2660  ora([vAC])                      #30
              0694 c218  st   [$18]       2661  st([vAC])                       #31
              0695 009c  ld   $9c         2662  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2663  st([vTmp])                      #33
              0697 0119  ld   [$19]       2664  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2665  anda(0b11000000)                #35
              0699 401f  ora  $1f         2666  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2667  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2668  bra(255)                        #38 bra shiftTable+255
                                          2669  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2670  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2671  ld(hi('REENTER'),Y)             #43
              069e e0cb  jmp  y,$cb       2672  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2673  ld(-48/2)                       #45
                                          2674
                                          2675  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2676  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2677  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2678  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2679  ld([vAC+1])                     #18
              06a4 8200  adda ac          2680  adda(AC)                        #19
              06a5 8200  adda ac          2681  adda(AC)                        #20
              06a6 8200  adda ac          2682  adda(AC)                        #21
              06a7 8200  adda ac          2683  adda(AC)                        #22
              06a8 c219  st   [$19]       2684  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2685  ld([vAC])                       #24
              06aa 20f0  anda $f0         2686  anda(0b11110000)                #25
              06ab 4007  ora  $07         2687  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2688  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2689  bra(255)                        #28 bra shiftTable+255
                                          2690  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2691  ora([vAC+1])                    #32
              06af c219  st   [$19]       2692  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2693  ld([vAC])                       #34
              06b1 8200  adda ac          2694  adda(AC)                        #35
              06b2 8200  adda ac          2695  adda(AC)                        #36
              06b3 8200  adda ac          2696  adda(AC)                        #37
              06b4 8200  adda ac          2697  adda(AC)                        #38
              06b5 c218  st   [$18]       2698  st([vAC])                       #39
              06b6 00e9  ld   $e9         2699  ld(-46/2)                       #40
              06b7 1403  ld   $03,y       2700  ld(hi('REENTER'),Y)             #41
              06b8 e0cb  jmp  y,$cb       2701  jmp(Y,'REENTER')                #42
                                          2702  #nop()                          #43
                                          2703
                                          2704  #-----------------------------------------------------------------------
                                          2705  # Extension SYS_Read3_40
                                          2706  #-----------------------------------------------------------------------
                                          2707
                                          2708  # Read 3 consecutive bytes from ROM
                                          2709  #
                                          2710  # Note: This function a bit obsolete, as it has very limited use. It's
                                          2711  #       effectively an application-specific SYS function for the Pictures
                                          2712  #       application from ROM v1. It requires the ROM data be organized
                                          2713  #       with trampoline3a and trampoline3b fragments, and their address
                                          2714  #       in ROM to be known. Better avoid using this.
                                          2715  #
                                          2716  # Variables:
                                          2717  #       sysArgs[0:2]    Bytes (out)
                                          2718  #       sysArgs[6:7]    ROM pointer (in)
                                          2719
                                          2720  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2721  ld([sysArgs+7],Y)               #15,32
              06ba e079  jmp  y,$79       2722  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2723  ld([sysArgs+6])                 #17
                                          2724  label('txReturn')
txReturn:     06bc c226  st   [$26]       2725  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2726  ld(hi('REENTER'),Y)             #35
              06be e0cb  jmp  y,$cb       2727  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2728  ld(-40/2)                       #37
                                          2729
                                          2730  def trampoline3a():
                                          2731    """Read 3 bytes from ROM page"""
                                          2732    while pc()&255 < 128-7:
                                          2733      nop()
                                          2734    bra(AC)                       #18
                                          2735    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2736    bra(123)                      #19
                                          2737    st([sysArgs+0])               #21
                                          2738    ld([sysArgs+6])               #22
                                          2739    adda(1)                       #23
                                          2740    bra(AC)                       #24
                                          2741    bra(250)                      #25 trampoline3b
                                          2742    align(1, size=0x80)
                                          2743
                                          2744  def trampoline3b():
                                          2745    """Read 3 bytes from ROM page (continue)"""
                                          2746    while pc()&255 < 256-6:
                                          2747      nop()
                                          2748    st([sysArgs+1])               #27
                                          2749    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2750    ld([sysArgs+6])               #28
                                          2751    adda(2)                       #29
                                          2752    ld(hi('txReturn'),Y)          #30
                                          2753    bra(AC)                       #31
                                          2754    jmp(Y,'txReturn')             #32
                                          2755    align(1, size=0x100)
                                          2756
                                          2757  #-----------------------------------------------------------------------
                                          2758  # Extension SYS_Unpack_56
                                          2759  #-----------------------------------------------------------------------
                                          2760
                                          2761  # Unpack 3 bytes into 4 pixels
                                          2762  #
                                          2763  # Variables:
                                          2764  #       sysArgs[0:2]    Packed bytes (in)
                                          2765  #       sysArgs[0:3]    Pixels (out)
                                          2766
                                          2767  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2768  ld(soundTable>>8,Y)             #15
              06c1 0126  ld   [$26]       2769  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2770  ora(0x03,X)                     #17
              06c3 0d00  ld   [y,x]       2771  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2772  st([sysArgs+3])                 #19 -> Pixel 3
                                          2773
              06c5 0126  ld   [$26]       2774  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2775  anda(0x03)                      #21
              06c7 8200  adda ac          2776  adda(AC)                        #22
              06c8 8200  adda ac          2777  adda(AC)                        #23
              06c9 8200  adda ac          2778  adda(AC)                        #24
              06ca 8200  adda ac          2779  adda(AC)                        #25
              06cb c226  st   [$26]       2780  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2781  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2782  ora(0x03,X)                     #28
              06ce 0d00  ld   [y,x]       2783  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2784  ora(0x03,X)                     #30
              06d0 0d00  ld   [y,x]       2785  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2786  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2787  st([sysArgs+2])                 #33 -> Pixel 2
                                          2788
              06d3 0125  ld   [$25]       2789  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2790  anda(0x0f)                      #35
              06d5 8200  adda ac          2791  adda(AC)                        #36
              06d6 8200  adda ac          2792  adda(AC)                        #37
              06d7 c225  st   [$25]       2793  st([sysArgs+1])                 #38
                                          2794
              06d8 0124  ld   [$24]       2795  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2796  ora(0x03,X)                     #40
              06da 0d00  ld   [y,x]       2797  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2798  ora(0x03,X)                     #42
              06dc 0d00  ld   [y,x]       2799  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2800  ora(0x03,X)                     #44
              06de 0d00  ld   [y,x]       2801  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2802  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2803  st([sysArgs+1])                 #47 -> Pixel 1
                                          2804
              06e1 0124  ld   [$24]       2805  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2806  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2807  st([sysArgs+0])                 #50 -> Pixel 0
                                          2808
              06e4 1403  ld   $03,y       2809  ld(hi('REENTER'),Y)             #51
              06e5 e0cb  jmp  y,$cb       2810  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2811  ld(-56/2)                       #53
                                          2812
                                          2813  #-----------------------------------------------------------------------
                                          2814  #       v6502 right shift instruction
                                          2815  #-----------------------------------------------------------------------
                                          2816
                                          2817  label('v6502_lsr#30')
v6502_lsr#30: 06e7 1525  ld   [$25],y     2818  ld([v6502_ADH],Y)               #30 Result
              06e8 ce00  st   [y,x]       2819  st([Y,X])                       #31
              06e9 c228  st   [$28]       2820  st([v6502_Qz])                  #32 Z flag
              06ea c229  st   [$29]       2821  st([v6502_Qn])                  #33 N flag
              06eb 140e  ld   $0e,y       2822  ld(hi('v6502_next'),Y)          #34
              06ec 00ed  ld   $ed         2823  ld(-38/2)                       #35
              06ed e020  jmp  y,$20       2824  jmp(Y,'v6502_next')             #36
                                          2825  #nop()                          #37 Overlap
                                          2826  #
                                          2827  label('v6502_ror#38')
v6502_ror#38: 06ee 1525  ld   [$25],y     2828  ld([v6502_ADH],Y)               #38,38 Result
              06ef 4119  ora  [$19]       2829  ora([v6502_BI])                 #39 Transfer bit 8
              06f0 ce00  st   [y,x]       2830  st([Y,X])                       #40
              06f1 c228  st   [$28]       2831  st([v6502_Qz])                  #41 Z flag
              06f2 c229  st   [$29]       2832  st([v6502_Qn])                  #42 N flag
              06f3 140e  ld   $0e,y       2833  ld(hi('v6502_next'),Y)          #43
              06f4 e020  jmp  y,$20       2834  jmp(Y,'v6502_next')             #44
              06f5 00e9  ld   $e9         2835  ld(-46/2)                       #45
                                          2836
                                          2837  #-----------------------------------------------------------------------
                                          2838  #       Reserved
                                          2839  #-----------------------------------------------------------------------
                                          2840
                                          2841  # XXX Reserve space for LSRW?
                                          2842
                                          2843  #-----------------------------------------------------------------------
                                          2844  #
                                          2845  #  $0700 ROM page 7-8: Gigatron font data
                                          2846  #
                                          2847  #-----------------------------------------------------------------------
                                          2848
              06f6 0200  nop              2849  align(0x100, size=0x100)
              06f7 0200  nop
              06f8 0200  nop
              * 10 times
                                          2850
                                          2851  label('font32up')
                                          2852  for ch in range(32, 32+50):
                                          2853    comment = 'Char %s' % repr(chr(ch))
                                          2854    for byte in font.font[ch-32]:
                                          2855      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0030  ld   $30
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2856      comment = C(comment)
                                          2857
              07fa 0200  nop              2858  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e068  jmp  y,$68       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2859
                                          2860  #-----------------------------------------------------------------------
                                          2861
                                          2862  align(0x100, size=0x100)
                                          2863
                                          2864  label('font82up')
                                          2865  for ch in range(32+50, 132):
                                          2866    comment = 'Char %s' % repr(chr(ch))
                                          2867    for byte in font.font[ch-32]:
                                          2868      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0018  ld   $18
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2869      comment = C(comment)
                                          2870
              08fa 0200  nop              2871  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e068  jmp  y,$68       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2872
                                          2873  #-----------------------------------------------------------------------
                                          2874  #
                                          2875  #  $0900 ROM page 9: Key table for music
                                          2876  #
                                          2877  #-----------------------------------------------------------------------
                                          2878
                                          2879  align(0x100, size=0x100)
                                          2880  notes = 'CCDDEFFGGAAB'
                                          2881  sampleRate = cpuClock / 200.0 / 4
                                          2882  label('notesTable')
notesTable:   0900 0000  ld   $00         2883  ld(0)
              0901 0000  ld   $00         2884  ld(0)
                                          2885  for i in range(0, 250, 2):
                                          2886    j = i//2-1
                                          2887    freq = 440.0*2.0**((j-57)/12.0)
                                          2888    if j>=0 and freq <= sampleRate/2.0:
                                          2889      key = int(round(32768 * freq / sampleRate))
                                          2890      octave, note = j//12, notes[j%12]
                                          2891      sharp = '-' if notes[j%12-1] != note else '#'
                                          2892      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2893      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2894
              09c0 0200  nop              2895  trampoline()
              09c1 0200  nop
              09c2 0200  nop
              * 59 times
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e068  jmp  y,$68       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2896
                                          2897  #-----------------------------------------------------------------------
                                          2898  #
                                          2899  #  $0a00 ROM page 10: Inversion table
                                          2900  #
                                          2901  #-----------------------------------------------------------------------
                                          2902
                                          2903  align(0x100, size=0x100)
                                          2904  label('invTable')
                                          2905
                                          2906  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2907  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2908    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2909
                                          2910  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e068  jmp  y,$68       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2911
                                          2912  #-----------------------------------------------------------------------
                                          2913  #
                                          2914  #  $0d00 ROM page 11: More SYS functions
                                          2915  #
                                          2916  #-----------------------------------------------------------------------
                                          2917
                                          2918  align(0x100, size=0x100)
                                          2919
                                          2920  #-----------------------------------------------------------------------
                                          2921  # Extension SYS_SetMode_v2_80
                                          2922  #-----------------------------------------------------------------------
                                          2923
                                          2924  # Set video mode to 0 to 3 black scanlines per pixel line.
                                          2925  #
                                          2926  # Mainly for making the MODE command available in Tiny BASIC, so that
                                          2927  # the user can experiment. It's adviced to refrain from using
                                          2928  # SYS_SetMode_v2_80 in regular applications. Video mode is a deeply
                                          2929  # personal preference, and the programmer shouldn't overrule the user
                                          2930  # in that choice. The Gigatron philisophy is that the end user has
                                          2931  # the final say on what happens on the system, not the application,
                                          2932  # even if that implies a degraded performance. This doesn't mean that
                                          2933  # all applications must work well in all video modes: mode 1 is still
                                          2934  # the default. If an application really doesn't work at all in that
                                          2935  # mode, it's acceptable to change mode once after loading.
                                          2936  #
                                          2937  # There's no "SYS_GetMode" function.
                                          2938  #
                                          2939  # Variables:
                                          2940  #       vAC bit 0:1     Mode:
                                          2941  #                         0      "ABCD" -> Full mode (slowest)
                                          2942  #                         1      "ABC-" -> Default mode after reset
                                          2943  #                         2      "A-C-" -> at67's mode
                                          2944  #                         3      "A---" -> HGM's mode
                                          2945  #       vAC bit 2:15    Ignored bits and should be 0
                                          2946  #
                                          2947  # Special values (ROM v4):
                                          2948  #       vAC = 1975      Zombie mode (no video signals, no input,
                                          2949  #                        no blinkenlights).
                                          2950  #       vAC = -1        Leave zombie mode and restore previous mode.
                                          2951
                                          2952  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2953  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2954  ld(hi('sys_SetMode'),Y)         #15
              0b01 e056  jmp  y,$56       2955  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2956  ld([vReturn])                   #17
                                          2957
                                          2958  #-----------------------------------------------------------------------
                                          2959  # Extension SYS_SetMemory_v2_54
                                          2960  #-----------------------------------------------------------------------
                                          2961
                                          2962  # SYS function for setting 1..256 bytes
                                          2963  #
                                          2964  # sysArgs[0]   Copy count (in, changed)
                                          2965  # sysArgs[1]   Copy value (in)
                                          2966  # sysArgs[2:3] Destination address (in, changed)
                                          2967  #
                                          2968  # Sets up to 8 bytes per invocation before restarting itself through vCPU.
                                          2969  # Doesn't wrap around page boundary. Can run 3 times per 148-cycle time slice.
                                          2970  # All combined that gives a 300% speedup over ROMv4 and before.
                                          2971
                                          2972  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:
              0b03 0124  ld   [$24]       2973  ld([sysArgs+0])                 #15
                                          2974  bra('sys_SetMemory#18')         #16
              0b04 fc1a  bra  sys_SetMemory#18
              0b05 1126  ld   [$26],x     2975  ld([sysArgs+2],X)               #17
                                          2976
                                          2977  #-----------------------------------------------------------------------
                                          2978  # Extension SYS_SendSerial1_v3_80
                                          2979  #-----------------------------------------------------------------------
                                          2980
                                          2981  # SYS function for sending data over serial controller port using
                                          2982  # pulse width modulation of the vertical sync signal.
                                          2983  #
                                          2984  # Variables:
                                          2985  #       sysArgs[0:1]    Source address               (in, changed)
                                          2986  #       sysArgs[2]      Start bit mask (typically 1) (in, changed)
                                          2987  #       sysArgs[3]      Number of send frames X      (in, changed)
                                          2988  #
                                          2989  # The sending will abort if input data is detected on the serial port.
                                          2990  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2991  #
                                          2992  # This modulates the next upcoming X vertical pulses with the supplied
                                          2993  # data. A zero becomes a 7 line vPulse, a one will be 9 lines.
                                          2994  # After that, the vPulse width falls back to 8 lines (idle).
                                          2995
                                          2996  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2997  ld([videoY])                    #15
                                          2998  bra('sys_SendSerial1')          #16
              0b07 fc85  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2999  xora(videoYline0)               #17 First line of vertical blank
                                          3000
                                          3001  #-----------------------------------------------------------------------
                                          3002  # Extension SYS_ExpanderControl_v4_40
                                          3003  #-----------------------------------------------------------------------
                                          3004
                                          3005  # Sets the I/O and RAM expander's control register
                                          3006  #
                                          3007  # Variables:
                                          3008  #       vAC bit 2       Device enable /SS0
                                          3009  #           bit 3       Device enable /SS1
                                          3010  #           bit 4       Device enable /SS2
                                          3011  #           bit 5       Device enable /SS3
                                          3012  #           bit 6       Banking B0
                                          3013  #           bit 7       Banking B1
                                          3014  #           bit 15      Data out MOSI
                                          3015  #       sysArgs[7]      Cache for control state (written to)
                                          3016  #
                                          3017  # Intended for prototyping, and probably too low-level for most applications
                                          3018  # Still there's a safeguard: it's not possible to disable RAM using this
                                          3019
                                          3020  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140d  ld   $0d,y       3021  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e000  jmp  y,$00       3022  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 000c  ld   $0c         3023  ld(0b00001100)                  #17
                                          3024  #    ^^^^^^^^
                                          3025  #    |||||||`-- SCLK
                                          3026  #    ||||||`--- Not connected
                                          3027  #    |||||`---- /SS0
                                          3028  #    ||||`----- /SS1
                                          3029  #    |||`------ /SS2 or /CPOL
                                          3030  #    ||`------- /SS3 or /ZPBANK
                                          3031  #    |`-------- B0
                                          3032  #    `--------- B1
                                          3033
                                          3034  #-----------------------------------------------------------------------
                                          3035  # Extension SYS_Run6502_v4_80
                                          3036  #-----------------------------------------------------------------------
                                          3037
                                          3038  # Transfer control to v6502
                                          3039  #
                                          3040  # Calling 6502 code from vCPU goes (only) through this SYS function.
                                          3041  # Directly modifying the vCpuSelect variable is unreliable. The
                                          3042  # control transfer is immediate, without waiting for the current
                                          3043  # time slice to end or first returning to vCPU.
                                          3044  #
                                          3045  # vCPU code and v6502 code can interoperate without much hassle:
                                          3046  # - The v6502 program counter is vLR, and v6502 doesn't touch vPC
                                          3047  # - Returning to vCPU is with the BRK instruction
                                          3048  # - BRK doesn't dump process state on the stack
                                          3049  # - vCPU can save/restore the vLR with PUSH/POP
                                          3050  # - Stacks are shared, vAC is shared
                                          3051  # - vAC can indicate what the v6502 code wants. vAC+1 will be cleared
                                          3052  # - Alternative is to leave a word in sysArgs[6:7] (v6502 X and Y registers)
                                          3053  # - Another way is to set vPC before BRK, and vCPU will continue there(+2)
                                          3054  #
                                          3055  # Calling v6502 code from vCPU looks like this:
                                          3056  #       LDWI  SYS_Run6502_v4_80
                                          3057  #       STW   sysFn
                                          3058  #       LDWI  $6502_start_address
                                          3059  #       STW   vLR
                                          3060  #       SYS   80
                                          3061  #
                                          3062  # Variables:
                                          3063  #       vAC             Accumulator
                                          3064  #       vLR             Program Counter
                                          3065  #       vSP             Stack Pointer (+1)
                                          3066  #       sysArgs[6]      Index Register X
                                          3067  #       sysArgs[7]      Index Register Y
                                          3068  # For info:
                                          3069  #       sysArgs[0:1]    Address Register, free to clobber
                                          3070  #       sysArgs[2]      Instruction Register, free to clobber
                                          3071  #       sysArgs[3:5]    Flags, don't touch
                                          3072  #
                                          3073  # Implementation details::
                                          3074  #
                                          3075  #  The time to reserve for this transition is the maximum time
                                          3076  #  between NEXT and v6502_check. This is
                                          3077  #       SYS call duration + 2*v6502_maxTicks + (v6502_overhead - vCPU_overhead)
                                          3078  #     = 22 + 28 + (11 - 9) = 62 cycles.
                                          3079  #  So reserving 80 cycles is future proof. This isn't overhead, as it includes
                                          3080  #  the fetching of the first 6502 opcode and its operands..
                                          3081  #
                                          3082  #                      0            10                 28=0         9
                                          3083  #    ---+----+---------+------------+------------------+-----------+---
                                          3084  # video | nop| runVcpu |   ENTER    | At least one ins |   EXIT    | video
                                          3085  #    ---+----+---------+------------+------------------+-----------+---
                                          3086  #        sync  prelude  ENTER-to-ins    ins-to-NEXT     NEXT-to-video
                                          3087  #       |<-->|
                                          3088  #        0/1 |<------->|
                                          3089  #                 5    |<----------------------------->|
                                          3090  #          runVCpu_overhead           28               |<--------->|
                                          3091  #                                 2*maxTicks                 9
                                          3092  #                                                      vCPU_overhead
                                          3093  #
                                          3094  #                      0                21                    38=0       11
                                          3095  #    ---+----+---------+----------------+--------------------+-----------+---
                                          3096  # video | nop| runVcpu |   v6502_ENTER  | At least one fetch |v6502_exitB| video
                                          3097  #    ---+----+---------+----------------+--------------------+-----------+---
                                          3098  #        sync  prelude   enter-to-fetch     fetch-to-check    check-to-video
                                          3099  #       |<-->|
                                          3100  #        0/1 |<------->|
                                          3101  #                 5    |<----------------------------------->|
                                          3102  #          runVcpu_overhead           38                     |<--------->|
                                          3103  #                              2*v6520_maxTicks                    11
                                          3104  #                                                            v6502_overhead
                                          3105
                                          3106  label('SYS_Run6502_v4_80')
SYS_Run6502_v4_80:
              0b0c 140d  ld   $0d,y       3107  ld(hi('sys_v6502'),Y)           #15
              0b0d e08b  jmp  y,$8b       3108  jmp(Y,'sys_v6502')              #16
              0b0e 000d  ld   $0d         3109  ld(hi('v6502_ENTER'))           #17 Activate v6502
                                          3110
                                          3111  #-----------------------------------------------------------------------
                                          3112  # Extension SYS_ResetWaveforms_v4_50
                                          3113  #-----------------------------------------------------------------------
                                          3114
                                          3115  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          3116  # soundTable[4x+1] = pulse
                                          3117  # soundTable[4x+2] = triangle
                                          3118  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          3119
                                          3120  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 1412  ld   $12,y       3121  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e0a5  jmp  y,$a5       3122  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       3123  ld(soundTable>>8,Y)             #17
                                          3124
                                          3125  #-----------------------------------------------------------------------
                                          3126  # Extension SYS_ShuffleNoise_v4_46
                                          3127  #-----------------------------------------------------------------------
                                          3128
                                          3129  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          3130
                                          3131  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 1412  ld   $12,y       3132  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e0c6  jmp  y,$c6       3133  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       3134  ld(soundTable>>8,Y)             #17
                                          3135
                                          3136  #-----------------------------------------------------------------------
                                          3137  # Extension SYS_SpiExchangeBytes_v4_134
                                          3138  #-----------------------------------------------------------------------
                                          3139
                                          3140  # Send AND receive 1..256 bytes over SPI interface
                                          3141
                                          3142  # Variables:
                                          3143  #       sysArgs[0]      Page index start, for both send/receive (in, changed)
                                          3144  #       sysArgs[1]      Memory page for send data (in)
                                          3145  #       sysArgs[2]      Page index stop (in)
                                          3146  #       sysArgs[3]      Memory page for receive data (in)
                                          3147  #       sysArgs[4]      Scratch (changed)
                                          3148
                                          3149  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       3150  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e015  jmp  y,$15       3151  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1401  ld   $01,y       3152  ld(hi(ctrlBits),Y)              #17 Control state as saved by SYS_ExpanderControl
                                          3153
                                          3154
                                          3155  #-----------------------------------------------------------------------
                                          3156  # Extension SYS_ReceiveSerial1_v6_32
                                          3157  #-----------------------------------------------------------------------
                                          3158
                                          3159  # SYS function for receiving one byte over the serial controller port.
                                          3160  # This is a public version of SYS_NextByteIn from the loader private
                                          3161  # extension.  A byte is read from IN when videoY reaches
                                          3162  # sysArgs[3]. The byte is added to the checksum sysArgs[2] then stored
                                          3163  # at address sysArgs[0:1] which gets incremented.
                                          3164  #
                                          3165  # The 65 bytes of a serial frame can be read for the following values
                                          3166  # of videoY: 207 (protocol byte) 219 (length, 6 bits only) 235, 251
                                          3167  # (address) then 2, 6, 10, .. 238 stepping by four, then 185.
                                          3168  #
                                          3169  # Variables:
                                          3170  #     sysArgs[0:1] Address
                                          3171  #     sysArgs[2]   Checksum
                                          3172  #     sysArgs[3]   Wait value (videoY)
                                          3173
                                          3174  label('SYS_ReceiveSerial1_v6_32')
SYS_ReceiveSerial1_v6_32:                 3175  bra('sys_ReceiveSerial1')       #15
              0b18 fcb2  bra  sys_ReceiveSerial1
              0b19 0127  ld   [$27]       3176  ld([sysArgs+3])                 #16
                                          3177
                                          3178  #-----------------------------------------------------------------------
                                          3179  #  Implementations
                                          3180  #-----------------------------------------------------------------------
                                          3181
                                          3182  # SYS_SetMemory_54 implementation
                                          3183  label('sys_SetMemory#18')
sys_SetMemory#18:
              0b1a 1527  ld   [$27],y     3184  ld([sysArgs+3],Y)               #18
              0b1b f83e  ble  .sysSb#21   3185  ble('.sysSb#21')                #19 Enter fast lane if >=128 or at 0 (-> 256)
              0b1c a008  suba $08         3186  suba(8)                         #20
              0b1d f440  bge  .sysSb#23   3187  bge('.sysSb#23')                #21 Or when >=8
              0b1e c224  st   [$24]       3188  st([sysArgs+0])                 #22
              0b1f 2004  anda $04         3189  anda(4)                         #23
              0b20 f027  beq  .sysSb#26   3190  beq('.sysSb#26')                #24
              0b21 0125  ld   [$25]       3191  ld([sysArgs+1])                 #25 Set 4 pixels
              0b22 de00  st   [y,x++]     3192  st([Y,Xpp])                     #26
              0b23 de00  st   [y,x++]     3193  st([Y,Xpp])                     #27
              0b24 de00  st   [y,x++]     3194  st([Y,Xpp])                     #28
              0b25 fc2a  bra  .sysSb#31   3195  bra('.sysSb#31')                #29
              0b26 de00  st   [y,x++]     3196  st([Y,Xpp])                     #30
                                          3197  label('.sysSb#26')
.sysSb#26:    0b27 0001  ld   $01         3198  wait(31-26)                     #26
              0b28 ec28  bne  $0b28
              0b29 a001  suba $01
                                          3199  label('.sysSb#31')
.sysSb#31:    0b2a 0124  ld   [$24]       3200  ld([sysArgs+0])                 #31
              0b2b 2002  anda $02         3201  anda(2)                         #32
              0b2c f031  beq  .sysSb#35   3202  beq('.sysSb#35')                #33
              0b2d 0125  ld   [$25]       3203  ld([sysArgs+1])                 #34 Set 2 pixels
              0b2e de00  st   [y,x++]     3204  st([Y,Xpp])                     #35
              0b2f fc34  bra  .sysSb#38   3205  bra('.sysSb#38')                #36
              0b30 de00  st   [y,x++]     3206  st([Y,Xpp])                     #37
                                          3207  label('.sysSb#35')
.sysSb#35:    0b31 0200  nop              3208  wait(38-35)                     #35
              0b32 0200  nop
              0b33 0200  nop
                                          3209  label('.sysSb#38')
.sysSb#38:    0b34 0124  ld   [$24]       3210  ld([sysArgs+0])                 #38
              0b35 2001  anda $01         3211  anda(1)                         #39
              0b36 f039  beq  $0b39       3212  beq(pc()+3)                     #40
              0b37 fc3a  bra  $0b3a       3213  bra(pc()+3)                     #41
              0b38 0125  ld   [$25]       3214  ld([sysArgs+1])                 #42 Set 1 pixel
              0b39 0d00  ld   [y,x]       3215  ld([Y,X])                       #42(!) No change
              0b3a ce00  st   [y,x]       3216  st([Y,X])                       #43
              0b3b 1403  ld   $03,y       3217  ld(hi('NEXTY'),Y)               #44 Return
              0b3c e000  jmp  y,$00       3218  jmp(Y,'NEXTY')                  #45 All done
              0b3d 00e8  ld   $e8         3219  ld(-48/2)                       #46
                                          3220  label('.sysSb#21')
.sysSb#21:    0b3e 0200  nop              3221  nop()                           #21
              0b3f c224  st   [$24]       3222  st([sysArgs+0])                 #22
                                          3223  label('.sysSb#23')
.sysSb#23:    0b40 0125  ld   [$25]       3224  ld([sysArgs+1])                 #23 Set 8 pixels
              0b41 de00  st   [y,x++]     3225  st([Y,Xpp])                     #24
              0b42 de00  st   [y,x++]     3226  st([Y,Xpp])                     #25
              0b43 de00  st   [y,x++]     3227  st([Y,Xpp])                     #26
              0b44 de00  st   [y,x++]     3228  st([Y,Xpp])                     #27
              0b45 de00  st   [y,x++]     3229  st([Y,Xpp])                     #28
              0b46 de00  st   [y,x++]     3230  st([Y,Xpp])                     #29
              0b47 de00  st   [y,x++]     3231  st([Y,Xpp])                     #30
              0b48 de00  st   [y,x++]     3232  st([Y,Xpp])                     #31
              0b49 0126  ld   [$26]       3233  ld([sysArgs+2])                 #32 Advance write pointer
              0b4a 8008  adda $08         3234  adda(8)                         #33
              0b4b c226  st   [$26]       3235  st([sysArgs+2])                 #34
              0b4c 0124  ld   [$24]       3236  ld([sysArgs+0])                 #35
              0b4d f050  beq  $0b50       3237  beq(pc()+3)                     #36
              0b4e fc51  bra  $0b51       3238  bra(pc()+3)                     #37
              0b4f 00fe  ld   $fe         3239  ld(-2)                          #38 Self-restart when more to do
              0b50 0000  ld   $00         3240  ld(0)                           #38(!)
              0b51 8116  adda [$16]       3241  adda([vPC])                     #39
              0b52 c216  st   [$16]       3242  st([vPC])                       #40
              0b53 1403  ld   $03,y       3243  ld(hi('REENTER'),Y)             #41
              0b54 e0cb  jmp  y,$cb       3244  jmp(Y,'REENTER')                #42
              0b55 00e9  ld   $e9         3245  ld(-46/2)                       #43
                                          3246
                                          3247  # SYS_SetMode_80 implementation
                                          3248  label('sys_SetMode')
sys_SetMode:  0b56 ec59  bne  $0b59       3249  bne(pc()+3)                     #18
              0b57 fc59  bra  $0b59       3250  bra(pc()+2)                     #19
              0b58 0003  ld   $03         3251  ld('startVideo')                #20 First enable video if disabled
              0b59 c21e  st   [$1e]       3252  st([vReturn])                   #20,21
              0b5a 0119  ld   [$19]       3253  ld([vAC+1])                     #22
              0b5b f065  beq  .sysSm#25   3254  beq('.sysSm#25')                #23
              0b5c 1403  ld   $03,y       3255  ld(hi('REENTER'),Y)             #24
              0b5d 6118  xora [$18]       3256  xora([vAC])                     #25
              0b5e 60b0  xora $b0         3257  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b5f ec62  bne  $0b62       3258  bne(pc()+3)                     #27
              0b60 fc63  bra  $0b63       3259  bra(pc()+3)                     #28
                                          3260  assert videoZ == 0x0100
              0b61 c21e  st   [$1e]       3261  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b62 0200  nop              3262  nop()                           #29(!) Ignore and return
              0b63 e0cb  jmp  y,$cb       3263  jmp(Y,'REENTER')                #30
              0b64 00ef  ld   $ef         3264  ld(-34/2)                       #31
                                          3265  label('.sysSm#25')
.sysSm#25:    0b65 0118  ld   [$18]       3266  ld([vAC])                       #25 Mode 0,1,2,3
              0b66 2003  anda $03         3267  anda(3)                         #26
              0b67 806a  adda $6a         3268  adda('.sysSm#30')               #27
              0b68 fe00  bra  ac          3269  bra(AC)                         #28
              0b69 fc6e  bra  .sysSm#31   3270  bra('.sysSm#31')                #29
                                          3271  label('.sysSm#30')
.sysSm#30:    0b6a 000a  ld   $0a         3272  ld('pixels')                    #30 videoB lines
              0b6b 000a  ld   $0a         3273  ld('pixels')                    #30
              0b6c 00f6  ld   $f6         3274  ld('nopixels')                  #30
              0b6d 00f6  ld   $f6         3275  ld('nopixels')                  #30
                                          3276  label('.sysSm#31')
.sysSm#31:    0b6e c20a  st   [$0a]       3277  st([videoModeB])                #31
              0b6f 0118  ld   [$18]       3278  ld([vAC])                       #32
              0b70 2003  anda $03         3279  anda(3)                         #33
              0b71 8074  adda $74         3280  adda('.sysSm#37')               #34
              0b72 fe00  bra  ac          3281  bra(AC)                         #35
              0b73 fc78  bra  .sysSm#38   3282  bra('.sysSm#38')                #36
                                          3283  label('.sysSm#37')
.sysSm#37:    0b74 000a  ld   $0a         3284  ld('pixels')                    #37 videoC lines
              0b75 000a  ld   $0a         3285  ld('pixels')                    #37
              0b76 000a  ld   $0a         3286  ld('pixels')                    #37
              0b77 00f6  ld   $f6         3287  ld('nopixels')                  #37
                                          3288  label('.sysSm#38')
.sysSm#38:    0b78 c20b  st   [$0b]       3289  st([videoModeC])                #38
              0b79 0118  ld   [$18]       3290  ld([vAC])                       #39
              0b7a 2003  anda $03         3291  anda(3)                         #40
              0b7b 807e  adda $7e         3292  adda('.sysSm#44')               #41
              0b7c fe00  bra  ac          3293  bra(AC)                         #42
              0b7d fc82  bra  .sysSm#45   3294  bra('.sysSm#45')                #43
                                          3295  label('.sysSm#44')
.sysSm#44:    0b7e 000a  ld   $0a         3296  ld('pixels')                    #44 videoD lines
              0b7f 00f6  ld   $f6         3297  ld('nopixels')                  #44
              0b80 00f6  ld   $f6         3298  ld('nopixels')                  #44
              0b81 00f6  ld   $f6         3299  ld('nopixels')                  #44
                                          3300  label('.sysSm#45')
.sysSm#45:    0b82 c20c  st   [$0c]       3301  st([videoModeD])                #45
              0b83 e0cb  jmp  y,$cb       3302  jmp(Y,'REENTER')                #46
              0b84 00e7  ld   $e7         3303  ld(-50/2)                       #47
                                          3304
                                          3305  # SYS_SendSerial1_v3_80 implementation
                                          3306  label('sys_SendSerial1')
sys_SendSerial1:
              0b85 f08c  beq  .sysSs#20   3307  beq('.sysSs#20')                #18
              0b86 1124  ld   [$24],x     3308  ld([sysArgs+0],X)               #19
              0b87 0116  ld   [$16]       3309  ld([vPC])                       #20 Wait for vBlank
              0b88 a002  suba $02         3310  suba(2)                         #21
              0b89 1403  ld   $03,y       3311  ld(hi('REENTER_28'),Y)          #22
              0b8a e0ca  jmp  y,$ca       3312  jmp(Y,'REENTER_28')             #23
              0b8b c216  st   [$16]       3313  st([vPC])                       #24
                                          3314  label('.sysSs#20')
.sysSs#20:    0b8c 1525  ld   [$25],y     3315  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b8d 0d00  ld   [y,x]       3316  ld([Y,X])                       #21 Copy next bit
              0b8e 2126  anda [$26]       3317  anda([sysArgs+2])               #22
              0b8f ec92  bne  $0b92       3318  bne(pc()+3)                     #23
              0b90 fc93  bra  $0b93       3319  bra(pc()+3)                     #24
              0b91 000e  ld   $0e         3320  ld(7*2)                         #25
              0b92 0012  ld   $12         3321  ld(9*2)                         #25
              0b93 c20d  st   [$0d]       3322  st([videoPulse])                #26
              0b94 0126  ld   [$26]       3323  ld([sysArgs+2])                 #27 Rotate input bit
              0b95 8200  adda ac          3324  adda(AC)                        #28
              0b96 ec99  bne  $0b99       3325  bne(pc()+3)                     #29
              0b97 fc99  bra  $0b99       3326  bra(pc()+2)                     #30
              0b98 0001  ld   $01         3327  ld(1)                           #31
              0b99 c226  st   [$26]       3328  st([sysArgs+2])                 #31,32 (must be idempotent)
              0b9a 2001  anda $01         3329  anda(1)                         #33 Optionally increment pointer
              0b9b 8124  adda [$24]       3330  adda([sysArgs+0])               #34
              0b9c d224  st   [$24],x     3331  st([sysArgs+0],X)               #35
              0b9d 0127  ld   [$27]       3332  ld([sysArgs+3])                 #36 Frame counter
              0b9e a001  suba $01         3333  suba(1)                         #37
              0b9f f0ae  beq  .sysSs#40   3334  beq('.sysSs#40')                #38
              0ba0 1403  ld   $03,y       3335  ld(hi('REENTER'),Y)             #39
              0ba1 c227  st   [$27]       3336  st([sysArgs+3])                 #40
              0ba2 010f  ld   [$0f]       3337  ld([serialRaw])                 #41 Test for anything being sent back
              0ba3 60ff  xora $ff         3338  xora(255)                       #42
              0ba4 f0a9  beq  .sysSs#45   3339  beq('.sysSs#45')                #43
              0ba5 c218  st   [$18]       3340  st([vAC])                       #44 Abort after key press with non-zero error
              0ba6 c219  st   [$19]       3341  st([vAC+1])                     #45
              0ba7 e0cb  jmp  y,$cb       3342  jmp(Y,'REENTER')                #46
              0ba8 00e7  ld   $e7         3343  ld(-50/2)                       #47
                                          3344  label('.sysSs#45')
.sysSs#45:    0ba9 0116  ld   [$16]       3345  ld([vPC])                       #45 Continue sending bits
              0baa a002  suba $02         3346  suba(2)                         #46
              0bab c216  st   [$16]       3347  st([vPC])                       #47
              0bac e0cb  jmp  y,$cb       3348  jmp(Y,'REENTER')                #48
              0bad 00e6  ld   $e6         3349  ld(-52/2)                       #49
                                          3350  label('.sysSs#40')
.sysSs#40:    0bae c218  st   [$18]       3351  st([vAC])                       #40 Stop sending bits, no error
              0baf c219  st   [$19]       3352  st([vAC+1])                     #41
              0bb0 e0cb  jmp  y,$cb       3353  jmp(Y,'REENTER')                #42
              0bb1 00e9  ld   $e9         3354  ld(-46/2)                       #43
                                          3355
                                          3356  # SYS_ReceiveSerialByte implementation
                                          3357  label('sys_ReceiveSerial1')
sys_ReceiveSerial1:
              0bb2 6109  xora [$09]       3358  xora([videoY])                  #17
              0bb3 ecc0  bne  .sysRsb#20  3359  bne('.sysRsb#20')               #18
              0bb4 1124  ld   [$24],x     3360  ld([sysArgs+0],X)               #19
              0bb5 1525  ld   [$25],y     3361  ld([sysArgs+1],Y)               #20
              0bb6 0300  ld   in          3362  ld(IN)                          #21
              0bb7 ce00  st   [y,x]       3363  st([Y,X])                       #22
              0bb8 8126  adda [$26]       3364  adda([sysArgs+2])               #23
              0bb9 c226  st   [$26]       3365  st([sysArgs+2])                 #24
              0bba 0124  ld   [$24]       3366  ld([sysArgs+0])                 #25
              0bbb 8001  adda $01         3367  adda(1)                         #26
              0bbc c224  st   [$24]       3368  st([sysArgs+0])                 #27
              0bbd 1403  ld   $03,y       3369  ld(hi('NEXTY'),Y)               #28
              0bbe e000  jmp  y,$00       3370  jmp(Y,'NEXTY')                  #29
              0bbf 00f0  ld   $f0         3371  ld(-32/2)                       #30
                                          3372  # Restart the instruction in the next timeslice
                                          3373  label('.sysRsb#20')
.sysRsb#20:   0bc0 0116  ld   [$16]       3374  ld([vPC])                       #20
              0bc1 a002  suba $02         3375  suba(2)                         #21
              0bc2 c216  st   [$16]       3376  st([vPC])                       #22
              0bc3 1403  ld   $03,y       3377  ld(hi('REENTER'),Y)             #23
              0bc4 e0cb  jmp  y,$cb       3378  jmp(Y,'REENTER')                #24
              0bc5 00f2  ld   $f2         3379  ld(-28/2)                       #25
                                          3380
                                          3381  # CALLI implementation (vCPU instruction)
                                          3382  label('calli#13')
calli#13:     0bc6 8003  adda $03         3383  adda(3)                         #13,43
              0bc7 c21a  st   [$1a]       3384  st([vLR])                       #14
              0bc8 0117  ld   [$17]       3385  ld([vPC+1])                     #15
              0bc9 d61b  st   [$1b],y     3386  st([vLR+1],Y)                   #16
              0bca 0d00  ld   [y,x]       3387  ld([Y,X])                       #17
              0bcb de00  st   [y,x++]     3388  st([Y,Xpp])                     #18 Just X++
              0bcc a002  suba $02         3389  suba(2)                         #19
              0bcd c216  st   [$16]       3390  st([vPC])                       #20
              0bce 0d00  ld   [y,x]       3391  ld([Y,X])                       #21
              0bcf 1403  ld   $03,y       3392  ld(hi('REENTER_28'),Y)          #22
              0bd0 e0ca  jmp  y,$ca       3393  jmp(Y,'REENTER_28')             #23
              0bd1 c217  st   [$17]       3394  st([vPC+1])                     #24
                                          3395
                                          3396  # -------------------------------------------------------------
                                          3397  # vCPU instructions for comparisons between two 16-bit operands
                                          3398  # -------------------------------------------------------------
                                          3399  #
                                          3400  # vCPU's conditional branching (BCC) always compares vAC against 0,
                                          3401  # treating vAC as a two's complement 16-bit number. When we need to
                                          3402  # compare two arbitrary numnbers we normally first take their difference
                                          3403  # with SUBW.  However, when this difference is too large, the subtraction
                                          3404  # overflows and we get the wrong outcome. To get it right over the
                                          3405  # entire range, an elaborate sequence is needed. TinyBASIC uses this
                                          3406  # blurp for its relational operators. (It compares stack variable $02
                                          3407  # with zero page variable $3a.)
                                          3408  #
                                          3409  #       0461  ee 02            LDLW  $02
                                          3410  #       0463  fc 3a            XORW  $3a
                                          3411  #       0465  35 53 6a         BGE   $046c
                                          3412  #       0468  ee 02            LDLW  $02
                                          3413  #       046a  90 6e            BRA   $0470
                                          3414  #       046c  ee 02            LDLW  $02
                                          3415  #       046e  b8 3a            SUBW  $3a
                                          3416  #       0470  35 56 73         BLE   $0475
                                          3417  #
                                          3418  # The CMPHS and CMPHU instructions were introduced to simplify this.
                                          3419  # They inspect both operands to see if there is an overflow risk. If
                                          3420  # so, they modify vAC such that their difference gets smaller, while
                                          3421  # preserving the relation between the two operands. After that, the
                                          3422  # SUBW instruction can't overflow and we achieve a correct comparison.
                                          3423  # Use CMPHS for signed comparisons and CMPHU for unsigned. With these,
                                          3424  # the sequence above becomes:
                                          3425  #
                                          3426  #       0461  ee 02            LDLW  $02
                                          3427  #       0463  1f 3b            CMPHS $3b        Note: high byte of operand
                                          3428  #       0465  b8 3a            SUBW  $3a
                                          3429  #       0467  35 56 73         BLE   $0475
                                          3430  #
                                          3431  # CMPHS/CMPHU don't make much sense other than in combination with
                                          3432  # SUBW. These modify vACH, if needed, as given in the following table:
                                          3433  #
                                          3434  #       vACH  varH  |     vACH
                                          3435  #       bit7  bit7  | CMPHS  CMPHU
                                          3436  #       ---------------------------
                                          3437  #         0     0   |  vACH   vACH      no change needed
                                          3438  #         0     1   | varH+1 varH-1     narrowing the range
                                          3439  #         1     0   | varH-1 varH+1     narrowing the range
                                          3440  #         1     1   |  vACH   vACH      no change needed
                                          3441  #       ---------------------------
                                          3442
                                          3443  # CMPHS implementation (vCPU instruction)
                                          3444  label('cmphs#13')
cmphs#13:     0bd2 1403  ld   $03,y       3445  ld(hi('REENTER'),Y)             #13
              0bd3 0500  ld   [x]         3446  ld([X])                         #14
              0bd4 6119  xora [$19]       3447  xora([vAC+1])                   #15
              0bd5 f4e6  bge  .cmphu#18   3448  bpl('.cmphu#18')                #16 Skip if same sign
              0bd6 0119  ld   [$19]       3449  ld([vAC+1])                     #17
              0bd7 e8da  blt  $0bda       3450  bmi(pc()+3)                     #18
              0bd8 fcdb  bra  .cmphs#21   3451  bra(pc()+3)                     #19
                                          3452  label('.cmphs#20')
.cmphs#20:    0bd9 0001  ld   $01         3453  ld(+1)                          #20    vAC < variable
              0bda 00ff  ld   $ff         3454  ld(-1)                          #20(!) vAC > variable
                                          3455  label('.cmphs#21')
.cmphs#21:    0bdb 8500  adda [x]         3456  adda([X])                       #21
              0bdc c219  st   [$19]       3457  st([vAC+1])                     #22
              0bdd e0ca  jmp  y,$ca       3458  jmp(Y,'REENTER_28')             #23
                                          3459  #dummy()                        #24 Overlap
                                          3460  #
                                          3461  # CMPHS implementation (vCPU instruction)
                                          3462  label('cmphu#13')
cmphu#13:     0bde 1403  ld   $03,y       3463  ld(hi('REENTER'),Y)             #13,24
              0bdf 0500  ld   [x]         3464  ld([X])                         #14
              0be0 6119  xora [$19]       3465  xora([vAC+1])                   #15
              0be1 f4e6  bge  .cmphu#18   3466  bpl('.cmphu#18')                #16 Skip if same sign
              0be2 0119  ld   [$19]       3467  ld([vAC+1])                     #17
              0be3 e8d9  blt  .cmphs#20   3468  bmi('.cmphs#20')                #18
              0be4 fcdb  bra  .cmphs#21   3469  bra('.cmphs#21')                #19
              0be5 00ff  ld   $ff         3470  ld(-1)                          #20    vAC > variable
                                          3471
                                          3472  # No-operation for CMPHS/CMPHU when high bits are equal
                                          3473  label('.cmphu#18')
.cmphu#18:    0be6 e0cb  jmp  y,$cb       3474  jmp(Y,'REENTER')                #18
              0be7 00f5  ld   $f5         3475  ld(-22/2)                       #19
                                          3476
                                          3477  #-----------------------------------------------------------------------
                                          3478  #
                                          3479  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3480  #
                                          3481  #       Page 1: vertical blank interval
                                          3482  #       Page 2: visible scanlines
                                          3483  #
                                          3484  #-----------------------------------------------------------------------
                                          3485
              0be8 0200  nop              3486  align(0x100, size=0x100)
              0be9 0200  nop
              0bea 0200  nop
              * 24 times
                                          3487
                                          3488  #-----------------------------------------------------------------------
                                          3489  # Extension SYS_Sprite6_v3_64
                                          3490  # Extension SYS_Sprite6x_v3_64
                                          3491  # Extension SYS_Sprite6y_v3_64
                                          3492  # Extension SYS_Sprite6xy_v3_64
                                          3493  #-----------------------------------------------------------------------
                                          3494
                                          3495  # Blit sprite in screen memory
                                          3496  #
                                          3497  # Variables
                                          3498  #       vAC             Destination address in screen
                                          3499  #       sysArgs[0:1]    Source address of 6xY pixels (colors 0..63) terminated
                                          3500  #                       by negative byte value N (typically N = -Y)
                                          3501  #       sysArgs[2:7]    Scratch (user as copy buffer)
                                          3502  #
                                          3503  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3504  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3505  # of 6 pixels at a time, and then written to the screen through the
                                          3506  # destination pointer (each chunk underneath the previous), thus
                                          3507  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3508  # negative byte N after a chunk signals the end of the sprite data.
                                          3509  # So the sprite's height Y is determined by the source data and is
                                          3510  # therefore flexible. This negative byte value, typically N == -Y,
                                          3511  # is then used to adjust the destination pointer's high byte, to make
                                          3512  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3513  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3514  # already left in place to facilitate this. After one call, the source
                                          3515  # pointer will point past that source data, effectively:
                                          3516  #       src += Y * 6 + 1
                                          3517  # The destination pointer will have been adjusted as:
                                          3518  #       dst += (Y + N) * 256 + 6
                                          3519  # (With arithmetic wrapping around on the same memory page)
                                          3520  #
                                          3521  # Y is only limited by source memory, not by CPU cycles. The
                                          3522  # implementation is such that the SYS function self-repeats, each
                                          3523  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3524  # pixels per scanline this way.
                                          3525
                                          3526  label('SYS_Sprite6_v3_64')
                                          3527
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3528  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3529  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3530  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3531  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3532  st([Y,Xpp])                     #19 Just X++
                                          3533
              0c05 8119  adda [$19]       3534  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3535  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3536  ld([vAC])                       #22
              0c08 8006  adda $06         3537  adda(6)                         #23
              0c09 c218  st   [$18]       3538  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3539  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3540  adda(1)                         #26
              0c0c c224  st   [$24]       3541  st([sysArgs+0])                 #27
              0c0d 0200  nop              3542  nop()                           #28
              0c0e 1403  ld   $03,y       3543  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3544  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3545  ld(-34/2)                       #31
                                          3546
                                          3547  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3548  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3549  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3550  st([Y,Xpp])                     #22 Just X++
              0c14 c227  st   [$27]       3551  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3552  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3553  st([Y,Xpp])                     #25 Just X++
              0c17 c228  st   [$28]       3554  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3555  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3556  st([Y,Xpp])                     #28 Just X++
              0c1a c229  st   [$29]       3557  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3558  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3559  st([Y,Xpp])                     #31 Just X++
              0c1d c22a  st   [$2a]       3560  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3561  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3562  st([Y,Xpp])                     #34 Just X++
              0c20 c22b  st   [$2b]       3563  st([sysArgs+7])                 #35
                                          3564
              0c21 1118  ld   [$18],x     3565  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3566  ld([vAC+1],Y)                   #37
              0c23 0126  ld   [$26]       3567  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3568  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3569  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3570  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3571  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3572  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3573  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3574  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3575  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3576  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3577  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3578  st([Y,Xpp])                     #49
                                          3579
              0c2f 0124  ld   [$24]       3580  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3581  adda(6)                         #51
              0c31 c224  st   [$24]       3582  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3583  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3584  adda(1)                         #54
              0c34 c219  st   [$19]       3585  st([vAC+1])                     #55
                                          3586
              0c35 0116  ld   [$16]       3587  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3588  suba(2)                         #57
              0c37 c216  st   [$16]       3589  st([vPC])                       #58
              0c38 1403  ld   $03,y       3590  ld(hi('REENTER'),Y)             #59
              0c39 e0cb  jmp  y,$cb       3591  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3592  ld(-64/2)                       #61
                                          3593
              0c3b 0200  nop              3594  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3595  label('SYS_Sprite6x_v3_64')
                                          3596
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3597  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3598  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3599  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3600  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3601  st([Y,Xpp])                     #19 Just X++
                                          3602
              0c45 8119  adda [$19]       3603  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3604  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3605  ld([vAC])                       #22
              0c48 a006  suba $06         3606  suba(6)                         #23
              0c49 c218  st   [$18]       3607  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3608  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3609  adda(1)                         #26
              0c4c c224  st   [$24]       3610  st([sysArgs+0])                 #27
              0c4d 0200  nop              3611  nop()                           #28
              0c4e 1403  ld   $03,y       3612  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3613  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3614  ld(-34/2)                       #31
                                          3615
                                          3616  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3617  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3618  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3619  st([Y,Xpp])                     #22 Just X++
              0c54 c22a  st   [$2a]       3620  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3621  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3622  st([Y,Xpp])                     #25 Just X++
              0c57 c229  st   [$29]       3623  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3624  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3625  st([Y,Xpp])                     #28 Just X++
              0c5a c228  st   [$28]       3626  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3627  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3628  st([Y,Xpp])                     #31 Just X++
              0c5d c227  st   [$27]       3629  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3630  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3631  st([Y,Xpp])                     #34 Just X++
                                          3632
              0c60 1118  ld   [$18],x     3633  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3634  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3635  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3636  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3637  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3638  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3639  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3640  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3641  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3642  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3643  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3644  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3645  st([Y,Xpp])                     #47
                                          3646
              0c6d 0124  ld   [$24]       3647  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3648  adda(6)                         #49
              0c6f c224  st   [$24]       3649  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3650  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3651  adda(1)                         #52
              0c72 c219  st   [$19]       3652  st([vAC+1])                     #53
                                          3653
              0c73 0116  ld   [$16]       3654  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3655  suba(2)                         #55
              0c75 c216  st   [$16]       3656  st([vPC])                       #56
              0c76 1403  ld   $03,y       3657  ld(hi('REENTER'),Y)             #57
              0c77 e0cb  jmp  y,$cb       3658  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3659  ld(-62/2)                       #59
                                          3660
              0c79 0200  nop              3661  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3662  label('SYS_Sprite6y_v3_64')
                                          3663
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3664  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3665  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3666  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3667  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3668  st([Y,Xpp])                     #19 Just X++
                                          3669
              0c85 60ff  xora $ff         3670  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3671  adda(1)                         #21
              0c87 8119  adda [$19]       3672  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3673  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3674  ld([vAC])                       #24
              0c8a 8006  adda $06         3675  adda(6)                         #25
              0c8b c218  st   [$18]       3676  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3677  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3678  adda(1)                         #28
              0c8e c224  st   [$24]       3679  st([sysArgs+0])                 #29
              0c8f 0200  nop              3680  nop()                           #30
              0c90 1403  ld   $03,y       3681  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3682  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3683  ld(-36/2)                       #33
                                          3684
                                          3685  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3686  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3687  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3688  st([Y,Xpp])                     #22 Just X++
              0c96 c227  st   [$27]       3689  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3690  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3691  st([Y,Xpp])                     #25 Just X++
              0c99 c228  st   [$28]       3692  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3693  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3694  st([Y,Xpp])                     #28 Just X++
              0c9c c229  st   [$29]       3695  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3696  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3697  st([Y,Xpp])                     #31 Just X++
              0c9f c22a  st   [$2a]       3698  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3699  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3700  st([Y,Xpp])                     #34 Just X++
              0ca2 c22b  st   [$2b]       3701  st([sysArgs+7])                 #35
                                          3702
              0ca3 1118  ld   [$18],x     3703  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3704  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3705  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3706  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3707  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3708  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3709  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3710  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3711  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3712  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3713  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3714  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3715  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3716  st([Y,Xpp])                     #49
                                          3717
              0cb1 0124  ld   [$24]       3718  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3719  adda(6)                         #51
              0cb3 c224  st   [$24]       3720  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3721  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3722  suba(1)                         #54
              0cb6 c219  st   [$19]       3723  st([vAC+1])                     #55
                                          3724
              0cb7 0116  ld   [$16]       3725  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3726  suba(2)                         #57
              0cb9 c216  st   [$16]       3727  st([vPC])                       #58
              0cba 1403  ld   $03,y       3728  ld(hi('REENTER'),Y)             #59
              0cbb e0cb  jmp  y,$cb       3729  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3730  ld(-64/2)                       #61
                                          3731
              0cbd 0200  nop              3732  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3733  label('SYS_Sprite6xy_v3_64')
                                          3734
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3735  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3736  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3737  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3738  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3739  st([Y,Xpp])                     #19 Just X++
                                          3740
              0cc5 60ff  xora $ff         3741  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3742  adda(1)                         #21
              0cc7 8119  adda [$19]       3743  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3744  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3745  ld([vAC])                       #24
              0cca a006  suba $06         3746  suba(6)                         #25
              0ccb c218  st   [$18]       3747  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3748  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3749  adda(1)                         #28
              0cce c224  st   [$24]       3750  st([sysArgs+0])                 #29
              0ccf 0200  nop              3751  nop()                           #30
              0cd0 1403  ld   $03,y       3752  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3753  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3754  ld(-36/2)                       #33
                                          3755
                                          3756  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3757  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3758  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3759  st([Y,Xpp])                     #22 Just X++
              0cd6 c22a  st   [$2a]       3760  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3761  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3762  st([Y,Xpp])                     #25 Just X++
              0cd9 c229  st   [$29]       3763  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3764  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3765  st([Y,Xpp])                     #28 Just X++
              0cdc c228  st   [$28]       3766  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3767  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3768  st([Y,Xpp])                     #31 Just X++
              0cdf c227  st   [$27]       3769  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3770  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3771  st([Y,Xpp])                     #34 Just X++
                                          3772
              0ce2 1118  ld   [$18],x     3773  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3774  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3775  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3776  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3777  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3778  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3779  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3780  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3781  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3782  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3783  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3784  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3785  st([Y,Xpp])                     #47
                                          3786
              0cef 0124  ld   [$24]       3787  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3788  adda(6)                         #49
              0cf1 c224  st   [$24]       3789  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3790  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3791  suba(1)                         #52
              0cf4 c219  st   [$19]       3792  st([vAC+1])                     #53
                                          3793
              0cf5 0116  ld   [$16]       3794  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3795  suba(2)                         #55
              0cf7 c216  st   [$16]       3796  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3797  ld(hi('REENTER'),Y)             #57
              0cf9 e0cb  jmp  y,$cb       3798  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3799  ld(-62/2)                       #59
                                          3800
                                          3801  #-----------------------------------------------------------------------
                                          3802
              0cfb 0200  nop              3803  align(0x100)
              0cfc 0200  nop
              0cfd 0200  nop
              * 5 times
                                          3804
                                          3805  label('sys_ExpanderControl')
sys_ExpanderControl:
              0d00 1401  ld   $01,y       3806  ld(hi(ctrlBits),Y)                  #18
              0d01 2118  anda [$18]       3807  anda([vAC])                         #19 check for special ctrl code space
              0d02 f009  beq  sysEx#22    3808  beq('sysEx#22')                     #20
              0d03 0118  ld   [$18]       3809  ld([vAC])                           #21 load low byte of ctrl code in delay slot
              0d04 20fc  anda $fc         3810  anda(0xfc)                          #22 sanitize normal ctrl code
              0d05 caf8  st   [y,$f8]     3811  st([Y,ctrlBits])                    #23 store in ctrlBits
              0d06 c21d  st   [$1d]       3812  st([vTmp])                          #24 store in vTmp
              0d07 fc0e  bra  sysEx#27    3813  bra('sysEx#27')                     #25 jump to issuing normal ctrl code
              0d08 1519  ld   [$19],y     3814  ld([vAC+1],Y)                       #26 load high byte of ctrl code in delay slot
                                          3815  label('sysEx#22')
sysEx#22:     0d09 30fc  anda $fc,x       3816  anda(0xfc,X)                        #22 * special ctrl code
              0d0a 09f8  ld   [y,$f8]     3817  ld([Y,ctrlBits])                    #23 get previous normal code from ctrlBits
              0d0b c21d  st   [$1d]       3818  st([vTmp])                          #24 save it in vTmp
              0d0c 1519  ld   [$19],y     3819  ld([vAC+1],Y)                       #25 load high byte of ctrl code
              0d0d cd00  ctrl y,x         3820  ctrl(Y,X)                           #26 issue special ctrl code
                                          3821  label('sysEx#27')
sysEx#27:     0d0e 011d  ld   [$1d]       3822  ld([vTmp])                          #27 load saved normal ctrl code
              0d0f 30fc  anda $fc,x       3823  anda(0xfc,X)                        #28 sanitize ctrlBits
              0d10 cd00  ctrl y,x         3824  ctrl(Y,X)                           #29 issue normal ctrl code
              0d11 011d  ld   [$1d]       3825  ld([vTmp])                          #30 always load something after ctrl
              0d12 1403  ld   $03,y       3826  ld(hi('REENTER'),Y)                 #31
              0d13 e0cb  jmp  y,$cb       3827  jmp(Y,'REENTER')                    #32
              0d14 00ee  ld   $ee         3828  ld(-36/2)                           #33
                                          3829
                                          3830
                                          3831  #-----------------------------------------------------------------------
                                          3832
                                          3833  label('sys_SpiExchangeBytes')
                                          3834
sys_SpiExchangeBytes:
              0d15 09f8  ld   [y,$f8]     3835  ld([Y,ctrlBits])                #18
              0d16 c228  st   [$28]       3836  st([sysArgs+4])                 #19
                                          3837
              0d17 1124  ld   [$24],x     3838  ld([sysArgs+0],X)               #20 Fetch byte to send
              0d18 1525  ld   [$25],y     3839  ld([sysArgs+1],Y)               #21
              0d19 0d00  ld   [y,x]       3840  ld([Y,X])                       #22
                                          3841
                                          3842  for i in range(8):
                                          3843    st([vTmp],Y);C('Bit %d'%(7-i))#23+i*12
              0d1a d61d  st   [$1d],y     ;Bit 7
              0d1b 1128  ld   [$28],x     3844    ld([sysArgs+4],X)             #24+i*12
              0d1c dd00  ctrl y,x++       3845    ctrl(Y,Xpp)                   #25+i*12 Set MOSI
              0d1d dd00  ctrl y,x++       3846    ctrl(Y,Xpp)                   #26+i*12 Raise SCLK, disable RAM!
              0d1e 0100  ld   [$00]       3847    ld([0])                       #27+i*12 Get MISO
                                          3848    if 1 <= WITH_SPI_BITS <= 4:
              0d1f 2003  anda $03         3849      anda((1<<WITH_SPI_BITS)-1)  #28+i*12
                                          3850    else:
                                          3851      anda(0b00001111)            #28+i*12 This is why R1 as pull-DOWN is simpler
              0d20 f023  beq  $0d23       3852    beq(pc()+3)                   #29+i*12
              0d21 fc23  bra  $0d23       3853    bra(pc()+2)                   #30+i*12
              0d22 0001  ld   $01         3854    ld(1)                         #31+i*12
              0d23 cd00  ctrl y,x         3855    ctrl(Y,X)                     #32+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d24 811d  adda [$1d]       3856    adda([vTmp])                  #33+i*12 Shift
              0d25 811d  adda [$1d]       3857    adda([vTmp])                  #34+i*12
              0d26 d61d  st   [$1d],y     ;Bit 6
              0d27 1128  ld   [$28],x
              0d28 dd00  ctrl y,x++
              0d29 dd00  ctrl y,x++
              0d2a 0100  ld   [$00]
              0d2b 2003  anda $03
              0d2c f02f  beq  $0d2f
              0d2d fc2f  bra  $0d2f
              0d2e 0001  ld   $01
              0d2f cd00  ctrl y,x
              0d30 811d  adda [$1d]
              0d31 811d  adda [$1d]
              0d32 d61d  st   [$1d],y     ;Bit 5
              0d33 1128  ld   [$28],x
              0d34 dd00  ctrl y,x++
              0d35 dd00  ctrl y,x++
              0d36 0100  ld   [$00]
              0d37 2003  anda $03
              0d38 f03b  beq  $0d3b
              0d39 fc3b  bra  $0d3b
              0d3a 0001  ld   $01
              0d3b cd00  ctrl y,x
              0d3c 811d  adda [$1d]
              0d3d 811d  adda [$1d]
              0d3e d61d  st   [$1d],y     ;Bit 4
              0d3f 1128  ld   [$28],x
              0d40 dd00  ctrl y,x++
              0d41 dd00  ctrl y,x++
              0d42 0100  ld   [$00]
              0d43 2003  anda $03
              0d44 f047  beq  $0d47
              0d45 fc47  bra  $0d47
              0d46 0001  ld   $01
              0d47 cd00  ctrl y,x
              0d48 811d  adda [$1d]
              0d49 811d  adda [$1d]
              0d4a d61d  st   [$1d],y     ;Bit 3
              0d4b 1128  ld   [$28],x
              0d4c dd00  ctrl y,x++
              0d4d dd00  ctrl y,x++
              0d4e 0100  ld   [$00]
              0d4f 2003  anda $03
              0d50 f053  beq  $0d53
              0d51 fc53  bra  $0d53
              0d52 0001  ld   $01
              0d53 cd00  ctrl y,x
              0d54 811d  adda [$1d]
              0d55 811d  adda [$1d]
              0d56 d61d  st   [$1d],y     ;Bit 2
              0d57 1128  ld   [$28],x
              0d58 dd00  ctrl y,x++
              0d59 dd00  ctrl y,x++
              0d5a 0100  ld   [$00]
              0d5b 2003  anda $03
              0d5c f05f  beq  $0d5f
              0d5d fc5f  bra  $0d5f
              0d5e 0001  ld   $01
              0d5f cd00  ctrl y,x
              0d60 811d  adda [$1d]
              0d61 811d  adda [$1d]
              0d62 d61d  st   [$1d],y     ;Bit 1
              0d63 1128  ld   [$28],x
              0d64 dd00  ctrl y,x++
              0d65 dd00  ctrl y,x++
              0d66 0100  ld   [$00]
              0d67 2003  anda $03
              0d68 f06b  beq  $0d6b
              0d69 fc6b  bra  $0d6b
              0d6a 0001  ld   $01
              0d6b cd00  ctrl y,x
              0d6c 811d  adda [$1d]
              0d6d 811d  adda [$1d]
              0d6e d61d  st   [$1d],y     ;Bit 0
              0d6f 1128  ld   [$28],x
              0d70 dd00  ctrl y,x++
              0d71 dd00  ctrl y,x++
              0d72 0100  ld   [$00]
              0d73 2003  anda $03
              0d74 f077  beq  $0d77
              0d75 fc77  bra  $0d77
              0d76 0001  ld   $01
              0d77 cd00  ctrl y,x
              0d78 811d  adda [$1d]
              0d79 811d  adda [$1d]
                                          3858
              0d7a 1124  ld   [$24],x     3859  ld([sysArgs+0],X)               #119 Store received byte
              0d7b 1527  ld   [$27],y     3860  ld([sysArgs+3],Y)               #120
              0d7c ce00  st   [y,x]       3861  st([Y,X])                       #121
                                          3862
              0d7d 0124  ld   [$24]       3863  ld([sysArgs+0])                 #122 Advance pointer
              0d7e 8001  adda $01         3864  adda(1)                         #123
              0d7f c224  st   [$24]       3865  st([sysArgs+0])                 #124
                                          3866
              0d80 6126  xora [$26]       3867  xora([sysArgs+2])               #125 Reached end?
              0d81 f088  beq  .sysSpi#128 3868  beq('.sysSpi#128')              #126
                                          3869
              0d82 0116  ld   [$16]       3870  ld([vPC])                       #127 Self-repeating SYS call
              0d83 a002  suba $02         3871  suba(2)                         #128
              0d84 c216  st   [$16]       3872  st([vPC])                       #129
              0d85 1403  ld   $03,y       3873  ld(hi('NEXTY'),Y)               #130
              0d86 e000  jmp  y,$00       3874  jmp(Y,'NEXTY')                  #131
              0d87 00bd  ld   $bd         3875  ld(-134/2)                      #132
                                          3876
                                          3877  label('.sysSpi#128')
.sysSpi#128:  0d88 1403  ld   $03,y       3878  ld(hi('NEXTY'),Y)               #128 Continue program
              0d89 e000  jmp  y,$00       3879  jmp(Y,'NEXTY')                  #129
              0d8a 00be  ld   $be         3880  ld(-132/2)                      #130
                                          3881
                                          3882  #-----------------------------------------------------------------------
                                          3883
                                          3884  label('sys_v6502')
                                          3885
sys_v6502:    0d8b d605  st   [$05],y     3886  st([vCpuSelect],Y)              #18 Activate v6502
              0d8c 00f5  ld   $f5         3887  ld(-22/2)                       #19
              0d8d e0ff  jmp  y,$ff       3888  jmp(Y,'v6502_ENTER')            #20 Transfer control in the same time slice
              0d8e 8115  adda [$15]       3889  adda([vTicks])                  #21
                                          3890  assert (38 - 22)//2 >= v6502_adjust
                                          3891
                                          3892  #-----------------------------------------------------------------------
                                          3893  #       MOS 6502 emulator
                                          3894  #-----------------------------------------------------------------------
                                          3895
                                          3896  # Some quirks:
                                          3897  # - Stack in zero page instead of page 1
                                          3898  # - No interrupts
                                          3899  # - No decimal mode (may never be added). D flag is emulated but ignored.
                                          3900  # - BRK switches back to running 16-bits vCPU
                                          3901  # - Illegal opcodes map to BRK, but can read ghost operands before trapping
                                          3902  # - Illegal opcode $ff won't be trapped and cause havoc instead
                                          3903
                                          3904  # Big things TODO:
                                          3905  # XXX Tuning, put most frequent instructions in the primary page
                                          3906
                                          3907  label('v6502_ror')
                                          3908  assert v6502_Cflag == 1
v6502_ror:    0d8f 1525  ld   [$25],y     3909  ld([v6502_ADH],Y)               #12
              0d90 00fc  ld   $fc         3910  ld(-46//2+v6502_maxTicks)       #13 Is there enough time for the excess ticks?
              0d91 8115  adda [$15]       3911  adda([vTicks])                  #14
              0d92 e8a6  blt  .recheck17  3912  blt('.recheck17')               #15
              0d93 0127  ld   [$27]       3913  ld([v6502_P])                   #16 Transfer C to "bit 8"
              0d94 2001  anda $01         3914  anda(1)                         #17
              0d95 807f  adda $7f         3915  adda(127)                       #18
              0d96 2080  anda $80         3916  anda(128)                       #19
              0d97 c219  st   [$19]       3917  st([v6502_BI])                  #20 The real 6502 wouldn't use BI for this
              0d98 0127  ld   [$27]       3918  ld([v6502_P])                   #21 Transfer bit 0 to C
              0d99 20fe  anda $fe         3919  anda(~1)                        #22
              0d9a c227  st   [$27]       3920  st([v6502_P])                   #23
              0d9b 0d00  ld   [y,x]       3921  ld([Y,X])                       #24
              0d9c 2001  anda $01         3922  anda(1)                         #25
              0d9d 4127  ora  [$27]       3923  ora([v6502_P])                  #26
              0d9e c227  st   [$27]       3924  st([v6502_P])                   #27
              0d9f 00ee  ld   $ee         3925  ld('v6502_ror#38')              #28 Shift table lookup
              0da0 c21d  st   [$1d]       3926  st([vTmp])                      #29
              0da1 0d00  ld   [y,x]       3927  ld([Y,X])                       #30
              0da2 20fe  anda $fe         3928  anda(~1)                        #31
              0da3 1405  ld   $05,y       3929  ld(hi('shiftTable'),Y)          #32
              0da4 e200  jmp  y,ac        3930  jmp(Y,AC)                       #33
              0da5 fcff  bra  $ff         3931  bra(255)                        #34 bra shiftTable+255
                                          3932  label('.recheck17')
.recheck17:   0da6 140e  ld   $0e,y       3933  ld(hi('v6502_check'),Y)         #17 Go back to time check before dispatch
              0da7 e0f2  jmp  y,$f2       3934  jmp(Y,'v6502_check')            #18
              0da8 00f6  ld   $f6         3935  ld(-20/2)                       #19
                                          3936
                                          3937  label('v6502_lsr')
                                          3938  assert v6502_Cflag == 1
v6502_lsr:    0da9 1525  ld   [$25],y     3939  ld([v6502_ADH],Y)               #12
              0daa 0127  ld   [$27]       3940  ld([v6502_P])                   #13 Transfer bit 0 to C
              0dab 20fe  anda $fe         3941  anda(~1)                        #14
              0dac c227  st   [$27]       3942  st([v6502_P])                   #15
              0dad 0d00  ld   [y,x]       3943  ld([Y,X])                       #16
              0dae 2001  anda $01         3944  anda(1)                         #17
              0daf 4127  ora  [$27]       3945  ora([v6502_P])                  #18
              0db0 c227  st   [$27]       3946  st([v6502_P])                   #19
              0db1 00e7  ld   $e7         3947  ld('v6502_lsr#30')              #20 Shift table lookup
              0db2 c21d  st   [$1d]       3948  st([vTmp])                      #21
              0db3 0d00  ld   [y,x]       3949  ld([Y,X])                       #22
              0db4 20fe  anda $fe         3950  anda(~1)                        #23
              0db5 1405  ld   $05,y       3951  ld(hi('shiftTable'),Y)          #24
              0db6 e200  jmp  y,ac        3952  jmp(Y,AC)                       #25
              0db7 fcff  bra  $ff         3953  bra(255)                        #26 bra shiftTable+255
                                          3954
                                          3955  label('v6502_rol')
                                          3956  assert v6502_Cflag == 1
v6502_rol:    0db8 1525  ld   [$25],y     3957  ld([v6502_ADH],Y)               #12
              0db9 0d00  ld   [y,x]       3958  ld([Y,X])                       #13
              0dba 2080  anda $80         3959  anda(0x80)                      #14
              0dbb c21d  st   [$1d]       3960  st([v6502_Tmp])                 #15
              0dbc 0127  ld   [$27]       3961  ld([v6502_P])                   #16
              0dbd 2001  anda $01         3962  anda(1)                         #17
                                          3963  label('.rol#18')
.rol#18:      0dbe 8d00  adda [y,x]       3964  adda([Y,X])                     #18
              0dbf 8d00  adda [y,x]       3965  adda([Y,X])                     #19
              0dc0 ce00  st   [y,x]       3966  st([Y,X])                       #20
              0dc1 c228  st   [$28]       3967  st([v6502_Qz])                  #21 Z flag
              0dc2 c229  st   [$29]       3968  st([v6502_Qn])                  #22 N flag
              0dc3 0127  ld   [$27]       3969  ld([v6502_P])                   #23 C Flag
              0dc4 20fe  anda $fe         3970  anda(~1)                        #24
              0dc5 111d  ld   [$1d],x     3971  ld([v6502_Tmp],X)               #25
              0dc6 4500  ora  [x]         3972  ora([X])                        #26
              0dc7 c227  st   [$27]       3973  st([v6502_P])                   #27
              0dc8 140e  ld   $0e,y       3974  ld(hi('v6502_next'),Y)          #28
              0dc9 00f0  ld   $f0         3975  ld(-32/2)                       #29
              0dca e020  jmp  y,$20       3976  jmp(Y,'v6502_next')             #30
                                          3977  #nop()                          #31 Overlap
                                          3978  #
                                          3979  label('v6502_asl')
v6502_asl:    0dcb 1525  ld   [$25],y     3980  ld([v6502_ADH],Y)               #12,32
              0dcc 0d00  ld   [y,x]       3981  ld([Y,X])                       #13
              0dcd 2080  anda $80         3982  anda(0x80)                      #14
              0dce c21d  st   [$1d]       3983  st([v6502_Tmp])                 #15
              0dcf fcbe  bra  .rol#18     3984  bra('.rol#18')                  #16
              0dd0 0000  ld   $00         3985  ld(0)                           #17
                                          3986
                                          3987  label('v6502_jmp1')
v6502_jmp1:   0dd1 0200  nop              3988  nop()                           #12
              0dd2 0124  ld   [$24]       3989  ld([v6502_ADL])                 #13
              0dd3 c21a  st   [$1a]       3990  st([v6502_PCL])                 #14
              0dd4 0125  ld   [$25]       3991  ld([v6502_ADH])                 #15
              0dd5 c21b  st   [$1b]       3992  st([v6502_PCH])                 #16
              0dd6 140e  ld   $0e,y       3993  ld(hi('v6502_next'),Y)          #17
              0dd7 e020  jmp  y,$20       3994  jmp(Y,'v6502_next')             #18
              0dd8 00f6  ld   $f6         3995  ld(-20/2)                       #19
                                          3996
                                          3997  label('v6502_jmp2')
v6502_jmp2:   0dd9 0200  nop              3998  nop()                           #12
              0dda 1525  ld   [$25],y     3999  ld([v6502_ADH],Y)               #13
              0ddb 0d00  ld   [y,x]       4000  ld([Y,X])                       #14
              0ddc de00  st   [y,x++]     4001  st([Y,Xpp])                     #15 (Just X++) Wrap around: bug compatible with NMOS
              0ddd c21a  st   [$1a]       4002  st([v6502_PCL])                 #16
              0dde 0d00  ld   [y,x]       4003  ld([Y,X])                       #17
              0ddf c21b  st   [$1b]       4004  st([v6502_PCH])                 #18
              0de0 140e  ld   $0e,y       4005  ld(hi('v6502_next'),Y)          #19
              0de1 e020  jmp  y,$20       4006  jmp(Y,'v6502_next')             #20
              0de2 00f5  ld   $f5         4007  ld(-22/2)                       #21
                                          4008
                                          4009  label('v6502_pla')
v6502_pla:    0de3 011c  ld   [$1c]       4010  ld([v6502_S])                   #12
              0de4 1200  ld   ac,x        4011  ld(AC,X)                        #13
              0de5 8001  adda $01         4012  adda(1)                         #14
              0de6 c21c  st   [$1c]       4013  st([v6502_S])                   #15
              0de7 0500  ld   [x]         4014  ld([X])                         #16
              0de8 c218  st   [$18]       4015  st([v6502_A])                   #17
              0de9 c228  st   [$28]       4016  st([v6502_Qz])                  #18 Z flag
              0dea c229  st   [$29]       4017  st([v6502_Qn])                  #19 N flag
              0deb 140e  ld   $0e,y       4018  ld(hi('v6502_next'),Y)          #20
              0dec 00f4  ld   $f4         4019  ld(-24/2)                       #21
              0ded e020  jmp  y,$20       4020  jmp(Y,'v6502_next')             #22
                                          4021  #nop()                          #23 Overlap
                                          4022  #
                                          4023  label('v6502_pha')
v6502_pha:    0dee 140e  ld   $0e,y       4024  ld(hi('v6502_next'),Y)          #12,24
              0def 011c  ld   [$1c]       4025  ld([v6502_S])                   #13
              0df0 a001  suba $01         4026  suba(1)                         #14
              0df1 d21c  st   [$1c],x     4027  st([v6502_S],X)                 #15
              0df2 0118  ld   [$18]       4028  ld([v6502_A])                   #16
              0df3 c600  st   [x]         4029  st([X])                         #17
              0df4 e020  jmp  y,$20       4030  jmp(Y,'v6502_next')             #18
              0df5 00f6  ld   $f6         4031  ld(-20/2)                       #19
                                          4032
                                          4033  label('v6502_brk')
v6502_brk:    0df6 0002  ld   $02         4034  ld(hi('ENTER'))                 #12 Switch to vCPU
              0df7 c205  st   [$05]       4035  st([vCpuSelect])                #13
                                          4036  assert v6502_A == vAC
              0df8 0000  ld   $00         4037  ld(0)                           #14
              0df9 c219  st   [$19]       4038  st([vAC+1])                     #15
              0dfa 1403  ld   $03,y       4039  ld(hi('REENTER'),Y)             #16 Switch in the current time slice
              0dfb 00fb  ld   $fb         4040  ld(-22//2+v6502_adjust)         #17
              0dfc e0cb  jmp  y,$cb       4041  jmp(Y,'REENTER')                #18
              0dfd 0200  nop              4042  nop()                           #19
                                          4043
                                          4044  # All interpreter entry points must share the same page offset, because
                                          4045  # this offset is hard-coded as immediate operand in the video driver.
                                          4046  # The Gigatron's original vCPU's 'ENTER' label is already at $2ff, so we
                                          4047  # just use $dff for 'v6502_ENTER'. v6502 actually has two entry points.
                                          4048  # The other is 'v6502_RESUME' at $10ff. It is used for instructions
                                          4049  # that were fetched but not yet executed. Allowing the split gives finer
                                          4050  # granulariy, and hopefully more throughput for the simpler instructions.
                                          4051  # (There is no "overhead" for allowing instruction splitting, because
                                          4052  #  both emulation phases must administer [vTicks] anyway.)
                                          4053  while pc()&255 < 255:
              0dfe 0200  nop              4054    nop()
                                          4055  label('v6502_ENTER')
v6502_ENTER:  0dff fc22  bra  v6502_next2 4056  bra('v6502_next2')              #0 v6502 primary entry point
                                          4057  # --- Page boundary ---
              0e00 a006  suba $06         4058  suba(v6502_adjust)              #1,19 Adjust for vCPU/v6520 timing differences
                                          4059
                                          4060  #19 Addressing modes
                                          4061  (   'v6502_mode0'  ); bra('v6502_modeIZX'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $00 xxx000xx
              0e01 fce0  bra  v6502_modeIZX
              0e02 fc42  bra  v6502_modeIMM
              0e03 fc58  bra  v6502_modeIMP
                                          4062  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeILL') # $04 xxx001xx
              0e04 fc5d  bra  v6502_modeZP
              0e05 fc5d  bra  v6502_modeZP
              0e06 fc5d  bra  v6502_modeZP
              0e07 fc58  bra  v6502_modeIMP
                                          4063  bra('v6502_modeIMP'); bra('v6502_modeIMM'); bra('v6502_modeACC'); bra('v6502_modeILL') # $08 xxx010xx
              0e08 fc58  bra  v6502_modeIMP
              0e09 fc42  bra  v6502_modeIMM
              0e0a fc52  bra  v6502_modeACC
              0e0b fc58  bra  v6502_modeIMP
                                          4064  bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeILL') # $0c xxx011xx
              0e0c fc78  bra  v6502_modeABS
              0e0d fc78  bra  v6502_modeABS
              0e0e fc78  bra  v6502_modeABS
              0e0f fc58  bra  v6502_modeIMP
                                          4065  bra('v6502_modeREL'); bra('v6502_modeIZY'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $10 xxx100xx
              0e10 fccf  bra  v6502_modeREL
              0e11 fcab  bra  v6502_modeIZY
              0e12 fc42  bra  v6502_modeIMM
              0e13 fc58  bra  v6502_modeIMP
                                          4066  bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeILL') # $14 xxx101xx
              0e14 fc5b  bra  v6502_modeZPX
              0e15 fc5b  bra  v6502_modeZPX
              0e16 fc5b  bra  v6502_modeZPX
              0e17 fc58  bra  v6502_modeIMP
                                          4067  bra('v6502_modeIMP'); bra('v6502_modeABY'); bra('v6502_modeIMP'); bra('v6502_modeILL') # $18 xxx110xx
              0e18 fc58  bra  v6502_modeIMP
              0e19 fc7b  bra  v6502_modeABY
              0e1a fc58  bra  v6502_modeIMP
              0e1b fc58  bra  v6502_modeIMP
                                          4068  bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeILL') # $1c xxx111xx
              0e1c fc7a  bra  v6502_modeABX
              0e1d fc7a  bra  v6502_modeABX
              0e1e fc7a  bra  v6502_modeABX
              0e1f fc58  bra  v6502_modeIMP
                                          4069
                                          4070  # Special encoding cases for emulator:
                                          4071  #     $00 BRK -         but gets mapped to #$DD      handled in v6502_mode0
                                          4072  #     $20 JSR $DDDD     but gets mapped to #$DD      handled in v6502_mode0 and v6502_JSR
                                          4073  #     $40 RTI -         but gets mapped to #$DD      handled in v6502_mode0
                                          4074  #     $60 RTS -         but gets mapped to #$DD      handled in v6502_mode0
                                          4075  #     $6C JMP ($DDDD)   but gets mapped to $DDDD     handled in v6502_JMP2
                                          4076  #     $96 STX $DD,Y     but gets mapped to $DD,X     handled in v6502_STX2
                                          4077  #     $B6 LDX $DD,Y     but gets mapped to $DD,X     handled in v6502_LDX2
                                          4078  #     $BE LDX $DDDD,Y   but gets mapped to $DDDD,X   handled in v6502_modeABX
                                          4079
                                          4080  label('v6502_next')
v6502_next:   0e20 8115  adda [$15]       4081  adda([vTicks])                  #0
                                          4082  blt('v6502_exitBefore')         #1 No more ticks
              0e21 e83a  blt  v6502_exitBefore
                                          4083  label('v6502_next2')
v6502_next2:  0e22 c215  st   [$15]       4084  st([vTicks])                    #2
                                          4085  #
                                          4086  # Fetch opcode
              0e23 111a  ld   [$1a],x     4087  ld([v6502_PCL],X)               #3
              0e24 151b  ld   [$1b],y     4088  ld([v6502_PCH],Y)               #4
              0e25 0d00  ld   [y,x]       4089  ld([Y,X])                       #5 Fetch IR
              0e26 c226  st   [$26]       4090  st([v6502_IR])                  #6
              0e27 011a  ld   [$1a]       4091  ld([v6502_PCL])                 #7 PC++
              0e28 8001  adda $01         4092  adda(1)                         #8
              0e29 d21a  st   [$1a],x     4093  st([v6502_PCL],X)               #9
              0e2a f02d  beq  $0e2d       4094  beq(pc()+3)                     #10
              0e2b fc2e  bra  $0e2e       4095  bra(pc()+3)                     #11
              0e2c 0000  ld   $00         4096  ld(0)                           #12
              0e2d 0001  ld   $01         4097  ld(1)                           #12(!)
              0e2e 811b  adda [$1b]       4098  adda([v6502_PCH])               #13
              0e2f d61b  st   [$1b],y     4099  st([v6502_PCH],Y)               #14
                                          4100  #
                                          4101  # Get addressing mode and fetch operands
              0e30 0126  ld   [$26]       4102  ld([v6502_IR])                  #15 Get addressing mode
              0e31 201f  anda $1f         4103  anda(31)                        #16
              0e32 fe00  bra  ac          4104  bra(AC)                         #17
              0e33 fc34  bra  .next20     4105  bra('.next20')                  #18
                                          4106  # (jump table)                  #19
                                          4107  label('.next20')
.next20:      0e34 0d00  ld   [y,x]       4108  ld([Y,X])                       #20 Fetch L
                                          4109  # Most opcodes branch away at this point, but IR & 31 == 0 falls through
                                          4110  #
                                          4111  # Implicit Mode for  BRK JSR RTI RTS (<  0x80) -- 26 cycles
                                          4112  # Immediate Mode for LDY CPY CPX     (>= 0x80) -- 36 cycles
                                          4113  label('v6502_mode0')
v6502_mode0:  0e35 0126  ld   [$26]       4114  ld([v6502_IR])                  #21 'xxx0000'
              0e36 e845  blt  .imm24      4115  bmi('.imm24')                   #22
              0e37 011b  ld   [$1b]       4116  ld([v6502_PCH])                 #23
              0e38 fcf2  bra  v6502_check 4117  bra('v6502_check')              #24
              0e39 00f3  ld   $f3         4118  ld(-26/2)                       #25
                                          4119
                                          4120  # Resync with video driver. At this point we're returning BEFORE
                                          4121  # fetching and executing the next instruction.
                                          4122  label('v6502_exitBefore')
v6502_exitBefore:
              0e3a 8013  adda $13         4123  adda(v6502_maxTicks)            #3 Exit BEFORE fetch
              0e3b e43b  bgt  $0e3b       4124  bgt(pc()&255)                   #4 Resync
              0e3c a001  suba $01         4125  suba(1)                         #5
              0e3d 000d  ld   $0d         4126  ld(hi('v6502_ENTER'))           #6 Set entry point to before 'fetch'
              0e3e c205  st   [$05]       4127  st([vCpuSelect])                #7
              0e3f 1401  ld   $01,y       4128  ld(hi('vBlankStart'),Y)         #8
              0e40 e11e  jmp  y,[$1e]     4129  jmp(Y,[vReturn])                #9 To video driver
              0e41 0000  ld   $00         4130  ld(0)                           #10
                                          4131  assert v6502_overhead ==         11
                                          4132
                                          4133  # Immediate Mode: #$FF -- 36 cycles
                                          4134  label('v6502_modeIMM')
v6502_modeIMM:
              0e42 0200  nop              4135  nop()                           #21 Wait for v6502_mode0 to join
              0e43 0200  nop              4136  nop()                           #22
              0e44 011b  ld   [$1b]       4137  ld([v6502_PCH])                 #23 Copy PC
                                          4138  label('.imm24')
.imm24:       0e45 c225  st   [$25]       4139  st([v6502_ADH])                 #24
              0e46 011a  ld   [$1a]       4140  ld([v6502_PCL])                 #25
              0e47 d224  st   [$24],x     4141  st([v6502_ADL],X)               #26
              0e48 8001  adda $01         4142  adda(1)                         #27 PC++
              0e49 c21a  st   [$1a]       4143  st([v6502_PCL])                 #28
              0e4a f04d  beq  $0e4d       4144  beq(pc()+3)                     #29
              0e4b fc4e  bra  $0e4e       4145  bra(pc()+3)                     #30
              0e4c 0000  ld   $00         4146  ld(0)                           #31
              0e4d 0001  ld   $01         4147  ld(1)                           #31(!)
              0e4e 811b  adda [$1b]       4148  adda([v6502_PCH])               #32
              0e4f c21b  st   [$1b]       4149  st([v6502_PCH])                 #33
              0e50 fcf2  bra  v6502_check 4150  bra('v6502_check')              #34
              0e51 00ee  ld   $ee         4151  ld(-36/2)                       #35
                                          4152
                                          4153  # Accumulator Mode: ROL ROR LSL ASR -- 28 cycles
                                          4154  label('v6502_modeACC')
v6502_modeACC:
              0e52 0018  ld   $18         4155  ld(v6502_A&255)                 #21 Address of AC
              0e53 d224  st   [$24],x     4156  st([v6502_ADL],X)               #22
              0e54 0000  ld   $00         4157  ld(v6502_A>>8)                  #23
              0e55 c225  st   [$25]       4158  st([v6502_ADH])                 #24
              0e56 00f2  ld   $f2         4159  ld(-28/2)                       #25
              0e57 fcf2  bra  v6502_check 4160  bra('v6502_check')              #26
                                          4161  #nop()                          #27 Overlap
                                          4162  #
                                          4163  # Implied Mode: no operand -- 24 cycles
                                          4164  label('v6502_modeILL')
                                          4165  label('v6502_modeIMP')
v6502_modeILL:
v6502_modeIMP:
              0e58 0200  nop              4166  nop()                           #21,27
              0e59 fcf2  bra  v6502_check 4167  bra('v6502_check')              #22
              0e5a 00f4  ld   $f4         4168  ld(-24/2)                       #23
                                          4169
                                          4170  # Zero Page Modes: $DD $DD,X $DD,Y -- 36 cycles
                                          4171  label('v6502_modeZPX')
v6502_modeZPX:
              0e5b fc5f  bra  .zp23       4172  bra('.zp23')                    #21
              0e5c 812a  adda [$2a]       4173  adda([v6502_X])                 #22
                                          4174  label('v6502_modeZP')
v6502_modeZP: 0e5d fc5f  bra  .zp23       4175  bra('.zp23')                    #21
              0e5e 0200  nop              4176  nop()                           #22
                                          4177  label('.zp23')
.zp23:        0e5f d224  st   [$24],x     4178  st([v6502_ADL],X)               #23
              0e60 0000  ld   $00         4179  ld(0)                           #24 H=0
              0e61 c225  st   [$25]       4180  st([v6502_ADH])                 #25
              0e62 0001  ld   $01         4181  ld(1)                           #26 PC++
              0e63 811a  adda [$1a]       4182  adda([v6502_PCL])               #27
              0e64 c21a  st   [$1a]       4183  st([v6502_PCL])                 #28
              0e65 f068  beq  $0e68       4184  beq(pc()+3)                     #29
              0e66 fc69  bra  $0e69       4185  bra(pc()+3)                     #30
              0e67 0000  ld   $00         4186  ld(0)                           #31
              0e68 0001  ld   $01         4187  ld(1)                           #31(!)
              0e69 811b  adda [$1b]       4188  adda([v6502_PCH])               #32
              0e6a c21b  st   [$1b]       4189  st([v6502_PCH])                 #33
              0e6b fcf2  bra  v6502_check 4190  bra('v6502_check')              #34
              0e6c 00ee  ld   $ee         4191  ld(-36/2)                       #35
                                          4192
                                          4193  # Possible retry loop for modeABS and modeIZY. Because these need
                                          4194  # more time than the v6502_maxTicks of 38 Gigatron cycles, we may
                                          4195  # have to restart them after the next horizontal pulse.
                                          4196  label('.retry28')
.retry28:     0e6d f070  beq  $0e70       4197  beq(pc()+3)                     #28,37 PC--
              0e6e fc71  bra  $0e71       4198  bra(pc()+3)                     #29
              0e6f 0000  ld   $00         4199  ld(0)                           #30
              0e70 00ff  ld   $ff         4200  ld(-1)                          #30(!)
              0e71 811b  adda [$1b]       4201  adda([v6502_PCH])               #31
              0e72 c21b  st   [$1b]       4202  st([v6502_PCH])                 #32
              0e73 011a  ld   [$1a]       4203  ld([v6502_PCL])                 #33
              0e74 a001  suba $01         4204  suba(1)                         #34
              0e75 c21a  st   [$1a]       4205  st([v6502_PCL])                 #35
              0e76 fc20  bra  v6502_next  4206  bra('v6502_next')               #36 Retry until sufficient time
              0e77 00ed  ld   $ed         4207  ld(-38/2)                       #37
                                          4208
                                          4209  # Absolute Modes: $DDDD $DDDD,X $DDDD,Y -- 64 cycles
                                          4210  label('v6502_modeABS')
v6502_modeABS:
              0e78 fc7d  bra  .abs23      4211  bra('.abs23')                   #21
              0e79 0000  ld   $00         4212  ld(0)                           #22
                                          4213  label('v6502_modeABX')
v6502_modeABX:
              0e7a fc7d  bra  .abs23      4214  bra('.abs23')                   #21
                                          4215  label('v6502_modeABY')
v6502_modeABY:
              0e7b 012a  ld   [$2a]       4216  ld([v6502_X])                   #21,22
              0e7c 012b  ld   [$2b]       4217  ld([v6502_Y])                   #22
                                          4218  label('.abs23')
.abs23:       0e7d c224  st   [$24]       4219  st([v6502_ADL])                 #23
              0e7e 00f3  ld   $f3         4220  ld(-64//2+v6502_maxTicks)       #24 Is there enough time for the excess ticks?
              0e7f 8115  adda [$15]       4221  adda([vTicks])                  #25
              0e80 e86d  blt  .retry28    4222  blt('.retry28')                 #26
              0e81 011a  ld   [$1a]       4223  ld([v6502_PCL])                 #27
              0e82 0126  ld   [$26]       4224  ld([v6502_IR])                  #28 Special case $BE: LDX $DDDD,Y (we got X in ADL)
              0e83 60be  xora $be         4225  xora(0xbe)                      #29
              0e84 f087  beq  $0e87       4226  beq(pc()+3)                     #30
              0e85 fc88  bra  $0e88       4227  bra(pc()+3)                     #31
              0e86 0124  ld   [$24]       4228  ld([v6502_ADL])                 #32
              0e87 012b  ld   [$2b]       4229  ld([v6502_Y])                   #32(!)
              0e88 8d00  adda [y,x]       4230  adda([Y,X])                     #33 Fetch and add L
              0e89 c224  st   [$24]       4231  st([v6502_ADL])                 #34
              0e8a e88e  blt  .abs37      4232  bmi('.abs37')                   #35 Carry?
              0e8b ad00  suba [y,x]       4233  suba([Y,X])                     #36 Gets back original operand
              0e8c fc90  bra  .abs39      4234  bra('.abs39')                   #37
              0e8d 4d00  ora  [y,x]       4235  ora([Y,X])                      #38 Carry in bit 7
                                          4236  label('.abs37')
.abs37:       0e8e 2d00  anda [y,x]       4237  anda([Y,X])                     #37 Carry in bit 7
              0e8f 0200  nop              4238  nop()                           #38
                                          4239  label('.abs39')
.abs39:       0e90 3080  anda $80,x       4240  anda(0x80,X)                    #39 Move carry to bit 0
              0e91 0500  ld   [x]         4241  ld([X])                         #40
              0e92 c225  st   [$25]       4242  st([v6502_ADH])                 #41
              0e93 011a  ld   [$1a]       4243  ld([v6502_PCL])                 #42 PC++
              0e94 8001  adda $01         4244  adda(1)                         #43
              0e95 d21a  st   [$1a],x     4245  st([v6502_PCL],X)               #44
              0e96 f099  beq  $0e99       4246  beq(pc()+3)                     #45
              0e97 fc9a  bra  $0e9a       4247  bra(pc()+3)                     #46
              0e98 0000  ld   $00         4248  ld(0)                           #47
              0e99 0001  ld   $01         4249  ld(1)                           #47(!)
              0e9a 811b  adda [$1b]       4250  adda([v6502_PCH])               #48
              0e9b d61b  st   [$1b],y     4251  st([v6502_PCH],Y)               #49
              0e9c 0d00  ld   [y,x]       4252  ld([Y,X])                       #50 Fetch H
              0e9d 8125  adda [$25]       4253  adda([v6502_ADH])               #51
              0e9e c225  st   [$25]       4254  st([v6502_ADH])                 #52
              0e9f 011a  ld   [$1a]       4255  ld([v6502_PCL])                 #53 PC++
              0ea0 8001  adda $01         4256  adda(1)                         #54
              0ea1 c21a  st   [$1a]       4257  st([v6502_PCL])                 #55
              0ea2 f0a5  beq  $0ea5       4258  beq(pc()+3)                     #56
              0ea3 fca6  bra  $0ea6       4259  bra(pc()+3)                     #57
              0ea4 0000  ld   $00         4260  ld(0)                           #58
              0ea5 0001  ld   $01         4261  ld(1)                           #58(!)
              0ea6 811b  adda [$1b]       4262  adda([v6502_PCH])               #59
              0ea7 c21b  st   [$1b]       4263  st([v6502_PCH])                 #60
              0ea8 1124  ld   [$24],x     4264  ld([v6502_ADL],X)               #61
              0ea9 fcf2  bra  v6502_check 4265  bra('v6502_check')              #62
              0eaa 00e0  ld   $e0         4266  ld(-64/2)                       #63
                                          4267
                                          4268  # Indirect Indexed Mode: ($DD),Y -- 54 cycles
                                          4269  label('v6502_modeIZY')
v6502_modeIZY:
              0eab 1200  ld   ac,x        4270  ld(AC,X)                        #21 $DD
              0eac 1400  ld   $00,y       4271  ld(0,Y)                         #22 $00DD
              0ead 00f8  ld   $f8         4272  ld(-54//2+v6502_maxTicks)       #23 Is there enough time for the excess ticks?
              0eae 8115  adda [$15]       4273  adda([vTicks])                  #24
              0eaf 0200  nop              4274  nop()                           #25
              0eb0 e86d  blt  .retry28    4275  blt('.retry28')                 #26
              0eb1 011a  ld   [$1a]       4276  ld([v6502_PCL])                 #27
              0eb2 8001  adda $01         4277  adda(1)                         #28 PC++
              0eb3 c21a  st   [$1a]       4278  st([v6502_PCL])                 #29
              0eb4 f0b7  beq  $0eb7       4279  beq(pc()+3)                     #30
              0eb5 fcb8  bra  $0eb8       4280  bra(pc()+3)                     #31
              0eb6 0000  ld   $00         4281  ld(0)                           #32
              0eb7 0001  ld   $01         4282  ld(1)                           #32(!)
              0eb8 811b  adda [$1b]       4283  adda([v6502_PCH])               #33
              0eb9 c21b  st   [$1b]       4284  st([v6502_PCH])                 #34
              0eba 0d00  ld   [y,x]       4285  ld([Y,X])                       #35 Read word from zero-page
              0ebb de00  st   [y,x++]     4286  st([Y,Xpp])                     #36 (Just X++) Wrap-around is correct
              0ebc c224  st   [$24]       4287  st([v6502_ADL])                 #37
              0ebd 0d00  ld   [y,x]       4288  ld([Y,X])                       #38
              0ebe c225  st   [$25]       4289  st([v6502_ADH])                 #39
              0ebf 012b  ld   [$2b]       4290  ld([v6502_Y])                   #40 Add Y
              0ec0 8124  adda [$24]       4291  adda([v6502_ADL])               #41
              0ec1 c224  st   [$24]       4292  st([v6502_ADL])                 #42
              0ec2 e8c6  blt  .izy45      4293  bmi('.izy45')                   #43 Carry?
              0ec3 a12b  suba [$2b]       4294  suba([v6502_Y])                 #44 Gets back original operand
              0ec4 fcc8  bra  .izy47      4295  bra('.izy47')                   #45
              0ec5 412b  ora  [$2b]       4296  ora([v6502_Y])                  #46 Carry in bit 7
                                          4297  label('.izy45')
.izy45:       0ec6 212b  anda [$2b]       4298  anda([v6502_Y])                 #45 Carry in bit 7
              0ec7 0200  nop              4299  nop()                           #46
                                          4300  label('.izy47')
.izy47:       0ec8 3080  anda $80,x       4301  anda(0x80,X)                    #47 Move carry to bit 0
              0ec9 0500  ld   [x]         4302  ld([X])                         #48
              0eca 8125  adda [$25]       4303  adda([v6502_ADH])               #49
              0ecb c225  st   [$25]       4304  st([v6502_ADH])                 #50
              0ecc 1124  ld   [$24],x     4305  ld([v6502_ADL],X)               #51
              0ecd fcf2  bra  v6502_check 4306  bra('v6502_check')              #52
              0ece 00e5  ld   $e5         4307  ld(-54/2)                       #53
                                          4308
                                          4309  # Relative Mode: BEQ BNE BPL BMI BCC BCS BVC BVS -- 36 cycles
                                          4310  label('v6502_modeREL')
v6502_modeREL:
              0ecf d224  st   [$24],x     4311  st([v6502_ADL],X)               #21 Offset (Only needed for branch)
              0ed0 e8d3  blt  $0ed3       4312  bmi(pc()+3)                     #22 Sign extend
              0ed1 fcd4  bra  $0ed4       4313  bra(pc()+3)                     #23
              0ed2 0000  ld   $00         4314  ld(0)                           #24
              0ed3 00ff  ld   $ff         4315  ld(255)                         #24(!)
              0ed4 c225  st   [$25]       4316  st([v6502_ADH])                 #25
              0ed5 011a  ld   [$1a]       4317  ld([v6502_PCL])                 #26 PC++ (Needed for both cases)
              0ed6 8001  adda $01         4318  adda(1)                         #27
              0ed7 c21a  st   [$1a]       4319  st([v6502_PCL])                 #28
              0ed8 f0db  beq  $0edb       4320  beq(pc()+3)                     #29
              0ed9 fcdc  bra  $0edc       4321  bra(pc()+3)                     #30
              0eda 0000  ld   $00         4322  ld(0)                           #31
              0edb 0001  ld   $01         4323  ld(1)                           #31(!)
              0edc 811b  adda [$1b]       4324  adda([v6502_PCH])               #32
              0edd c21b  st   [$1b]       4325  st([v6502_PCH])                 #33
              0ede fcf2  bra  v6502_check 4326  bra('v6502_check')              #34
              0edf 00ee  ld   $ee         4327  ld(-36/2)                       #53
                                          4328
                                          4329  # Indexed Indirect Mode: ($DD,X) -- 38 cycles
                                          4330  label('v6502_modeIZX')
v6502_modeIZX:
              0ee0 812a  adda [$2a]       4331  adda([v6502_X])                 #21 Add X
              0ee1 c21d  st   [$1d]       4332  st([v6502_Tmp])                 #22
              0ee2 9001  adda $01,x       4333  adda(1,X)                       #23 Read word from zero-page
              0ee3 0500  ld   [x]         4334  ld([X])                         #24
              0ee4 c225  st   [$25]       4335  st([v6502_ADH])                 #25
              0ee5 111d  ld   [$1d],x     4336  ld([v6502_Tmp],X)               #26
              0ee6 0500  ld   [x]         4337  ld([X])                         #27
              0ee7 d224  st   [$24],x     4338  st([v6502_ADL],X)               #28
              0ee8 011a  ld   [$1a]       4339  ld([v6502_PCL])                 #29 PC++
              0ee9 8001  adda $01         4340  adda(1)                         #30
              0eea c21a  st   [$1a]       4341  st([v6502_PCL])                 #31
              0eeb f0ee  beq  $0eee       4342  beq(pc()+3)                     #32
              0eec fcef  bra  $0eef       4343  bra(pc()+3)                     #33
              0eed 0000  ld   $00         4344  ld(0)                           #34
              0eee 0001  ld   $01         4345  ld(1)                           #34(!)
              0eef 811b  adda [$1b]       4346  adda([v6502_PCH])               #35
              0ef0 c21b  st   [$1b]       4347  st([v6502_PCH])                 #36
              0ef1 00ed  ld   $ed         4348  ld(-38/2)                       #37 !!! Fall through to v6502_check !!!
                                          4349  #
                                          4350  # Update elapsed time for the addressing mode processing.
                                          4351  # Then check if we can immediately execute this instruction.
                                          4352  # Otherwise transfer control to the video driver.
                                          4353  label('v6502_check')
v6502_check:  0ef2 8115  adda [$15]       4354  adda([vTicks])                  #0
                                          4355  blt('v6502_exitAfter')          #1 No more ticks
              0ef3 e8f8  blt  v6502_exitAfter
              0ef4 c215  st   [$15]       4356  st([vTicks])                    #2
              0ef5 140f  ld   $0f,y       4357  ld(hi('v6502_execute'),Y)       #3
              0ef6 e126  jmp  y,[$26]     4358  jmp(Y,[v6502_IR])               #4
              0ef7 fcff  bra  $ff         4359  bra(255)                        #5
                                          4360
                                          4361  # Otherwise resync with video driver. At this point we're returning AFTER
                                          4362  # addressing mode decoding, but before executing the instruction.
                                          4363  label('v6502_exitAfter')
v6502_exitAfter:
              0ef8 8013  adda $13         4364  adda(v6502_maxTicks)            #3 Exit AFTER fetch
              0ef9 e4f9  bgt  $0ef9       4365  bgt(pc()&255)                   #4 Resync
              0efa a001  suba $01         4366  suba(1)                         #5
              0efb 0010  ld   $10         4367  ld(hi('v6502_RESUME'))          #6 Set entry point to before 'execute'
              0efc c205  st   [$05]       4368  st([vCpuSelect])                #7
              0efd 1401  ld   $01,y       4369  ld(hi('vBlankStart'),Y)         #8
              0efe e11e  jmp  y,[$1e]     4370  jmp(Y,[vReturn])                #9 To video driver
              0eff 0000  ld   $00         4371  ld(0)                           #10
                                          4372  assert v6502_overhead ==         11
                                          4373
                                          4374  align(0x100,size=0x100)
                                          4375  label('v6502_execute')
                                          4376  # This page works as a 255-entry (0..254) jump table for 6502 opcodes.
                                          4377  # Jumping into this page must have 'bra 255' in the branch delay slot
                                          4378  # in order to get out again and dispatch to the right continuation.
                                          4379  # X must hold [v6502_ADL],
                                          4380  # Y will hold hi('v6502_execute'),
                                          4381  # A will be loaded with the code offset (this is skipped at offset $ff)
v6502_execute:
              0f00 00fd  ld   $fd         4382  ld('v6502_BRK'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $00
              0f01 0089  ld   $89
              0f02 00fd  ld   $fd
              0f03 00fd  ld   $fd
              0f04 00fd  ld   $fd         4383  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f05 0089  ld   $89
              0f06 00f1  ld   $f1
              0f07 00fd  ld   $fd
              0f08 00f3  ld   $f3         4384  ld('v6502_PHP'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f09 0089  ld   $89
              0f0a 00f1  ld   $f1
              0f0b 00fd  ld   $fd
              0f0c 00fd  ld   $fd         4385  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f0d 0089  ld   $89
              0f0e 00f1  ld   $f1
              0f0f 00fd  ld   $fd
              0f10 003f  ld   $3f         4386  ld('v6502_BPL'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $10
              0f11 0089  ld   $89
              0f12 00fd  ld   $fd
              0f13 00fd  ld   $fd
              0f14 00fd  ld   $fd         4387  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f15 0089  ld   $89
              0f16 00f1  ld   $f1
              0f17 00fd  ld   $fd
              0f18 0036  ld   $36         4388  ld('v6502_CLC'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f19 0089  ld   $89
              0f1a 00fd  ld   $fd
              0f1b 00fd  ld   $fd
              0f1c 00fd  ld   $fd         4389  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f1d 0089  ld   $89
              0f1e 00f1  ld   $f1
              0f1f 00fd  ld   $fd
              0f20 009a  ld   $9a         4390  ld('v6502_JSR'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $20
              0f21 0085  ld   $85
              0f22 00fd  ld   $fd
              0f23 00fd  ld   $fd
              0f24 00f5  ld   $f5         4391  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f25 0085  ld   $85
              0f26 00f7  ld   $f7
              0f27 00fd  ld   $fd
              0f28 00f9  ld   $f9         4392  ld('v6502_PLP'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f29 0085  ld   $85
              0f2a 00f7  ld   $f7
              0f2b 00fd  ld   $fd
              0f2c 00f5  ld   $f5         4393  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f2d 0085  ld   $85
              0f2e 00f7  ld   $f7
              0f2f 00fd  ld   $fd
              0f30 0042  ld   $42         4394  ld('v6502_BMI'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $30
              0f31 0085  ld   $85
              0f32 00fd  ld   $fd
              0f33 00fd  ld   $fd
              0f34 00fd  ld   $fd         4395  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f35 0085  ld   $85
              0f36 00f7  ld   $f7
              0f37 00fd  ld   $fd
              0f38 0038  ld   $38         4396  ld('v6502_SEC'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f39 0085  ld   $85
              0f3a 00fd  ld   $fd
              0f3b 00fd  ld   $fd
              0f3c 00fd  ld   $fd         4397  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f3d 0085  ld   $85
              0f3e 00f7  ld   $f7
              0f3f 00fd  ld   $fd
              0f40 00d3  ld   $d3         4398  ld('v6502_RTI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $40
              0f41 008c  ld   $8c
              0f42 00fd  ld   $fd
              0f43 00fd  ld   $fd
              0f44 00fd  ld   $fd         4399  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f45 008c  ld   $8c
              0f46 00d7  ld   $d7
              0f47 00fd  ld   $fd
              0f48 00d9  ld   $d9         4400  ld('v6502_PHA'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f49 008c  ld   $8c
              0f4a 00d7  ld   $d7
              0f4b 00fd  ld   $fd
              0f4c 0096  ld   $96         4401  ld('v6502_JMP1');ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f4d 008c  ld   $8c
              0f4e 00d7  ld   $d7
              0f4f 00fd  ld   $fd
              0f50 0045  ld   $45         4402  ld('v6502_BVC'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $50
              0f51 008c  ld   $8c
              0f52 00fd  ld   $fd
              0f53 00fd  ld   $fd
              0f54 00fd  ld   $fd         4403  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f55 008c  ld   $8c
              0f56 00d7  ld   $d7
              0f57 00fd  ld   $fd
              0f58 00db  ld   $db         4404  ld('v6502_CLI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f59 008c  ld   $8c
              0f5a 00fd  ld   $fd
              0f5b 00fd  ld   $fd
              0f5c 00fd  ld   $fd         4405  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f5d 008c  ld   $8c
              0f5e 00d7  ld   $d7
              0f5f 00fd  ld   $fd
              0f60 00dd  ld   $dd         4406  ld('v6502_RTS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $60
              0f61 0001  ld   $01
              0f62 00fd  ld   $fd
              0f63 00fd  ld   $fd
              0f64 00fd  ld   $fd         4407  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f65 0001  ld   $01
              0f66 00d5  ld   $d5
              0f67 00fd  ld   $fd
              0f68 00df  ld   $df         4408  ld('v6502_PLA'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f69 0001  ld   $01
              0f6a 00d5  ld   $d5
              0f6b 00fd  ld   $fd
              0f6c 0098  ld   $98         4409  ld('v6502_JMP2');ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f6d 0001  ld   $01
              0f6e 00d5  ld   $d5
              0f6f 00fd  ld   $fd
              0f70 0049  ld   $49         4410  ld('v6502_BVS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $70
              0f71 0001  ld   $01
              0f72 00fd  ld   $fd
              0f73 00fd  ld   $fd
              0f74 00fd  ld   $fd         4411  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f75 0001  ld   $01
              0f76 00d5  ld   $d5
              0f77 00fd  ld   $fd
              0f78 00e1  ld   $e1         4412  ld('v6502_SEI'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f79 0001  ld   $01
              0f7a 00fd  ld   $fd
              0f7b 00fd  ld   $fd
              0f7c 00fd  ld   $fd         4413  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f7d 0001  ld   $01
              0f7e 00d5  ld   $d5
              0f7f 00fd  ld   $fd
              0f80 00fd  ld   $fd         4414  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $80
              0f81 00c1  ld   $c1
              0f82 00fd  ld   $fd
              0f83 00fd  ld   $fd
              0f84 00c7  ld   $c7         4415  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f85 00c1  ld   $c1
              0f86 00c3  ld   $c3
              0f87 00fd  ld   $fd
              0f88 007f  ld   $7f         4416  ld('v6502_DEY'); ld('v6502_ILL'); ld('v6502_TXA'); ld('v6502_ILL') #6
              0f89 00fd  ld   $fd
              0f8a 00cd  ld   $cd
              0f8b 00fd  ld   $fd
              0f8c 00c7  ld   $c7         4417  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f8d 00c1  ld   $c1
              0f8e 00c3  ld   $c3
              0f8f 00fd  ld   $fd
              0f90 004d  ld   $4d         4418  ld('v6502_BCC'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $90
              0f91 00c1  ld   $c1
              0f92 00fd  ld   $fd
              0f93 00fd  ld   $fd
              0f94 00c7  ld   $c7         4419  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX2');ld('v6502_ILL') #6
              0f95 00c1  ld   $c1
              0f96 00c5  ld   $c5
              0f97 00fd  ld   $fd
              0f98 00cf  ld   $cf         4420  ld('v6502_TYA'); ld('v6502_STA'); ld('v6502_TXS'); ld('v6502_ILL') #6
              0f99 00c1  ld   $c1
              0f9a 00e3  ld   $e3
              0f9b 00fd  ld   $fd
              0f9c 00fd  ld   $fd         4421  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f9d 00c1  ld   $c1
              0f9e 00fd  ld   $fd
              0f9f 00fd  ld   $fd
              0fa0 00bf  ld   $bf         4422  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6 $A0
              0fa1 00b9  ld   $b9
              0fa2 00bb  ld   $bb
              0fa3 00fd  ld   $fd
              0fa4 00bf  ld   $bf         4423  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fa5 00b9  ld   $b9
              0fa6 00bb  ld   $bb
              0fa7 00fd  ld   $fd
              0fa8 00cb  ld   $cb         4424  ld('v6502_TAY'); ld('v6502_LDA'); ld('v6502_TAX'); ld('v6502_ILL') #6
              0fa9 00b9  ld   $b9
              0faa 00c9  ld   $c9
              0fab 00fd  ld   $fd
              0fac 00bf  ld   $bf         4425  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fad 00b9  ld   $b9
              0fae 00bb  ld   $bb
              0faf 00fd  ld   $fd
              0fb0 0051  ld   $51         4426  ld('v6502_BCS'); ld('v6502_LDA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $B0
              0fb1 00b9  ld   $b9
              0fb2 00fd  ld   $fd
              0fb3 00fd  ld   $fd
              0fb4 00bf  ld   $bf         4427  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX2');ld('v6502_ILL') #6
              0fb5 00b9  ld   $b9
              0fb6 00bd  ld   $bd
              0fb7 00fd  ld   $fd
              0fb8 00d1  ld   $d1         4428  ld('v6502_CLV'); ld('v6502_LDA'); ld('v6502_TSX'); ld('v6502_ILL') #6
              0fb9 00b9  ld   $b9
              0fba 00e5  ld   $e5
              0fbb 00fd  ld   $fd
              0fbc 00bf  ld   $bf         4429  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fbd 00b9  ld   $b9
              0fbe 00bb  ld   $bb
              0fbf 00fd  ld   $fd
              0fc0 00e7  ld   $e7         4430  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $C0
              0fc1 00e9  ld   $e9
              0fc2 00fd  ld   $fd
              0fc3 00fd  ld   $fd
              0fc4 00e7  ld   $e7         4431  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fc5 00e9  ld   $e9
              0fc6 00eb  ld   $eb
              0fc7 00fd  ld   $fd
              0fc8 007b  ld   $7b         4432  ld('v6502_INY'); ld('v6502_CMP'); ld('v6502_DEX'); ld('v6502_ILL') #6
              0fc9 00e9  ld   $e9
              0fca 0077  ld   $77
              0fcb 00fd  ld   $fd
              0fcc 00e7  ld   $e7         4433  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fcd 00e9  ld   $e9
              0fce 00eb  ld   $eb
              0fcf 00fd  ld   $fd
              0fd0 0055  ld   $55         4434  ld('v6502_BNE'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $D0
              0fd1 00e9  ld   $e9
              0fd2 00fd  ld   $fd
              0fd3 00fd  ld   $fd
              0fd4 00fd  ld   $fd         4435  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fd5 00e9  ld   $e9
              0fd6 00eb  ld   $eb
              0fd7 00fd  ld   $fd
              0fd8 00ed  ld   $ed         4436  ld('v6502_CLD'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0fd9 00e9  ld   $e9
              0fda 00fd  ld   $fd
              0fdb 00fd  ld   $fd
              0fdc 00fd  ld   $fd         4437  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fdd 00e9  ld   $e9
              0fde 00eb  ld   $eb
              0fdf 00fd  ld   $fd
              0fe0 00ef  ld   $ef         4438  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $E0
              0fe1 0029  ld   $29
              0fe2 00fd  ld   $fd
              0fe3 00fd  ld   $fd
              0fe4 00ef  ld   $ef         4439  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fe5 0029  ld   $29
              0fe6 00b7  ld   $b7
              0fe7 00fd  ld   $fd
              0fe8 006c  ld   $6c         4440  ld('v6502_INX'); ld('v6502_SBC'); ld('v6502_NOP'); ld('v6502_ILL') #6
              0fe9 0029  ld   $29
              0fea 0083  ld   $83
              0feb 00fd  ld   $fd
              0fec 00ef  ld   $ef         4441  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fed 0029  ld   $29
              0fee 00b7  ld   $b7
              0fef 00fd  ld   $fd
              0ff0 0058  ld   $58         4442  ld('v6502_BEQ'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $F0
              0ff1 0029  ld   $29
              0ff2 00fd  ld   $fd
              0ff3 00fd  ld   $fd
              0ff4 00fd  ld   $fd         4443  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0ff5 0029  ld   $29
              0ff6 00b7  ld   $b7
              0ff7 00fd  ld   $fd
              0ff8 00fb  ld   $fb         4444  ld('v6502_SED'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0ff9 0029  ld   $29
              0ffa 00fd  ld   $fd
              0ffb 00fd  ld   $fd
              0ffc 00fd  ld   $fd         4445  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC')                  #6
              0ffd 0029  ld   $29
              0ffe 00b7  ld   $b7
              0fff fe00  bra  ac          4446  bra(AC)                         #6,7 Dispatch into next page
                                          4447  # --- Page boundary ---
                                          4448  align(0x100,size=0x100)
              1000 140e  ld   $0e,y       4449  ld(hi('v6502_next'),Y)          #8 Handy for instructions that don't clobber Y
                                          4450
                                          4451  label('v6502_ADC')
                                          4452  assert pc()&255 == 1
                                          4453  assert v6502_Cflag == 1
                                          4454  assert v6502_Vemu == 128
v6502_ADC:    1001 1525  ld   [$25],y     4455  ld([v6502_ADH],Y)               #9 Must be at page offset 1, so A=1
              1002 2127  anda [$27]       4456  anda([v6502_P])                 #10 Carry in (AC=1 because lo('v6502_ADC')=1)
              1003 8118  adda [$18]       4457  adda([v6502_A])                 #11 Sum
              1004 f020  beq  .adc14      4458  beq('.adc14')                   #12 Danger zone for dropping a carry
              1005 8d00  adda [y,x]       4459  adda([Y,X])                     #13
              1006 c228  st   [$28]       4460  st([v6502_Qz])                  #14 Z flag, don't overwrite left-hand side (A) yet
              1007 c229  st   [$29]       4461  st([v6502_Qn])                  #15 N flag
              1008 6118  xora [$18]       4462  xora([v6502_A])                 #16 V flag, (Q^A) & (B^Q) & 0x80
              1009 c218  st   [$18]       4463  st([v6502_A])                   #17
              100a 0d00  ld   [y,x]       4464  ld([Y,X])                       #18
              100b 6128  xora [$28]       4465  xora([v6502_Qz])                #19
              100c 2118  anda [$18]       4466  anda([v6502_A])                 #20
              100d 2080  anda $80         4467  anda(0x80)                      #21
              100e c21d  st   [$1d]       4468  st([v6502_Tmp])                 #22
              100f 0128  ld   [$28]       4469  ld([v6502_Qz])                  #23 Update A
              1010 c218  st   [$18]       4470  st([v6502_A])                   #24
              1011 e815  blt  .adc27      4471  bmi('.adc27')                   #25 C flag
              1012 ad00  suba [y,x]       4472  suba([Y,X])                     #26
              1013 fc17  bra  .adc29      4473  bra('.adc29')                   #27
              1014 4d00  ora  [y,x]       4474  ora([Y,X])                      #28
                                          4475  label('.adc27')
.adc27:       1015 2d00  anda [y,x]       4476  anda([Y,X])                     #27
              1016 0200  nop              4477  nop()                           #28
                                          4478  label('.adc29')
.adc29:       1017 3080  anda $80,x       4479  anda(0x80,X)                    #29
              1018 0127  ld   [$27]       4480  ld([v6502_P])                   #30 Update P
              1019 207e  anda $7e         4481  anda(~v6502_Vemu&~v6502_Cflag)  #31
              101a 4500  ora  [x]         4482  ora([X])                        #32
              101b 411d  ora  [$1d]       4483  ora([v6502_Tmp])                #33
              101c c227  st   [$27]       4484  st([v6502_P])                   #34
              101d 140e  ld   $0e,y       4485  ld(hi('v6502_next'),Y)          #35
              101e e020  jmp  y,$20       4486  jmp(Y,'v6502_next')             #36
              101f 00ed  ld   $ed         4487  ld(-38/2)                       #37
                                          4488  # Cin=1, A=$FF, B=$DD --> Result=$DD, Cout=1, V=0
                                          4489  # Cin=0, A=$00, B=$DD --> Result=$DD, Cout=0, V=0
                                          4490  label('.adc14')
.adc14:       1020 c218  st   [$18]       4491  st([v6502_A])                   #14 Special case
              1021 c228  st   [$28]       4492  st([v6502_Qz])                  #15 Z flag
              1022 c229  st   [$29]       4493  st([v6502_Qn])                  #16 N flag
              1023 0127  ld   [$27]       4494  ld([v6502_P])                   #17
              1024 207f  anda $7f         4495  anda(0x7f)                      #18 V=0, keep C
              1025 c227  st   [$27]       4496  st([v6502_P])                   #19
              1026 140e  ld   $0e,y       4497  ld(hi('v6502_next'),Y)          #20
              1027 00f4  ld   $f4         4498  ld(-24/2)                       #21
              1028 e020  jmp  y,$20       4499  jmp(Y,'v6502_next')             #22
                                          4500  #nop()                          #23 Overlap
                                          4501  #
                                          4502  label('v6502_SBC')
                                          4503  # No matter how hard we try, v6502_SBC always comes out a lot clumsier
                                          4504  # than v6502_ADC. And that one already barely fits in 38 cycles and is
                                          4505  # hard to follow. So we use a hack: transmorph our SBC into an ADC with
                                          4506  # inverted operand, and then dispatch again. Simple and effective.
v6502_SBC:    1029 1525  ld   [$25],y     4507  ld([v6502_ADH],Y)               #9,24
              102a 0d00  ld   [y,x]       4508  ld([Y,X])                       #10
              102b 60ff  xora $ff         4509  xora(255)                       #11 Invert right-hand side operand
              102c c219  st   [$19]       4510  st([v6502_BI])                  #12 Park modified operand for v6502_ADC
              102d 0019  ld   $19         4511  ld(v6502_BI&255)                #13 Address of BI
              102e d224  st   [$24],x     4512  st([v6502_ADL],X)               #14
              102f 0000  ld   $00         4513  ld(v6502_BI>>8)                 #15
              1030 c225  st   [$25]       4514  st([v6502_ADH])                 #16
              1031 0069  ld   $69         4515  ld(0x69)                        #17 ADC #$xx (Any ADC opcode will do)
              1032 c226  st   [$26]       4516  st([v6502_IR])                  #18
              1033 140e  ld   $0e,y       4517  ld(hi('v6502_check'),Y)         #20 Go back to time check before dispatch
              1034 e0f2  jmp  y,$f2       4518  jmp(Y,'v6502_check')            #20
              1035 00f5  ld   $f5         4519  ld(-22/2)                       #21
                                          4520
                                          4521  # Carry calculation table
                                          4522  #   L7 R7 C7   RX UC SC
                                          4523  #   -- -- -- | -- -- --
                                          4524  #    0  0  0 |  0  0  0
                                          4525  #    0  0  1 |  0  0  0
                                          4526  #    1  0  0 |  0  1 +1
                                          4527  #    1  0  1 |  0  0  0
                                          4528  #    0  1  0 | -1  1  0
                                          4529  #    0  1  1 | -1  0 -1
                                          4530  #    1  1  0 | -1  1  0
                                          4531  #    1  1  1 | -1  1  0
                                          4532  #   -- -- -- | -- -- --
                                          4533  #    ^  ^  ^    ^  ^  ^
                                          4534  #    |  |  |    |  |  `--- Carry of unsigned L + signed R: SC = RX + UC
                                          4535  #    |  |  |    |  `----- Carry of unsigned L + unsigned R: UC = C7 ? L7&R7 : L7|R7
                                          4536  #    |  |  |    `------- Sign extension of signed R
                                          4537  #    |  |  `--------- MSB of unextended L + R
                                          4538  #    |  `----------- MSB of right operand R
                                          4539  #    `------------- MSB of left operand L
                                          4540
                                          4541  label('v6502_CLC')
v6502_CLC:    1036 0127  ld   [$27]       4542  ld([v6502_P])                   #9
              1037 fc3b  bra  .sec12      4543  bra('.sec12')                   #10
                                          4544  label('v6502_SEC')
v6502_SEC:    1038 20fe  anda $fe         4545  anda(~v6502_Cflag)              #9,11 Overlap
              1039 0127  ld   [$27]       4546  ld([v6502_P])                   #10
              103a 4001  ora  $01         4547  ora(v6502_Cflag)                #11
                                          4548  label('.sec12')
.sec12:       103b c227  st   [$27]       4549  st([v6502_P])                   #12
              103c 0200  nop              4550  nop()                           #13
                                          4551  label('.next14')
.next14:      103d e020  jmp  y,$20       4552  jmp(Y,'v6502_next')             #14
              103e 00f8  ld   $f8         4553  ld(-16/2)                       #15
                                          4554
                                          4555  label('v6502_BPL')
v6502_BPL:    103f 0129  ld   [$29]       4556  ld([v6502_Qn])                  #9
              1040 e875  blt  .next12     4557  bmi('.next12')                  #10
              1041 f45b  bge  .branch13   4558  bpl('.branch13')                #11
                                          4559  #nop()                          #12 Overlap
                                          4560  label('v6502_BMI')
v6502_BMI:    1042 0129  ld   [$29]       4561  ld([v6502_Qn])                  #9,12
              1043 f475  bge  .next12     4562  bpl('.next12')                  #10
              1044 e85b  blt  .branch13   4563  bmi('.branch13')                #11
                                          4564  #nop()                          #12 Overlap
                                          4565  label('v6502_BVC')
v6502_BVC:    1045 0127  ld   [$27]       4566  ld([v6502_P])                   #9,12
              1046 2080  anda $80         4567  anda(v6502_Vemu)                #10
              1047 f05b  beq  .branch13   4568  beq('.branch13')                #11
              1048 ec3d  bne  .next14     4569  bne('.next14')                  #12
                                          4570  #nop()                          #13 Overlap
                                          4571  label('v6502_BVS')
v6502_BVS:    1049 0127  ld   [$27]       4572  ld([v6502_P])                   #9,13
              104a 2080  anda $80         4573  anda(v6502_Vemu)                #10
              104b ec5b  bne  .branch13   4574  bne('.branch13')                #11
              104c f03d  beq  .next14     4575  beq('.next14')                  #12
                                          4576  #nop()                          #13 Overlap
                                          4577  label('v6502_BCC')
v6502_BCC:    104d 0127  ld   [$27]       4578  ld([v6502_P])                   #9,13
              104e 2001  anda $01         4579  anda(v6502_Cflag)               #10
              104f f05b  beq  .branch13   4580  beq('.branch13')                #11
              1050 ec3d  bne  .next14     4581  bne('.next14')                  #12
                                          4582  #nop()                          #13 Overlap
                                          4583  label('v6502_BCS')
v6502_BCS:    1051 0127  ld   [$27]       4584  ld([v6502_P])                   #9,13
              1052 2001  anda $01         4585  anda(v6502_Cflag)               #10
              1053 ec5b  bne  .branch13   4586  bne('.branch13')                #11
              1054 f03d  beq  .next14     4587  beq('.next14')                  #12
                                          4588  #nop()                          #13 Overlap
                                          4589  label('v6502_BNE')
v6502_BNE:    1055 0128  ld   [$28]       4590  ld([v6502_Qz])                  #9,13
              1056 f075  beq  .next12     4591  beq('.next12')                  #10
              1057 ec5b  bne  .branch13   4592  bne('.branch13')                #11
                                          4593  #nop()                          #12 Overlap
                                          4594  label('v6502_BEQ')
v6502_BEQ:    1058 0128  ld   [$28]       4595  ld([v6502_Qz])                  #9,12
              1059 ec75  bne  .next12     4596  bne('.next12')                  #10
              105a f05b  beq  .branch13   4597  beq('.branch13')                #11
                                          4598  #nop()                          #12 Overlap
                                          4599  label('.branch13')
.branch13:    105b 0124  ld   [$24]       4600  ld([v6502_ADL])                 #13,12 PC + offset
              105c 811a  adda [$1a]       4601  adda([v6502_PCL])               #14
              105d c21a  st   [$1a]       4602  st([v6502_PCL])                 #15
              105e e862  blt  .bra0       4603  bmi('.bra0')                    #16 Carry
              105f a124  suba [$24]       4604  suba([v6502_ADL])               #17
              1060 fc64  bra  .bra1       4605  bra('.bra1')                    #18
              1061 4124  ora  [$24]       4606  ora([v6502_ADL])                #19
                                          4607  label('.bra0')
.bra0:        1062 2124  anda [$24]       4608  anda([v6502_ADL])               #18
              1063 0200  nop              4609  nop()                           #19
                                          4610  label('.bra1')
.bra1:        1064 3080  anda $80,x       4611  anda(0x80,X)                    #20
              1065 0500  ld   [x]         4612  ld([X])                         #21
              1066 8125  adda [$25]       4613  adda([v6502_ADH])               #22
              1067 811b  adda [$1b]       4614  adda([v6502_PCH])               #23
              1068 c21b  st   [$1b]       4615  st([v6502_PCH])                 #24
              1069 0200  nop              4616  nop()                           #25
              106a e020  jmp  y,$20       4617  jmp(Y,'v6502_next')             #26
              106b 00f2  ld   $f2         4618  ld(-28/2)                       #27
                                          4619
                                          4620  label('v6502_INX')
v6502_INX:    106c 0200  nop              4621  nop()                           #9
              106d 012a  ld   [$2a]       4622  ld([v6502_X])                   #10
              106e 8001  adda $01         4623  adda(1)                         #11
              106f c22a  st   [$2a]       4624  st([v6502_X])                   #12
                                          4625  label('.inx13')
.inx13:       1070 c228  st   [$28]       4626  st([v6502_Qz])                  #13 Z flag
              1071 c229  st   [$29]       4627  st([v6502_Qn])                  #14 N flag
              1072 00f7  ld   $f7         4628  ld(-18/2)                       #15
              1073 e020  jmp  y,$20       4629  jmp(Y,'v6502_next')             #16
              1074 0200  nop              4630  nop()                           #17
                                          4631
                                          4632  label('.next12')
.next12:      1075 e020  jmp  y,$20       4633  jmp(Y,'v6502_next')             #12
              1076 00f9  ld   $f9         4634  ld(-14/2)                       #13
                                          4635
                                          4636  label('v6502_DEX')
v6502_DEX:    1077 012a  ld   [$2a]       4637  ld([v6502_X])                   #9
              1078 a001  suba $01         4638  suba(1)                         #10
              1079 fc70  bra  .inx13      4639  bra('.inx13')                   #11
              107a c22a  st   [$2a]       4640  st([v6502_X])                   #12
                                          4641
                                          4642  label('v6502_INY')
v6502_INY:    107b 012b  ld   [$2b]       4643  ld([v6502_Y])                   #9
              107c 8001  adda $01         4644  adda(1)                         #10
              107d fc70  bra  .inx13      4645  bra('.inx13')                   #11
              107e c22b  st   [$2b]       4646  st([v6502_Y])                   #12
                                          4647
                                          4648  label('v6502_DEY')
v6502_DEY:    107f 012b  ld   [$2b]       4649  ld([v6502_Y])                   #9
              1080 a001  suba $01         4650  suba(1)                         #10
              1081 fc70  bra  .inx13      4651  bra('.inx13')                   #11
              1082 c22b  st   [$2b]       4652  st([v6502_Y])                   #12
                                          4653
                                          4654  label('v6502_NOP')
v6502_NOP:    1083 00fa  ld   $fa         4655  ld(-12/2)                       #9
              1084 e020  jmp  y,$20       4656  jmp(Y,'v6502_next')             #10
                                          4657  #nop()                          #11 Overlap
                                          4658  #
                                          4659  label('v6502_AND')
v6502_AND:    1085 1525  ld   [$25],y     4660  ld([v6502_ADH],Y)               #9,11
              1086 0118  ld   [$18]       4661  ld([v6502_A])                   #10
              1087 fc90  bra  .eor13      4662  bra('.eor13')                   #11
              1088 2d00  anda [y,x]       4663  anda([Y,X])                     #12
                                          4664
                                          4665  label('v6502_ORA')
v6502_ORA:    1089 1525  ld   [$25],y     4666  ld([v6502_ADH],Y)               #9
              108a 0118  ld   [$18]       4667  ld([v6502_A])                   #10
              108b fc90  bra  .eor13      4668  bra('.eor13')                   #11
                                          4669  label('v6502_EOR')
v6502_EOR:    108c 4d00  ora  [y,x]       4670  ora([Y,X])                      #12,9
                                          4671  #
                                          4672  #label('v6502_EOR')
                                          4673  #nop()                          #9 Overlap
              108d 1525  ld   [$25],y     4674  ld([v6502_ADH],Y)               #10
              108e 0118  ld   [$18]       4675  ld([v6502_A])                   #11
              108f 6d00  xora [y,x]       4676  xora([Y,X])                     #12
                                          4677  label('.eor13')
.eor13:       1090 c218  st   [$18]       4678  st([v6502_A])                   #13
              1091 c228  st   [$28]       4679  st([v6502_Qz])                  #14 Z flag
              1092 c229  st   [$29]       4680  st([v6502_Qn])                  #15 N flag
              1093 140e  ld   $0e,y       4681  ld(hi('v6502_next'),Y)          #16
              1094 00f6  ld   $f6         4682  ld(-20/2)                       #17
              1095 e020  jmp  y,$20       4683  jmp(Y,'v6502_next')             #18
                                          4684  #nop()                          #19 Overlap
                                          4685  #
                                          4686  label('v6502_JMP1')
v6502_JMP1:   1096 140d  ld   $0d,y       4687  ld(hi('v6502_jmp1'),Y)          #9,19 JMP $DDDD
              1097 e0d1  jmp  y,$d1       4688  jmp(Y,'v6502_jmp1')             #10
                                          4689  #nop()                          #11 Overlap
                                          4690  label('v6502_JMP2')
v6502_JMP2:   1098 140d  ld   $0d,y       4691  ld(hi('v6502_jmp2'),Y)          #9 JMP ($DDDD)
              1099 e0d9  jmp  y,$d9       4692  jmp(Y,'v6502_jmp2')             #10
                                          4693  #nop()                          #11 Overlap
                                          4694  label('v6502_JSR')
v6502_JSR:    109a 011c  ld   [$1c]       4695  ld([v6502_S])                   #9,11
              109b a002  suba $02         4696  suba(2)                         #10
              109c d21c  st   [$1c],x     4697  st([v6502_S],X)                 #11
              109d 1400  ld   $00,y       4698  ld(v6502_Stack>>8,Y)            #12
              109e 011b  ld   [$1b]       4699  ld([v6502_PCH])                 #13 Let ADL,ADH point to L operand
              109f c225  st   [$25]       4700  st([v6502_ADH])                 #14
              10a0 011a  ld   [$1a]       4701  ld([v6502_PCL])                 #15
              10a1 c224  st   [$24]       4702  st([v6502_ADL])                 #16
              10a2 8001  adda $01         4703  adda(1)                         #17 Push ++PC
              10a3 c21a  st   [$1a]       4704  st([v6502_PCL])                 #18 Let PCL,PCH point to H operand
              10a4 de00  st   [y,x++]     4705  st([Y,Xpp])                     #19
              10a5 f0a8  beq  $10a8       4706  beq(pc()+3)                     #20
              10a6 fca9  bra  $10a9       4707  bra(pc()+3)                     #21
              10a7 0000  ld   $00         4708  ld(0)                           #22
              10a8 0001  ld   $01         4709  ld(1)                           #22(!)
              10a9 811b  adda [$1b]       4710  adda([v6502_PCH])               #23
              10aa c21b  st   [$1b]       4711  st([v6502_PCH])                 #24
              10ab ce00  st   [y,x]       4712  st([Y,X])                       #25
              10ac 1124  ld   [$24],x     4713  ld([v6502_ADL],X)               #26 Fetch L
              10ad 1525  ld   [$25],y     4714  ld([v6502_ADH],Y)               #27
              10ae 0d00  ld   [y,x]       4715  ld([Y,X])                       #28
              10af 111a  ld   [$1a],x     4716  ld([v6502_PCL],X)               #29 Fetch H
              10b0 c21a  st   [$1a]       4717  st([v6502_PCL])                 #30
              10b1 151b  ld   [$1b],y     4718  ld([v6502_PCH],Y)               #31
              10b2 0d00  ld   [y,x]       4719  ld([Y,X])                       #32
              10b3 c21b  st   [$1b]       4720  st([v6502_PCH])                 #33
              10b4 140e  ld   $0e,y       4721  ld(hi('v6502_next'),Y)          #34
              10b5 00ed  ld   $ed         4722  ld(-38/2)                       #35
              10b6 e020  jmp  y,$20       4723  jmp(Y,'v6502_next')             #36
                                          4724  #nop()                          #37 Overlap
                                          4725  #
                                          4726  label('v6502_INC')
v6502_INC:    10b7 1411  ld   $11,y       4727  ld(hi('v6502_inc'),Y)           #9,37
              10b8 e00e  jmp  y,$0e       4728  jmp(Y,'v6502_inc')              #10
                                          4729  #nop()                          #11 Overlap
                                          4730  label('v6502_LDA')
v6502_LDA:    10b9 1411  ld   $11,y       4731  ld(hi('v6502_lda'),Y)           #9,11
              10ba e018  jmp  y,$18       4732  jmp(Y,'v6502_lda')              #10
                                          4733  #nop()                          #11 Overlap
                                          4734  label('v6502_LDX')
v6502_LDX:    10bb 1411  ld   $11,y       4735  ld(hi('v6502_ldx'),Y)           #9,11
              10bc e022  jmp  y,$22       4736  jmp(Y,'v6502_ldx')              #10
                                          4737  #nop()                          #11 Overlap
                                          4738  label('v6502_LDX2')
v6502_LDX2:   10bd 1411  ld   $11,y       4739  ld(hi('v6502_ldx2'),Y)          #9,11
              10be e02a  jmp  y,$2a       4740  jmp(Y,'v6502_ldx2')             #10
                                          4741  #nop()                          #11 Overlap
                                          4742  label('v6502_LDY')
v6502_LDY:    10bf 1411  ld   $11,y       4743  ld(hi('v6502_ldy'),Y)           #9,11
              10c0 e026  jmp  y,$26       4744  jmp(Y,'v6502_ldy')              #10
                                          4745  #nop()                          #11 Overlap
                                          4746  label('v6502_STA')
v6502_STA:    10c1 1411  ld   $11,y       4747  ld(hi('v6502_sta'),Y)           #9,11
              10c2 e034  jmp  y,$34       4748  jmp(Y,'v6502_sta')              #10
                                          4749  #nop()                          #11 Overlap
                                          4750  label('v6502_STX')
v6502_STX:    10c3 1411  ld   $11,y       4751  ld(hi('v6502_stx'),Y)           #9,11
              10c4 e03a  jmp  y,$3a       4752  jmp(Y,'v6502_stx')              #10
                                          4753  #nop()                          #11 Overlap
                                          4754  label('v6502_STX2')
v6502_STX2:   10c5 1411  ld   $11,y       4755  ld(hi('v6502_stx2'),Y)          #9,11
              10c6 e040  jmp  y,$40       4756  jmp(Y,'v6502_stx2')             #10
                                          4757  #nop()                          #11 Overlap
                                          4758  label('v6502_STY')
v6502_STY:    10c7 1411  ld   $11,y       4759  ld(hi('v6502_sty'),Y)           #9,11
              10c8 e048  jmp  y,$48       4760  jmp(Y,'v6502_sty')              #10
                                          4761  #nop()                          #11 Overlap
                                          4762  label('v6502_TAX')
v6502_TAX:    10c9 1411  ld   $11,y       4763  ld(hi('v6502_tax'),Y)           #9,11
              10ca e04d  jmp  y,$4d       4764  jmp(Y,'v6502_tax')              #10
                                          4765  #nop()                          #11 Overlap
                                          4766  label('v6502_TAY')
v6502_TAY:    10cb 1411  ld   $11,y       4767  ld(hi('v6502_tay'),Y)           #9,11
              10cc e062  jmp  y,$62       4768  jmp(Y,'v6502_tay')              #10
                                          4769  #nop()                          #11 Overlap
                                          4770  label('v6502_TXA')
v6502_TXA:    10cd 1411  ld   $11,y       4771  ld(hi('v6502_txa'),Y)           #9,11
              10ce e065  jmp  y,$65       4772  jmp(Y,'v6502_txa')              #10
                                          4773  #nop()                          #11 Overlap
                                          4774  label('v6502_TYA')
v6502_TYA:    10cf 1411  ld   $11,y       4775  ld(hi('v6502_tya'),Y)           #9,11
              10d0 e068  jmp  y,$68       4776  jmp(Y,'v6502_tya')              #10
                                          4777  #nop()                          #11 Overlap
                                          4778  label('v6502_CLV')
v6502_CLV:    10d1 1411  ld   $11,y       4779  ld(hi('v6502_clv'),Y)           #9,11
              10d2 e076  jmp  y,$76       4780  jmp(Y,'v6502_clv')              #10
                                          4781  #nop()                          #11 Overlap
                                          4782  label('v6502_RTI')
v6502_RTI:    10d3 1411  ld   $11,y       4783  ld(hi('v6502_rti'),Y)           #9,11
              10d4 e0e4  jmp  y,$e4       4784  jmp(Y,'v6502_rti')              #10
                                          4785  #nop()                          #11 Overlap
                                          4786  label('v6502_ROR')
v6502_ROR:    10d5 140d  ld   $0d,y       4787  ld(hi('v6502_ror'),Y)           #9,11
              10d6 e08f  jmp  y,$8f       4788  jmp(Y,'v6502_ror')              #10
                                          4789  #nop()                          #11 Overlap
                                          4790  label('v6502_LSR')
v6502_LSR:    10d7 140d  ld   $0d,y       4791  ld(hi('v6502_lsr'),Y)           #9,11
              10d8 e0a9  jmp  y,$a9       4792  jmp(Y,'v6502_lsr')              #10
                                          4793  #nop()                          #11 Overlap
                                          4794  label('v6502_PHA')
v6502_PHA:    10d9 140d  ld   $0d,y       4795  ld(hi('v6502_pha'),Y)           #9,11
              10da e0ee  jmp  y,$ee       4796  jmp(Y,'v6502_pha')              #10
                                          4797  #nop()                          #11 Overlap
                                          4798  label('v6502_CLI')
v6502_CLI:    10db 1411  ld   $11,y       4799  ld(hi('v6502_cli'),Y)           #9,11
              10dc e06b  jmp  y,$6b       4800  jmp(Y,'v6502_cli')              #10
                                          4801  #nop()                          #11 Overlap
                                          4802  label('v6502_RTS')
v6502_RTS:    10dd 1411  ld   $11,y       4803  ld(hi('v6502_rts'),Y)           #9,11
              10de e08f  jmp  y,$8f       4804  jmp(Y,'v6502_rts')              #10
                                          4805  #nop()                          #11 Overlap
                                          4806  label('v6502_PLA')
v6502_PLA:    10df 140d  ld   $0d,y       4807  ld(hi('v6502_pla'),Y)           #9,11
              10e0 e0e3  jmp  y,$e3       4808  jmp(Y,'v6502_pla')              #10
                                          4809  #nop()                          #11 Overlap
                                          4810  label('v6502_SEI')
v6502_SEI:    10e1 1411  ld   $11,y       4811  ld(hi('v6502_sei'),Y)           #9,11
              10e2 e06e  jmp  y,$6e       4812  jmp(Y,'v6502_sei')              #10
                                          4813  #nop()                          #11 Overlap
                                          4814  label('v6502_TXS')
v6502_TXS:    10e3 1411  ld   $11,y       4815  ld(hi('v6502_txs'),Y)           #9,11
              10e4 e05e  jmp  y,$5e       4816  jmp(Y,'v6502_txs')              #10
                                          4817  #nop()                          #11 Overlap
                                          4818  label('v6502_TSX')
v6502_TSX:    10e5 1411  ld   $11,y       4819  ld(hi('v6502_tsx'),Y)           #9,11
              10e6 e054  jmp  y,$54       4820  jmp(Y,'v6502_tsx')              #10
                                          4821  #nop()                          #11 Overlap
                                          4822  label('v6502_CPY')
v6502_CPY:    10e7 1411  ld   $11,y       4823  ld(hi('v6502_cpy'),Y)           #9,11
              10e8 e0bd  jmp  y,$bd       4824  jmp(Y,'v6502_cpy')              #10
                                          4825  #nop()                          #11 Overlap
                                          4826  label('v6502_CMP')
v6502_CMP:    10e9 1411  ld   $11,y       4827  ld(hi('v6502_cmp'),Y)           #9,11
              10ea e0be  jmp  y,$be       4828  jmp(Y,'v6502_cmp')              #10
                                          4829  #nop()                          #11 Overlap
                                          4830  label('v6502_DEC')
v6502_DEC:    10eb 1411  ld   $11,y       4831  ld(hi('v6502_dec'),Y)           #9,11
              10ec e005  jmp  y,$05       4832  jmp(Y,'v6502_dec')              #10
                                          4833  #nop()                          #11 Overlap
                                          4834  label('v6502_CLD')
v6502_CLD:    10ed 1411  ld   $11,y       4835  ld(hi('v6502_cld'),Y)           #9,11
              10ee e071  jmp  y,$71       4836  jmp(Y,'v6502_cld')              #10
                                          4837  #nop()                          #11 Overlap
                                          4838  label('v6502_CPX')
v6502_CPX:    10ef 1411  ld   $11,y       4839  ld(hi('v6502_cpx'),Y)           #9,11
              10f0 e0bb  jmp  y,$bb       4840  jmp(Y,'v6502_cpx')              #10
                                          4841  #nop()                          #11 Overlap
                                          4842  label('v6502_ASL')
v6502_ASL:    10f1 140d  ld   $0d,y       4843  ld(hi('v6502_asl'),Y)           #9,11
              10f2 e0cb  jmp  y,$cb       4844  jmp(Y,'v6502_asl')              #10
                                          4845  #nop()                          #11 Overlap
                                          4846  label('v6502_PHP')
v6502_PHP:    10f3 1411  ld   $11,y       4847  ld(hi('v6502_php'),Y)           #9,11
              10f4 e0a2  jmp  y,$a2       4848  jmp(Y,'v6502_php')              #10
                                          4849  #nop()                          #11 Overlap
                                          4850  label('v6502_BIT')
v6502_BIT:    10f5 1411  ld   $11,y       4851  ld(hi('v6502_bit'),Y)           #9
              10f6 e07d  jmp  y,$7d       4852  jmp(Y,'v6502_bit')              #10
                                          4853  #nop()                          #11 Overlap
                                          4854  label('v6502_ROL')
v6502_ROL:    10f7 140d  ld   $0d,y       4855  ld(hi('v6502_rol'),Y)           #9
              10f8 e0b8  jmp  y,$b8       4856  jmp(Y,'v6502_rol')              #10
                                          4857  #nop()                          #11 Overlap
                                          4858  label('v6502_PLP')
v6502_PLP:    10f9 1411  ld   $11,y       4859  ld(hi('v6502_plp'),Y)           #9
              10fa e0d4  jmp  y,$d4       4860  jmp(Y,'v6502_plp')              #10
                                          4861  #nop()                          #11 Overlap
                                          4862  label('v6502_SED')              # Decimal mode not implemented
v6502_SED:    10fb 1411  ld   $11,y       4863  ld(hi('v6502_sed'),Y)           #9,11
              10fc e074  jmp  y,$74       4864  jmp(Y,'v6502_sed')              #10
                                          4865  #nop()                          #11 Overlap
                                          4866  label('v6502_ILL') # All illegal opcodes map to BRK, except $FF which will crash
                                          4867  label('v6502_BRK')
v6502_ILL:
v6502_BRK:    10fd 140d  ld   $0d,y       4868  ld(hi('v6502_brk'),Y)           #9
              10fe e0f6  jmp  y,$f6       4869  jmp(Y,'v6502_brk')              #10
                                          4870  #nop()                          #11 Overlap
                                          4871
                                          4872  while pc()&255 < 255:
                                          4873    nop()
                                          4874
                                          4875  # `v6502_RESUME' is the interpreter's secondary entry point for when
                                          4876  # the opcode and operands were already fetched, just before the last hPulse.
                                          4877  # It must be at $xxff, prefably somewhere in v6502's own code pages.
                                          4878  label('v6502_RESUME')
                                          4879  assert (pc()&255) == 255
v6502_RESUME: 10ff a006  suba $06         4880  suba(v6502_adjust)              #0,11 v6502 secondary entry point
                                          4881  # --- Page boundary ---
                                          4882  align(0x100,size=0x200)
              1100 c215  st   [$15]       4883  st([vTicks])                    #1
              1101 1124  ld   [$24],x     4884  ld([v6502_ADL],X)               #2
              1102 140f  ld   $0f,y       4885  ld(hi('v6502_execute'),Y)       #3
              1103 e126  jmp  y,[$26]     4886  jmp(Y,[v6502_IR])               #4
              1104 fcff  bra  $ff         4887  bra(255)                        #5
                                          4888
                                          4889  label('v6502_dec')
v6502_dec:    1105 1525  ld   [$25],y     4890  ld([v6502_ADH],Y)               #12
              1106 0d00  ld   [y,x]       4891  ld([Y,X])                       #13
              1107 a001  suba $01         4892  suba(1)                         #14
              1108 ce00  st   [y,x]       4893  st([Y,X])                       #15
              1109 c228  st   [$28]       4894  st([v6502_Qz])                  #16 Z flag
              110a c229  st   [$29]       4895  st([v6502_Qn])                  #17 N flag
              110b 140e  ld   $0e,y       4896  ld(hi('v6502_next'),Y)          #18
              110c 00f5  ld   $f5         4897  ld(-22/2)                       #19
              110d e020  jmp  y,$20       4898  jmp(Y,'v6502_next')             #20
                                          4899  #nop()                          #21 Overlap
                                          4900  #
                                          4901  label('v6502_inc')
v6502_inc:    110e 1525  ld   [$25],y     4902  ld([v6502_ADH],Y)               #12,22
              110f 0d00  ld   [y,x]       4903  ld([Y,X])                       #13
              1110 8001  adda $01         4904  adda(1)                         #14
              1111 ce00  st   [y,x]       4905  st([Y,X])                       #15
              1112 c228  st   [$28]       4906  st([v6502_Qz])                  #16 Z flag
              1113 c229  st   [$29]       4907  st([v6502_Qn])                  #17 N flag
              1114 140e  ld   $0e,y       4908  ld(hi('v6502_next'),Y)          #18
              1115 00f5  ld   $f5         4909  ld(-22/2)                       #19
              1116 e020  jmp  y,$20       4910  jmp(Y,'v6502_next')             #20
              1117 0200  nop              4911  nop()                           #21
                                          4912
                                          4913  label('v6502_lda')
v6502_lda:    1118 0200  nop              4914  nop()                           #12
              1119 1525  ld   [$25],y     4915  ld([v6502_ADH],Y)               #13
              111a 0d00  ld   [y,x]       4916  ld([Y,X])                       #14
              111b c218  st   [$18]       4917  st([v6502_A])                   #15
                                          4918  label('.lda16')
.lda16:       111c c228  st   [$28]       4919  st([v6502_Qz])                  #16 Z flag
              111d c229  st   [$29]       4920  st([v6502_Qn])                  #17 N flag
              111e 0200  nop              4921  nop()                           #18
              111f 140e  ld   $0e,y       4922  ld(hi('v6502_next'),Y)          #19
              1120 e020  jmp  y,$20       4923  jmp(Y,'v6502_next')             #20
              1121 00f5  ld   $f5         4924  ld(-22/2)                       #21
                                          4925
                                          4926  label('v6502_ldx')
v6502_ldx:    1122 1525  ld   [$25],y     4927  ld([v6502_ADH],Y)               #12
              1123 0d00  ld   [y,x]       4928  ld([Y,X])                       #13
              1124 fc1c  bra  .lda16      4929  bra('.lda16')                   #14
              1125 c22a  st   [$2a]       4930  st([v6502_X])                   #15
                                          4931
                                          4932  label('v6502_ldy')
v6502_ldy:    1126 1525  ld   [$25],y     4933  ld([v6502_ADH],Y)               #12
              1127 0d00  ld   [y,x]       4934  ld([Y,X])                       #13
              1128 fc1c  bra  .lda16      4935  bra('.lda16')                   #14
              1129 c22b  st   [$2b]       4936  st([v6502_Y])                   #15
                                          4937
                                          4938  label('v6502_ldx2')
v6502_ldx2:   112a 0124  ld   [$24]       4939  ld([v6502_ADL])                 #12 Special case $B6: LDX $DD,Y
              112b a12a  suba [$2a]       4940  suba([v6502_X])                 #13 Undo X offset
              112c 912b  adda [$2b],x     4941  adda([v6502_Y],X)               #14 Apply Y instead
              112d 0500  ld   [x]         4942  ld([X])                         #15
              112e c22a  st   [$2a]       4943  st([v6502_X])                   #16
              112f c228  st   [$28]       4944  st([v6502_Qz])                  #17 Z flag
              1130 c229  st   [$29]       4945  st([v6502_Qn])                  #18 N flag
              1131 140e  ld   $0e,y       4946  ld(hi('v6502_next'),Y)          #19
              1132 e020  jmp  y,$20       4947  jmp(Y,'v6502_next')             #20
              1133 00f5  ld   $f5         4948  ld(-22/2)                       #21
                                          4949
                                          4950  label('v6502_sta')
v6502_sta:    1134 1525  ld   [$25],y     4951  ld([v6502_ADH],Y)               #12
              1135 0118  ld   [$18]       4952  ld([v6502_A])                   #13
              1136 ce00  st   [y,x]       4953  st([Y,X])                       #14
              1137 140e  ld   $0e,y       4954  ld(hi('v6502_next'),Y)          #15
              1138 e020  jmp  y,$20       4955  jmp(Y,'v6502_next')             #16
              1139 00f7  ld   $f7         4956  ld(-18/2)                       #17
                                          4957
                                          4958  label('v6502_stx')
v6502_stx:    113a 1525  ld   [$25],y     4959  ld([v6502_ADH],Y)               #12
              113b 012a  ld   [$2a]       4960  ld([v6502_X])                   #13
              113c ce00  st   [y,x]       4961  st([Y,X])                       #14
              113d 140e  ld   $0e,y       4962  ld(hi('v6502_next'),Y)          #15
              113e e020  jmp  y,$20       4963  jmp(Y,'v6502_next')             #16
              113f 00f7  ld   $f7         4964  ld(-18/2)                       #17
                                          4965
                                          4966  label('v6502_stx2')
v6502_stx2:   1140 0124  ld   [$24]       4967  ld([v6502_ADL])                 #12 Special case $96: STX $DD,Y
              1141 a12a  suba [$2a]       4968  suba([v6502_X])                 #13 Undo X offset
              1142 912b  adda [$2b],x     4969  adda([v6502_Y],X)               #14 Apply Y instead
              1143 012a  ld   [$2a]       4970  ld([v6502_X])                   #15
              1144 c600  st   [x]         4971  st([X])                         #16
              1145 140e  ld   $0e,y       4972  ld(hi('v6502_next'),Y)          #17
              1146 e020  jmp  y,$20       4973  jmp(Y,'v6502_next')             #18
              1147 00f6  ld   $f6         4974  ld(-20/2)                       #19
                                          4975
                                          4976  label('v6502_sty')
v6502_sty:    1148 1525  ld   [$25],y     4977  ld([v6502_ADH],Y)               #12
              1149 012b  ld   [$2b]       4978  ld([v6502_Y])                   #13
              114a ce00  st   [y,x]       4979  st([Y,X])                       #14
              114b 140e  ld   $0e,y       4980  ld(hi('v6502_next'),Y)          #15
              114c e020  jmp  y,$20       4981  jmp(Y,'v6502_next')             #16
                                          4982  label('v6502_tax')
v6502_tax:    114d 00f7  ld   $f7         4983  ld(-18/2)                       #17,12
                                          4984  #
                                          4985  #label('v6502_tax')
                                          4986  #nop()                          #12 Overlap
              114e 0118  ld   [$18]       4987  ld([v6502_A])                   #13
              114f c22a  st   [$2a]       4988  st([v6502_X])                   #14
                                          4989  label('.tax15')
.tax15:       1150 c228  st   [$28]       4990  st([v6502_Qz])                  #15 Z flag
              1151 c229  st   [$29]       4991  st([v6502_Qn])                  #16 N flag
              1152 140e  ld   $0e,y       4992  ld(hi('v6502_next'),Y)          #17
              1153 e020  jmp  y,$20       4993  jmp(Y,'v6502_next')             #18
                                          4994  label('v6502_tsx')
v6502_tsx:    1154 00f6  ld   $f6         4995  ld(-20/2)                       #19
                                          4996  #
                                          4997  #label('v6502_tsx')
                                          4998  #nop()                          #12 Overlap
              1155 011c  ld   [$1c]       4999  ld([v6502_S])                   #13
              1156 a001  suba $01         5000  suba(1)                         #14 Shift down on export
              1157 c22a  st   [$2a]       5001  st([v6502_X])                   #15
                                          5002  label('.tsx16')
.tsx16:       1158 c228  st   [$28]       5003  st([v6502_Qz])                  #16 Z flag
              1159 c229  st   [$29]       5004  st([v6502_Qn])                  #17 N flag
              115a 0200  nop              5005  nop()                           #18
              115b 140e  ld   $0e,y       5006  ld(hi('v6502_next'),Y)          #19
              115c e020  jmp  y,$20       5007  jmp(Y,'v6502_next')             #20
              115d 00f5  ld   $f5         5008  ld(-22/2)                       #21
                                          5009
                                          5010  label('v6502_txs')
v6502_txs:    115e 012a  ld   [$2a]       5011  ld([v6502_X])                   #12
              115f 8001  adda $01         5012  adda(1)                         #13 Shift up on import
              1160 fc58  bra  .tsx16      5013  bra('.tsx16')                   #14
              1161 c21c  st   [$1c]       5014  st([v6502_S])                   #15
                                          5015
                                          5016  label('v6502_tay')
v6502_tay:    1162 0118  ld   [$18]       5017  ld([v6502_A])                   #12
              1163 fc50  bra  .tax15      5018  bra('.tax15')                   #13
              1164 c22b  st   [$2b]       5019  st([v6502_Y])                   #14
                                          5020
                                          5021  label('v6502_txa')
v6502_txa:    1165 012a  ld   [$2a]       5022  ld([v6502_X])                   #12
              1166 fc50  bra  .tax15      5023  bra('.tax15')                   #13
              1167 c218  st   [$18]       5024  st([v6502_A])                   #14
                                          5025
                                          5026  label('v6502_tya')
v6502_tya:    1168 012b  ld   [$2b]       5027  ld([v6502_Y])                   #12
              1169 fc50  bra  .tax15      5028  bra('.tax15')                   #13
              116a c218  st   [$18]       5029  st([v6502_A])                   #14
                                          5030
                                          5031  label('v6502_cli')
v6502_cli:    116b 0127  ld   [$27]       5032  ld([v6502_P])                   #12
              116c fc79  bra  .clv15      5033  bra('.clv15')                   #13
              116d 20fb  anda $fb         5034  anda(~v6502_Iflag)              #14
                                          5035
                                          5036  label('v6502_sei')
v6502_sei:    116e 0127  ld   [$27]       5037  ld([v6502_P])                   #12
              116f fc79  bra  .clv15      5038  bra('.clv15')                   #13
              1170 4004  ora  $04         5039  ora(v6502_Iflag)                #14
                                          5040
                                          5041  label('v6502_cld')
v6502_cld:    1171 0127  ld   [$27]       5042  ld([v6502_P])                   #12
              1172 fc79  bra  .clv15      5043  bra('.clv15')                   #13
              1173 20f7  anda $f7         5044  anda(~v6502_Dflag)              #14
                                          5045
                                          5046  label('v6502_sed')
v6502_sed:    1174 0127  ld   [$27]       5047  ld([v6502_P])                   #12
              1175 fc79  bra  .clv15      5048  bra('.clv15')                   #13
                                          5049  label('v6502_clv')
v6502_clv:    1176 4008  ora  $08         5050  ora(v6502_Dflag)                #14,12 Overlap
                                          5051  #
                                          5052  #label('v6502_clv')
                                          5053  #nop()                          #12
              1177 0127  ld   [$27]       5054  ld([v6502_P])                   #13
              1178 207f  anda $7f         5055  anda(~v6502_Vemu)               #14
                                          5056  label('.clv15')
.clv15:       1179 c227  st   [$27]       5057  st([v6502_P])                   #15
              117a 140e  ld   $0e,y       5058  ld(hi('v6502_next'),Y)          #16
              117b 00f6  ld   $f6         5059  ld(-20/2)                       #17
              117c e020  jmp  y,$20       5060  jmp(Y,'v6502_next')             #18
                                          5061  label('v6502_bit')
v6502_bit:    117d 0200  nop              5062  nop()                           #19,12
                                          5063  #
                                          5064  #label('v6502_bit')
                                          5065  #nop()                          #12 Overlap
              117e 1124  ld   [$24],x     5066  ld([v6502_ADL],X)               #13
              117f 1525  ld   [$25],y     5067  ld([v6502_ADH],Y)               #14
              1180 0d00  ld   [y,x]       5068  ld([Y,X])                       #15
              1181 c229  st   [$29]       5069  st([v6502_Qn])                  #16 N flag
              1182 2118  anda [$18]       5070  anda([v6502_A])                 #17 This is a reason we keep N and Z in separate bytes
              1183 c228  st   [$28]       5071  st([v6502_Qz])                  #18 Z flag
              1184 0127  ld   [$27]       5072  ld([v6502_P])                   #19
              1185 207f  anda $7f         5073  anda(~v6502_Vemu)               #20
              1186 c227  st   [$27]       5074  st([v6502_P])                   #21
              1187 0d00  ld   [y,x]       5075  ld([Y,X])                       #22
              1188 8200  adda ac          5076  adda(AC)                        #23
              1189 2080  anda $80         5077  anda(v6502_Vemu)                #24
              118a 4127  ora  [$27]       5078  ora([v6502_P])                  #25
              118b c227  st   [$27]       5079  st([v6502_P])                   #26 Update V
              118c 140e  ld   $0e,y       5080  ld(hi('v6502_next'),Y)          #27
              118d e020  jmp  y,$20       5081  jmp(Y,'v6502_next')             #28
              118e 00f1  ld   $f1         5082  ld(-30/2)                       #29
                                          5083
                                          5084  label('v6502_rts')
v6502_rts:    118f 011c  ld   [$1c]       5085  ld([v6502_S])                   #12
              1190 1200  ld   ac,x        5086  ld(AC,X)                        #13
              1191 8002  adda $02         5087  adda(2)                         #14
              1192 c21c  st   [$1c]       5088  st([v6502_S])                   #15
              1193 1400  ld   $00,y       5089  ld(0,Y)                         #16
              1194 0d00  ld   [y,x]       5090  ld([Y,X])                       #17
              1195 de00  st   [y,x++]     5091  st([Y,Xpp])                     #18 Just X++
              1196 8001  adda $01         5092  adda(1)                         #19
              1197 c21a  st   [$1a]       5093  st([v6502_PCL])                 #20
              1198 f09b  beq  $119b       5094  beq(pc()+3)                     #21
              1199 fc9c  bra  $119c       5095  bra(pc()+3)                     #22
              119a 0000  ld   $00         5096  ld(0)                           #23
              119b 0001  ld   $01         5097  ld(1)                           #23(!)
              119c 8d00  adda [y,x]       5098  adda([Y,X])                     #24
              119d c21b  st   [$1b]       5099  st([v6502_PCH])                 #25
              119e 0200  nop              5100  nop()                           #26
              119f 140e  ld   $0e,y       5101  ld(hi('v6502_next'),Y)          #27
              11a0 e020  jmp  y,$20       5102  jmp(Y,'v6502_next')             #28
              11a1 00f1  ld   $f1         5103  ld(-30/2)                       #29
                                          5104
                                          5105  label('v6502_php')
v6502_php:    11a2 011c  ld   [$1c]       5106  ld([v6502_S])                   #12
              11a3 a001  suba $01         5107  suba(1)                         #13
              11a4 d21c  st   [$1c],x     5108  st([v6502_S],X)                 #14
              11a5 0127  ld   [$27]       5109  ld([v6502_P])                   #15
              11a6 20bd  anda $bd         5110  anda(~v6502_Vflag&~v6502_Zflag) #16 Keep Vemu,B,D,I,C
              11a7 f4aa  bge  $11aa       5111  bpl(pc()+3)                     #17 V to bit 6 and clear N
              11a8 fcaa  bra  $11aa       5112  bra(pc()+2)                     #18
              11a9 60c0  xora $c0         5113  xora(v6502_Vflag^v6502_Vemu)    #19
              11aa c600  st   [x]         5114  st([X])                         #19,20
              11ab 0128  ld   [$28]       5115  ld([v6502_Qz])                  #21 Z flag
              11ac f0af  beq  $11af       5116  beq(pc()+3)                     #22
              11ad fcb0  bra  $11b0       5117  bra(pc()+3)                     #23
              11ae 0000  ld   $00         5118  ld(0)                           #24
              11af 0002  ld   $02         5119  ld(v6502_Zflag)                 #24(!)
              11b0 4500  ora  [x]         5120  ora([X])                        #25
              11b1 c600  st   [x]         5121  st([X])                         #26
              11b2 0129  ld   [$29]       5122  ld([v6502_Qn])                  #27 N flag
              11b3 2080  anda $80         5123  anda(0x80)                      #28
              11b4 4500  ora  [x]         5124  ora([X])                        #29
              11b5 4020  ora  $20         5125  ora(v6502_Uflag)                #30 Unused bit
              11b6 c600  st   [x]         5126  st([X])                         #31
              11b7 0200  nop              5127  nop()                           #32
              11b8 140e  ld   $0e,y       5128  ld(hi('v6502_next'),Y)          #33
              11b9 e020  jmp  y,$20       5129  jmp(Y,'v6502_next')             #34
              11ba 00ee  ld   $ee         5130  ld(-36/2)                       #35
                                          5131
                                          5132  label('v6502_cpx')
v6502_cpx:    11bb fcc0  bra  .cmp14      5133  bra('.cmp14')                   #12
              11bc 012a  ld   [$2a]       5134  ld([v6502_X])                   #13
                                          5135
                                          5136  label('v6502_cpy')
v6502_cpy:    11bd fcc0  bra  .cmp14      5137  bra('.cmp14')                   #12
                                          5138  label('v6502_cmp')
v6502_cmp:    11be 012b  ld   [$2b]       5139  ld([v6502_Y])                   #13,12
                                          5140  #
                                          5141  #label('v6502_cmp')             #12 Overlap
                                          5142  assert v6502_Cflag == 1
              11bf 0118  ld   [$18]       5143  ld([v6502_A])                   #13
                                          5144  label('.cmp14')
.cmp14:       11c0 1525  ld   [$25],y     5145  ld([v6502_ADH],Y)               #14
              11c1 e8c7  blt  .cmp17      5146  bmi('.cmp17')                   #15 Carry?
              11c2 ad00  suba [y,x]       5147  suba([Y,X])                     #16
              11c3 c228  st   [$28]       5148  st([v6502_Qz])                  #17 Z flag
              11c4 c229  st   [$29]       5149  st([v6502_Qn])                  #18 N flag
              11c5 fccb  bra  .cmp21      5150  bra('.cmp21')                   #19
              11c6 4d00  ora  [y,x]       5151  ora([Y,X])                      #20
                                          5152  label('.cmp17')
.cmp17:       11c7 c228  st   [$28]       5153  st([v6502_Qz])                  #17 Z flag
              11c8 c229  st   [$29]       5154  st([v6502_Qn])                  #18 N flag
              11c9 2d00  anda [y,x]       5155  anda([Y,X])                     #19
              11ca 0200  nop              5156  nop()                           #20
                                          5157  label('.cmp21')
.cmp21:       11cb 6080  xora $80         5158  xora(0x80)                      #21
              11cc 3080  anda $80,x       5159  anda(0x80,X)                    #22 Move carry to bit 0
              11cd 0127  ld   [$27]       5160  ld([v6502_P])                   #23 C flag
              11ce 20fe  anda $fe         5161  anda(~1)                        #24
              11cf 4500  ora  [x]         5162  ora([X])                        #25
              11d0 c227  st   [$27]       5163  st([v6502_P])                   #26
              11d1 140e  ld   $0e,y       5164  ld(hi('v6502_next'),Y)          #27
              11d2 e020  jmp  y,$20       5165  jmp(Y,'v6502_next')             #28
              11d3 00f1  ld   $f1         5166  ld(-30/2)                       #29
                                          5167
                                          5168  label('v6502_plp')
                                          5169  assert v6502_Nflag == 128
                                          5170  assert 2*v6502_Vflag == v6502_Vemu
v6502_plp:    11d4 011c  ld   [$1c]       5171  ld([v6502_S])                   #12
              11d5 1200  ld   ac,x        5172  ld(AC,X)                        #13
              11d6 8001  adda $01         5173  adda(1)                         #14
              11d7 c21c  st   [$1c]       5174  st([v6502_S])                   #15
              11d8 0500  ld   [x]         5175  ld([X])                         #16
              11d9 c229  st   [$29]       5176  st([v6502_Qn])                  #17 N flag
              11da 2002  anda $02         5177  anda(v6502_Zflag)               #18
              11db 6002  xora $02         5178  xora(v6502_Zflag)               #19
              11dc c228  st   [$28]       5179  st([v6502_Qz])                  #20 Z flag
              11dd 0500  ld   [x]         5180  ld([X])                         #21
              11de 207f  anda $7f         5181  anda(~v6502_Vemu)               #22 V to bit 7
              11df 8040  adda $40         5182  adda(v6502_Vflag)               #23
              11e0 c227  st   [$27]       5183  st([v6502_P])                   #24 All other flags
              11e1 140e  ld   $0e,y       5184  ld(hi('v6502_next'),Y)          #25
              11e2 e020  jmp  y,$20       5185  jmp(Y,'v6502_next')             #26
              11e3 00f2  ld   $f2         5186  ld(-28/2)                       #27
                                          5187
                                          5188  label('v6502_rti')
v6502_rti:    11e4 011c  ld   [$1c]       5189  ld([v6502_S])                   #12
              11e5 1200  ld   ac,x        5190  ld(AC,X)                        #13
              11e6 8003  adda $03         5191  adda(3)                         #14
              11e7 c21c  st   [$1c]       5192  st([v6502_S])                   #15
              11e8 0500  ld   [x]         5193  ld([X])                         #16
              11e9 c229  st   [$29]       5194  st([v6502_Qn])                  #17 N flag
              11ea 2002  anda $02         5195  anda(v6502_Zflag)               #18
              11eb 6002  xora $02         5196  xora(v6502_Zflag)               #19
              11ec c228  st   [$28]       5197  st([v6502_Qz])                  #20 Z flag
              11ed 1400  ld   $00,y       5198  ld(0,Y)                         #21
              11ee 0d00  ld   [y,x]       5199  ld([Y,X])                       #22
              11ef de00  st   [y,x++]     5200  st([Y,Xpp])                     #23 Just X++
              11f0 207f  anda $7f         5201  anda(~v6502_Vemu)               #24 V to bit 7
              11f1 8040  adda $40         5202  adda(v6502_Vflag)               #25
              11f2 c227  st   [$27]       5203  st([v6502_P])                   #26 All other flags
              11f3 0d00  ld   [y,x]       5204  ld([Y,X])                       #27
              11f4 de00  st   [y,x++]     5205  st([Y,Xpp])                     #28 Just X++
              11f5 c21a  st   [$1a]       5206  st([v6502_PCL])                 #29
              11f6 0d00  ld   [y,x]       5207  ld([Y,X])                       #30
              11f7 c21b  st   [$1b]       5208  st([v6502_PCH])                 #31
              11f8 0200  nop              5209  nop()                           #32
              11f9 140e  ld   $0e,y       5210  ld(hi('v6502_next'),Y)          #33
              11fa e020  jmp  y,$20       5211  jmp(Y,'v6502_next')             #34
              11fb 00ee  ld   $ee         5212  ld(-36/2)                       #35
                                          5213
                                          5214  #-----------------------------------------------------------------------
                                          5215  #       Extended vertical blank logic: interrupts
                                          5216  #-----------------------------------------------------------------------
              11fc 0200  nop              5217  align(0x100)
              11fd 0200  nop
              11fe 0200  nop
              11ff 0200  nop
                                          5218
                                          5219  # Check if an IRQ handler is defined
                                          5220  label('vBlankFirst#78')
vBlankFirst#78:
              1200 09f6  ld   [y,$f6]     5221  ld([Y,vIRQ_v5])                 #78
              1201 49f7  ora  [y,$f7]     5222  ora([Y,vIRQ_v5+1])              #79
                                          5223  bne('vBlankFirst#82')           #80
              1202 ec09  bne  vBlankFirst#82
              1203 0116  ld   [$16]       5224  ld([vPC])                       #81
              1204 0055  ld   $55         5225  runVcpu(186-82-extra,           #82 Application cycles (scan line 0)
              1205 c21e  st   [$1e]
              1206 1505  ld   [$05],y
              1207 e0ff  jmp  y,$ff
              1208 001f  ld   $1f
                                          5226      '---D line 0 timeout but no irq',
                                          5227      returnTo='vBlankFirst#186')
                                          5228
                                          5229  label('vBlankFirst#82')
vBlankFirst#82:
              1209 c230  st   [$30]       5230  st([vIrqSave+0])                #82 Save vPC
              120a 0117  ld   [$17]       5231  ld([vPC+1])                     #83
              120b c231  st   [$31]       5232  st([vIrqSave+1])                #84
              120c 0118  ld   [$18]       5233  ld([vAC])                       #85 Save vAC
              120d c232  st   [$32]       5234  st([vIrqSave+2])                #86
              120e 0119  ld   [$19]       5235  ld([vAC+1])                     #87
              120f c233  st   [$33]       5236  st([vIrqSave+3])                #88
              1210 09f6  ld   [y,$f6]     5237  ld([Y,vIRQ_v5])                 #89 Set vPC to vIRQ
              1211 a002  suba $02         5238  suba(2)                         #90
              1212 c216  st   [$16]       5239  st([vPC])                       #91
              1213 09f7  ld   [y,$f7]     5240  ld([Y,vIRQ_v5+1])               #92
              1214 c217  st   [$17]       5241  st([vPC+1])                     #93
              1215 0105  ld   [$05]       5242  ld([vCpuSelect])                #94 Save vCpuSelect
              1216 c234  st   [$34]       5243  st([vIrqSave+4])                #95
              1217 0002  ld   $02         5244  ld(hi('ENTER'))                 #96 Set vCpuSelect to ENTER (=regular vCPU)
              1218 c205  st   [$05]       5245  st([vCpuSelect])                #97
              1219 0055  ld   $55         5246  runVcpu(186-98-extra,           #98 Application cycles (scan line 0)
              121a c21e  st   [$1e]
              121b 1505  ld   [$05],y
              121c e0ff  jmp  y,$ff
              121d 0017  ld   $17
                                          5247      '---D line 0 timeout with irq',
                                          5248      returnTo='vBlankFirst#186')
                                          5249
                                          5250  # vRTI immediate resume
                                          5251  label('vRTI#25')
vRTI#25:      121e 0133  ld   [$33]       5252  ld([vIrqSave+3])                #25
              121f c219  st   [$19]       5253  st([vAC+1])                     #26
              1220 0134  ld   [$34]       5254  ld([vIrqSave+4])                #27
              1221 d605  st   [$05],y     5255  st([vCpuSelect],Y)              #28
              1222 00f0  ld   $f0         5256  ld(-32//2)                      #29
              1223 e0ff  jmp  y,$ff       5257  jmp(Y,'ENTER')                  #30
              1224 8115  adda [$15]       5258  adda([vTicks])                  #31-32=-1
                                          5259
                                          5260
                                          5261  # Entered last line of vertical blank (line 40)
                                          5262  label('vBlankLast#34')
                                          5263
                                          5264  #-----------------------------------------------------------------------
                                          5265  #       Extended vertical blank logic: game controller decoding
                                          5266  #-----------------------------------------------------------------------
                                          5267
                                          5268  # Game controller types
                                          5269  # TypeA: Based on 74LS165 shift register (not supported)
                                          5270  # TypeB: Based on CD4021B shift register (standard)
                                          5271  # TypeC: Based on priority encoder
                                          5272  #
                                          5273  # Notes:
                                          5274  # - TypeA was only used during development and first beta test, before ROM v1
                                          5275  # - TypeB appears as type A with negative logic levels
                                          5276  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          5277  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          5278  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          5279  # - TypeB and TypeC can be sampled in the same scanline
                                          5280  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          5281  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          5282  #
                                          5283  #       TypeC    Alias    Button TypeB
                                          5284  #       00000000  ^@   -> Right  11111110
                                          5285  #       00000001  ^A   -> Left   11111101
                                          5286  #       00000011  ^C   -> Down   11111011
                                          5287  #       00000111  ^G   -> Up     11110111
                                          5288  #       00001111  ^O   -> Start  11101111
                                          5289  #       00011111  ^_   -> Select 11011111
                                          5290  #       00111111  ?    -> B      10111111
                                          5291  #       01111111  DEL  -> A      01111111
                                          5292  #       11111111       -> (None) 11111111
                                          5293  #
                                          5294  #       Conversion formula:
                                          5295  #               f(x) := 254 - x
                                          5296
                                          5297  # Detect controller TypeC codes
vBlankLast#34:
              1225 010f  ld   [$0f]       5298  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              1226 8001  adda $01         5299  adda(1)                         #35
              1227 210f  anda [$0f]       5300  anda([serialRaw])               #36
              1228 ec39  bne  .buttons#39 5301  bne('.buttons#39')              #37
                                          5302
                                          5303  # TypeC
              1229 010f  ld   [$0f]       5304  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              122a 8001  adda $01         5305  adda(1)                         #39
              122b 2110  anda [$10]       5306  anda([serialLast])              #40
              122c ec30  bne  .buttons#43 5307  bne('.buttons#43')              #41
              122d 00fe  ld   $fe         5308  ld(254)                         #42 then clear the selected bit
              122e 0200  nop              5309  nop()                           #43
              122f fc33  bra  .buttons#46 5310  bra('.buttons#46')              #44
                                          5311  label('.buttons#43')
.buttons#43:  1230 a10f  suba [$0f]       5312  suba([serialRaw])               #43,45
              1231 2111  anda [$11]       5313  anda([buttonState])             #44
              1232 c211  st   [$11]       5314  st([buttonState])               #45
                                          5315  label('.buttons#46')
.buttons#46:  1233 010f  ld   [$0f]       5316  ld([serialRaw])                 #46 Set the lower bits
              1234 4111  ora  [$11]       5317  ora([buttonState])              #47
                                          5318  label('.buttons#48')
.buttons#48:  1235 c211  st   [$11]       5319  st([buttonState])               #48
              1236 010f  ld   [$0f]       5320  ld([serialRaw])                 #49 Update serialLast for next pass
              1237 e0b3  jmp  y,$b3       5321  jmp(Y,'vBlankLast#52')          #50
              1238 c210  st   [$10]       5322  st([serialLast])                #51
                                          5323
                                          5324  # TypeB
                                          5325  # pChange = pNew & ~pOld
                                          5326  # nChange = nNew | ~nOld {DeMorgan}
                                          5327  label('.buttons#39')
.buttons#39:  1239 00ff  ld   $ff         5328  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              123a 6110  xora [$10]       5329  xora([serialLast])              #40
              123b 410f  ora  [$0f]       5330  ora([serialRaw])                #41 Catch button-press events
              123c 2111  anda [$11]       5331  anda([buttonState])             #42 Keep active button presses
              123d 410f  ora  [$0f]       5332  ora([serialRaw])                #43
              123e 0200  nop              5333  nop()                           #44
              123f 0200  nop              5334  nop()                           #45
              1240 fc35  bra  .buttons#48 5335  bra('.buttons#48')              #46
              1241 0200  nop              5336  nop()                           #47
                                          5337
                                          5338
                                          5339  #-----------------------------------------------------------------------
                                          5340  #       More SYS functions
                                          5341  #-----------------------------------------------------------------------
                                          5342
                                          5343  # SYS_Exec_88 implementation
                                          5344  label('sys_Exec')
sys_Exec:     1242 d617  st   [$17],y     5345  st([vPC+1],Y)                   #18 Clear vPCH and Y
              1243 011c  ld   [$1c]       5346  ld([vSP])                       #19 Place ROM loader below current stack pointer
              1244 a037  suba $37         5347  suba(53+2)                      #20 (AC -> *+0) One extra word for PUSH
              1245 d21d  st   [$1d],x     5348  st([vTmp],X)                    #21
              1246 80fe  adda $fe         5349  adda(-2)                        #22 (AC -> *-2)
              1247 c216  st   [$16]       5350  st([vPC])                       #23
                                          5351  # Start of manually compiled vCPU section
              1248 dc75  st   $75,[y,x++] 5352  st('PUSH',    [Y,Xpp])          #24 *+0
              1249 dccf  st   $cf,[y,x++] 5353  st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              124a 8023  adda $23         5354  adda(33-(-2))                   #26 (AC -> *+33)
              124b de00  st   [y,x++]     5355  st(           [Y,Xpp])          #27 *+27
              124c dc5e  st   $5e,[y,x++] 5356  st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              124d dc27  st   $27,[y,x++] 5357  st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              124e dccf  st   $cf,[y,x++] 5358  st('CALL',    [Y,Xpp])          #30 *+5
              124f de00  st   [y,x++]     5359  st(           [Y,Xpp])          #31 *+6
              1250 dc5e  st   $5e,[y,x++] 5360  st('ST',      [Y,Xpp])          #32 *+7
              1251 dc26  st   $26,[y,x++] 5361  st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              1252 dccf  st   $cf,[y,x++] 5362  st('CALL',    [Y,Xpp])          #34 *+9
              1253 de00  st   [y,x++]     5363  st(           [Y,Xpp])          #35 *+10
              1254 dc5e  st   $5e,[y,x++] 5364  st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              1255 dc28  st   $28,[y,x++] 5365  st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              1256 dccf  st   $cf,[y,x++] 5366  st('CALL',    [Y,Xpp])          #38 *+13
              1257 de00  st   [y,x++]     5367  st(           [Y,Xpp])          #39 *+14
              1258 dcf0  st   $f0,[y,x++] 5368  st('POKE',    [Y,Xpp])          #40 *+15
              1259 dc26  st   $26,[y,x++] 5369  st(sysArgs+2, [Y,Xpp])          #41 *+16
              125a dc93  st   $93,[y,x++] 5370  st('INC',     [Y,Xpp])          #42 *+17
              125b dc26  st   $26,[y,x++] 5371  st(sysArgs+2, [Y,Xpp])          #43 *+18
              125c dc1a  st   $1a,[y,x++] 5372  st('LD',      [Y,Xpp])          #44 *+19
              125d dc28  st   $28,[y,x++] 5373  st(sysArgs+4, [Y,Xpp])          #45 *+20
              125e dce6  st   $e6,[y,x++] 5374  st('SUBI',    [Y,Xpp])          #46 *+21
              125f dc01  st   $01,[y,x++] 5375  st(1,         [Y,Xpp])          #47 *+22
              1260 dc35  st   $35,[y,x++] 5376  st('BCC',     [Y,Xpp])          #48 *+23
              1261 dc72  st   $72,[y,x++] 5377  st('NE',      [Y,Xpp])          #49 *+24
              1262 80e8  adda $e8         5378  adda(11-2-33)                   #50 (AC -> *+9)
              1263 de00  st   [y,x++]     5379  st(           [Y,Xpp])          #51 *+25
              1264 dccf  st   $cf,[y,x++] 5380  st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              1265 8018  adda $18         5381  adda(33-9)                      #53 (AC -> *+33)
              1266 de00  st   [y,x++]     5382  st(           [Y,Xpp])          #54 *+27
              1267 dc35  st   $35,[y,x++] 5383  st('BCC',     [Y,Xpp])          #55 *+28
              1268 dc72  st   $72,[y,x++] 5384  st('NE',      [Y,Xpp])          #56 *+29
              1269 80e0  adda $e0         5385  adda(3-2-33)                    #57 (AC -> *+1)
              126a de00  st   [y,x++]     5386  st(           [Y,Xpp])          #58 *+30
              126b dc63  st   $63,[y,x++] 5387  st('POP',     [Y,Xpp])          #59 *+31 End
              126c dcff  st   $ff,[y,x++] 5388  st('RET',     [Y,Xpp])          #60 *+32
                                          5389  # Pointer constant pointing to the routine below (for use by CALL)
              126d 8022  adda $22         5390  adda(35-1)                      #61 (AC -> *+35)
              126e de00  st   [y,x++]     5391  st(           [Y,Xpp])          #62 *+33
              126f dc00  st   $00,[y,x++] 5392  st(0,         [Y,Xpp])          #63 *+34
                                          5393  # Routine to read next byte from ROM and advance read pointer
              1270 dc1a  st   $1a,[y,x++] 5394  st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              1271 dc24  st   $24,[y,x++] 5395  st(sysArgs+0, [Y,Xpp])          #65 *+36
              1272 dc8c  st   $8c,[y,x++] 5396  st('XORI',    [Y,Xpp])          #66 *+37
              1273 dcfb  st   $fb,[y,x++] 5397  st(251,       [Y,Xpp])          #67 *+38
              1274 dc35  st   $35,[y,x++] 5398  st('BCC',     [Y,Xpp])          #68 *+39
              1275 dc72  st   $72,[y,x++] 5399  st('NE',      [Y,Xpp])          #69 *+40
              1276 8009  adda $09         5400  adda(46-2-35)                   #70 (AC -> *+44)
              1277 de00  st   [y,x++]     5401  st(           [Y,Xpp])          #71 *+41
              1278 dc5e  st   $5e,[y,x++] 5402  st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              1279 dc24  st   $24,[y,x++] 5403  st(sysArgs+0, [Y,Xpp])          #73 *+43
              127a dc93  st   $93,[y,x++] 5404  st('INC',     [Y,Xpp])          #74 *+44
              127b dc25  st   $25,[y,x++] 5405  st(sysArgs+1, [Y,Xpp])          #75 *+45
              127c dc21  st   $21,[y,x++] 5406  st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              127d dc24  st   $24,[y,x++] 5407  st(sysArgs+0, [Y,Xpp])          #77 *+47
              127e dc7f  st   $7f,[y,x++] 5408  st('LUP',     [Y,Xpp])          #78 *+48
              127f dc00  st   $00,[y,x++] 5409  st(0,         [Y,Xpp])          #79 *+49
              1280 dc93  st   $93,[y,x++] 5410  st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              1281 dc24  st   $24,[y,x++] 5411  st(sysArgs+0, [Y,Xpp])          #81 *+51
              1282 dcff  st   $ff,[y,x++] 5412  st('RET',     [Y,Xpp])          #82 *+52 Return
                                          5413  # Return to interpreter
              1283 1403  ld   $03,y       5414  ld(hi('REENTER'),Y)             #83
              1284 e0cb  jmp  y,$cb       5415  jmp(Y,'REENTER')                #84
              1285 00d4  ld   $d4         5416  ld(-88/2)                       #85
                                          5417
                                          5418  # SYS_VDrawBits_134 implementation
                                          5419  label('sys_VDrawBits')
sys_VDrawBits:
              1286 0000  ld   $00         5420  ld(0)                           #18
                                          5421  label('.sysVdb0')
.sysVdb0:     1287 c21d  st   [$1d]       5422  st([vTmp])                      #19+i*25
              1288 9529  adda [$29],y     5423  adda([sysArgs+5],Y)             #20+i*25 Y=[sysPos+1]+[vTmp]
              1289 0126  ld   [$26]       5424  ld([sysArgs+2])                 #21+i*25 Select color
              128a e88d  blt  $128d       5425  bmi(pc()+3)                     #22+i*25
              128b fc8e  bra  $128e       5426  bra(pc()+3)                     #23+i*25
              128c 0124  ld   [$24]       5427  ld([sysArgs+0])                 #24+i*25
              128d 0125  ld   [$25]       5428  ld([sysArgs+1])                 #24+i*25(!)
              128e ce00  st   [y,x]       5429  st([Y,X])                       #25+i*25 Draw pixel
              128f 0126  ld   [$26]       5430  ld([sysArgs+2])                 #26+i*25 Shift byte left
              1290 8200  adda ac          5431  adda(AC)                        #27+i*25
              1291 c226  st   [$26]       5432  st([sysArgs+2])                 #28+i*25
              1292 011d  ld   [$1d]       5433  ld([vTmp])                      #29+i*25 Unrolled loop (once)
              1293 8129  adda [$29]       5434  adda([sysArgs+5])               #31+i*25
              1294 9401  adda $01,y       5435  adda(1,Y)                       #30+i*25 Y=[sysPos+1]+[vTmp]+1
              1295 0126  ld   [$26]       5436  ld([sysArgs+2])                 #32+i*25 Select color
              1296 e899  blt  $1299       5437  bmi(pc()+3)                     #33+i*25
              1297 fc9a  bra  $129a       5438  bra(pc()+3)                     #34+i*25
              1298 0124  ld   [$24]       5439  ld([sysArgs+0])                 #35+i*25
              1299 0125  ld   [$25]       5440  ld([sysArgs+1])                 #35+i*25(!)
              129a ce00  st   [y,x]       5441  st([Y,X])                       #36+i*25 Draw pixel
              129b 0126  ld   [$26]       5442  ld([sysArgs+2])                 #37+i*25 Shift byte left
              129c 8200  adda ac          5443  adda(AC)                        #38+i*25
              129d c226  st   [$26]       5444  st([sysArgs+2])                 #39+i*25
              129e 011d  ld   [$1d]       5445  ld([vTmp])                      #40+i*25 Loop counter
              129f a006  suba $06         5446  suba(6)                         #41+i*25
              12a0 ec87  bne  .sysVdb0    5447  bne('.sysVdb0')                 #42+i*25
              12a1 8008  adda $08         5448  adda(8)                         #43+i*25 Steps of 2
              12a2 1403  ld   $03,y       5449  ld(hi('REENTER'),Y)             #119
              12a3 e0cb  jmp  y,$cb       5450  jmp(Y,'REENTER')                #120
              12a4 00c2  ld   $c2         5451  ld(-124/2)                      #121
                                          5452
                                          5453  # SYS_ResetWaveforms_v4_50 implementation
                                          5454  label('sys_ResetWaveforms')
sys_ResetWaveforms:
              12a5 0118  ld   [$18]       5455  ld([vAC+0])                     #18 X=4i
              12a6 8200  adda ac          5456  adda(AC)                        #19
              12a7 9200  adda ac,x        5457  adda(AC,X)                      #20
              12a8 0118  ld   [$18]       5458  ld([vAC+0])                     #21
              12a9 de00  st   [y,x++]     5459  st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              12aa 2020  anda $20         5460  anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              12ab ecae  bne  $12ae       5461  bne(pc()+3)                     #24
              12ac 0118  ld   [$18]       5462  ld([vAC+0])                     #25
              12ad fcb0  bra  $12b0       5463  bra(pc()+3)                     #26
              12ae 8118  adda [$18]       5464  adda([vAC+0])                   #26,27
              12af 607f  xora $7f         5465  xora(127)                       #27
              12b0 de00  st   [y,x++]     5466  st([Y,Xpp])                     #28
              12b1 0118  ld   [$18]       5467  ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              12b2 2020  anda $20         5468  anda(0x20)                      #30
              12b3 ecb6  bne  $12b6       5469  bne(pc()+3)                     #31
              12b4 fcb7  bra  $12b7       5470  bra(pc()+3)                     #32
              12b5 0000  ld   $00         5471  ld(0)                           #33
              12b6 003f  ld   $3f         5472  ld(63)                          #33(!)
              12b7 de00  st   [y,x++]     5473  st([Y,Xpp])                     #34
              12b8 0118  ld   [$18]       5474  ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              12b9 ce00  st   [y,x]       5475  st([Y,X])                       #36
              12ba 8001  adda $01         5476  adda(1)                         #37 i += 1
              12bb c218  st   [$18]       5477  st([vAC+0])                     #38
              12bc 6040  xora $40         5478  xora(64)                        #39 For 64 iterations
              12bd f0c0  beq  $12c0       5479  beq(pc()+3)                     #40
              12be fcc1  bra  $12c1       5480  bra(pc()+3)                     #41
              12bf 00fe  ld   $fe         5481  ld(-2)                          #42
              12c0 0000  ld   $00         5482  ld(0)                           #42(!)
              12c1 8116  adda [$16]       5483  adda([vPC])                     #43
              12c2 c216  st   [$16]       5484  st([vPC])                       #44
              12c3 1403  ld   $03,y       5485  ld(hi('REENTER'),Y)             #45
              12c4 e0cb  jmp  y,$cb       5486  jmp(Y,'REENTER')                #46
              12c5 00e7  ld   $e7         5487  ld(-50/2)                       #47
                                          5488
                                          5489  # SYS_ShuffleNoise_v4_46 implementation
                                          5490  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              12c6 1118  ld   [$18],x     5491  ld([vAC+0],X)                   #18 tmp = T[4j]
              12c7 0d00  ld   [y,x]       5492  ld([Y,X])                       #19
              12c8 c21d  st   [$1d]       5493  st([vTmp])                      #20
              12c9 1119  ld   [$19],x     5494  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              12ca 0d00  ld   [y,x]       5495  ld([Y,X])                       #22
              12cb 1118  ld   [$18],x     5496  ld([vAC+0],X)                   #23
              12cc ce00  st   [y,x]       5497  st([Y,X])                       #24
              12cd 8200  adda ac          5498  adda(AC)                        #25 j += T[4i]
              12ce 8200  adda ac          5499  adda(AC,)                       #26
              12cf 8118  adda [$18]       5500  adda([vAC+0])                   #27
              12d0 c218  st   [$18]       5501  st([vAC+0])                     #28
              12d1 1119  ld   [$19],x     5502  ld([vAC+1],X)                   #29 T[4i] = tmp
              12d2 011d  ld   [$1d]       5503  ld([vTmp])                      #30
              12d3 ce00  st   [y,x]       5504  st([Y,X])                       #31
              12d4 0119  ld   [$19]       5505  ld([vAC+1])                     #32 i += 1
              12d5 8004  adda $04         5506  adda(4)                         #33
              12d6 c219  st   [$19]       5507  st([vAC+1])                     #34
              12d7 f0da  beq  $12da       5508  beq(pc()+3)                     #35 For 64 iterations
              12d8 fcdb  bra  $12db       5509  bra(pc()+3)                     #36
              12d9 00fe  ld   $fe         5510  ld(-2)                          #37
              12da 0000  ld   $00         5511  ld(0)                           #37(!)
              12db 8116  adda [$16]       5512  adda([vPC])                     #38
              12dc c216  st   [$16]       5513  st([vPC])                       #39
              12dd 1403  ld   $03,y       5514  ld(hi('NEXTY'),Y)               #40
              12de e000  jmp  y,$00       5515  jmp(Y,'NEXTY')                  #41
              12df 00ea  ld   $ea         5516  ld(-44/2)                       #42
                                          5517
                                          5518
                                          5519  #-----------------------------------------------------------------------
                                          5520  #
                                          5521  #  $1300 ROM page 19/20: SYS calls
                                          5522  #
                                          5523  #-----------------------------------------------------------------------
                                          5524
              12e0 0200  nop              5525  align(0x100, size=0x100)
              12e1 0200  nop
              12e2 0200  nop
              * 32 times
                                          5526
                                          5527  # SYS_CopyMemory_v6_80 implementation
                                          5528
                                          5529  label('sys_CopyMemory')
sys_CopyMemory:
              1300 f83e  ble  .sysCm#20   5530  ble('.sysCm#20')                     #18   goto burst6
              1301 a006  suba $06         5531  suba(6)                              #19
              1302 f440  bge  .sysCm#22   5532  bge('.sysCm#22')                     #20   goto burst6
              1303 1527  ld   [$27],y     5533  ld([sysArgs+3],Y)                    #21
              1304 8003  adda $03         5534  adda(3)                              #22
              1305 f41d  bge  .sysCm#25   5535  bge('.sysCm#25')                     #23   goto burst3
              1306 1126  ld   [$26],x     5536  ld([sysArgs+2],X)                    #24
                                          5537
              1307 8002  adda $02         5538  adda(2)                              #25   single
              1308 c218  st   [$18]       5539  st([vAC])                            #26
              1309 0d00  ld   [y,x]       5540  ld([Y,X])                            #27
              130a 1525  ld   [$25],y     5541  ld([sysArgs+1],Y)                    #28
              130b 1124  ld   [$24],x     5542  ld([sysArgs+0],X)                    #29
              130c ce00  st   [y,x]       5543  st([Y,X])                            #30
              130d 0124  ld   [$24]       5544  ld([sysArgs+0])                      #31
              130e 8001  adda $01         5545  adda(1)                              #32
              130f c224  st   [$24]       5546  st([sysArgs+0])                      #33
              1310 0126  ld   [$26]       5547  ld([sysArgs+2])                      #34
              1311 8001  adda $01         5548  adda(1)                              #35
              1312 c226  st   [$26]       5549  st([sysArgs+2])                      #36
              1313 0118  ld   [$18]       5550  ld([vAC])                            #37
              1314 f017  beq  $1317       5551  beq(pc()+3)                          #38
              1315 fc18  bra  $1318       5552  bra(pc()+3)                          #39
              1316 00fe  ld   $fe         5553  ld(-2)                               #40
              1317 0000  ld   $00         5554  ld(0)                                #40!
              1318 8116  adda [$16]       5555  adda([vPC])                          #41
              1319 c216  st   [$16]       5556  st([vPC])                            #42
              131a 1403  ld   $03,y       5557  ld(hi('REENTER'),Y)                  #43
              131b e0cb  jmp  y,$cb       5558  jmp(Y,'REENTER')                     #44
              131c 00e8  ld   $e8         5559  ld(-48/2)                            #45
                                          5560
                                          5561  label('.sysCm#25')
.sysCm#25:    131d c218  st   [$18]       5562  st([vAC])                            #25   burst3
                                          5563  for i in range(3):
              131e 0d00  ld   [y,x]       5564    ld([Y,X])                            #26+3*i
              131f c228  st   [$28]       5565    st([sysArgs+4+i])                    #27+3*i
              1320 de00  st   [y,x++]     5566    st([Y,Xpp]) if i<2 else None         #28+3*i
              1321 0d00  ld   [y,x]
              1322 c229  st   [$29]
              1323 de00  st   [y,x++]
              1324 0d00  ld   [y,x]
              1325 c22a  st   [$2a]
              1326 1525  ld   [$25],y     5567  ld([sysArgs+1],Y)                    #34
              1327 1124  ld   [$24],x     5568  ld([sysArgs+0],X)                    #35
                                          5569  for i in range(3):
              1328 0128  ld   [$28]       5570    ld([sysArgs+4+i])                    #36+2*i
              1329 de00  st   [y,x++]     5571    st([Y,Xpp])                          #37+2*i
              132a 0129  ld   [$29]
              132b de00  st   [y,x++]
              132c 012a  ld   [$2a]
              132d de00  st   [y,x++]
              132e 0124  ld   [$24]       5572  ld([sysArgs+0])                      #42
              132f 8003  adda $03         5573  adda(3)                              #43
              1330 c224  st   [$24]       5574  st([sysArgs+0])                      #44
              1331 0126  ld   [$26]       5575  ld([sysArgs+2])                      #45
              1332 8003  adda $03         5576  adda(3)                              #46
              1333 c226  st   [$26]       5577  st([sysArgs+2])                      #47
              1334 0118  ld   [$18]       5578  ld([vAC])                            #48
              1335 f038  beq  $1338       5579  beq(pc()+3)                          #49
              1336 fc39  bra  $1339       5580  bra(pc()+3)                          #50
              1337 00fe  ld   $fe         5581  ld(-2)                               #51
              1338 0000  ld   $00         5582  ld(0)                                #51!
              1339 8116  adda [$16]       5583  adda([vPC])                          #52
              133a c216  st   [$16]       5584  st([vPC])                            #53
              133b 1403  ld   $03,y       5585  ld(hi('NEXTY'),Y)                    #54
              133c e000  jmp  y,$00       5586  jmp(Y,'NEXTY')                       #55
              133d 00e3  ld   $e3         5587  ld(-58/2)                            #56
                                          5588
                                          5589  label('.sysCm#20')
.sysCm#20:    133e 0200  nop              5590  nop()                                #20   burst6
              133f 1527  ld   [$27],y     5591  ld([sysArgs+3],Y)                    #21
                                          5592  label('.sysCm#22')
.sysCm#22:    1340 c218  st   [$18]       5593  st([vAC])                            #22   burst6
              1341 1126  ld   [$26],x     5594  ld([sysArgs+2],X)                    #23
                                          5595  for i in range(6):
              1342 0d00  ld   [y,x]       5596    ld([Y,X])                            #24+i*3
              1343 c21a  st   [$1a]       5597    st([vLR+i if i<2 else sysArgs+2+i])  #25+i*3
              1344 de00  st   [y,x++]     5598    st([Y,Xpp]) if i<5 else None         #26+i*3 if i<5
              1345 0d00  ld   [y,x]
              1346 c21b  st   [$1b]
              1347 de00  st   [y,x++]
              1348 0d00  ld   [y,x]
              1349 c228  st   [$28]
              134a de00  st   [y,x++]
              134b 0d00  ld   [y,x]
              134c c229  st   [$29]
              134d de00  st   [y,x++]
              134e 0d00  ld   [y,x]
              134f c22a  st   [$2a]
              1350 de00  st   [y,x++]
              1351 0d00  ld   [y,x]
              1352 c22b  st   [$2b]
              1353 1525  ld   [$25],y     5599  ld([sysArgs+1],Y)                    #41
              1354 1124  ld   [$24],x     5600  ld([sysArgs+0],X)                    #42
                                          5601  for i in range(6):
              1355 011a  ld   [$1a]       5602    ld([vLR+i if i<2 else sysArgs+2+i])  #43+i*2
              1356 de00  st   [y,x++]     5603    st([Y,Xpp])                          #44+i*2
              1357 011b  ld   [$1b]
              1358 de00  st   [y,x++]
              1359 0128  ld   [$28]
              135a de00  st   [y,x++]
              135b 0129  ld   [$29]
              135c de00  st   [y,x++]
              135d 012a  ld   [$2a]
              135e de00  st   [y,x++]
              135f 012b  ld   [$2b]
              1360 de00  st   [y,x++]
              1361 0124  ld   [$24]       5604  ld([sysArgs+0])                      #55
              1362 8006  adda $06         5605  adda(6)                              #56
              1363 c224  st   [$24]       5606  st([sysArgs+0])                      #57
              1364 0126  ld   [$26]       5607  ld([sysArgs+2])                      #58
              1365 8006  adda $06         5608  adda(6)                              #59
              1366 c226  st   [$26]       5609  st([sysArgs+2])                      #60
                                          5610
              1367 0118  ld   [$18]       5611  ld([vAC])                            #61
              1368 ec6c  bne  .sysCm#64   5612  bne('.sysCm#64')                     #62
              1369 1403  ld   $03,y       5613  ld(hi('REENTER'),Y)                  #63
              136a e0cb  jmp  y,$cb       5614  jmp(Y,'REENTER')                     #64
              136b 00de  ld   $de         5615  ld(-68/2)                            #65
                                          5616
                                          5617  label('.sysCm#64')
.sysCm#64:    136c 00e6  ld   $e6         5618  ld(-52/2)                            #64
              136d 8115  adda [$15]       5619  adda([vTicks])                       #13 = 65 - 52
              136e c215  st   [$15]       5620  st([vTicks])                         #14
              136f 80e7  adda $e7         5621  adda(min(0,maxTicks-(26+52)/2))      #15   could probably be min(0,maxTicks-(26+52)/2)
                                          5622  bge('sys_CopyMemory')                #16
              1370 f400  bge  sys_CopyMemory
              1371 0118  ld   [$18]       5623  ld([vAC])                            #17
              1372 00fe  ld   $fe         5624  ld(-2)                               #18   notime
              1373 8116  adda [$16]       5625  adda([vPC])                          #19
              1374 c216  st   [$16]       5626  st([vPC])                            #20
              1375 1403  ld   $03,y       5627  ld(hi('REENTER'),Y)                  #21
              1376 e0cb  jmp  y,$cb       5628  jmp(Y,'REENTER')                     #22
              1377 00f3  ld   $f3         5629  ld(-26/2)                            #23
                                          5630
                                          5631  #-----------------------------------------------------------------------
                                          5632  # SYS_CopyMemoryExt_v6_100 implementation
                                          5633
                                          5634  label('sys_CopyMemoryExt')
                                          5635
sys_CopyMemoryExt:
              1378 8200  adda ac          5636  adda(AC)                             #18
              1379 8200  adda ac          5637  adda(AC)                             #19
              137a 403c  ora  $3c         5638  ora(0x3c)                            #20
              137b c21d  st   [$1d]       5639  st([vTmp])                           #21 [vTmp] = src ctrl value
              137c 0119  ld   [$19]       5640  ld([vAC+1])                          #22
              137d 20fc  anda $fc         5641  anda(0xfc)                           #23
              137e 403c  ora  $3c         5642  ora(0x3c)                            #24
              137f c21a  st   [$1a]       5643  st([vLR])                            #25 [vLR] = dest ctrl value
                                          5644
                                          5645  label('.sysCme#26')
.sysCme#26:   1380 0118  ld   [$18]       5646  ld([vAC])                            #26
              1381 f8a4  ble  .sysCme#29  5647  ble('.sysCme#29')                    #27   goto burst5
              1382 a005  suba $05         5648  suba(5)                              #28
              1383 f4a6  bge  .sysCme#31  5649  bge('.sysCme#31')                    #29   goto burst5
              1384 1527  ld   [$27],y     5650  ld([sysArgs+3],Y)                    #30
              1385 8004  adda $04         5651  adda(4)                              #31
                                          5652
              1386 c218  st   [$18]       5653  st([vAC])                            #32   single
              1387 111d  ld   [$1d],x     5654  ld([vTmp],X)                         #33
              1388 c500  ctrl x           5655  ctrl(X)                              #34
              1389 1126  ld   [$26],x     5656  ld([sysArgs+2],X)                    #35
              138a 0d00  ld   [y,x]       5657  ld([Y,X])                            #36
              138b 111a  ld   [$1a],x     5658  ld([vLR],X)                          #37
              138c c500  ctrl x           5659  ctrl(X)                              #38
              138d 1525  ld   [$25],y     5660  ld([sysArgs+1],Y)                    #39
              138e 1124  ld   [$24],x     5661  ld([sysArgs+0],X)                    #40
              138f ce00  st   [y,x]       5662  st([Y,X])                            #41
              1390 1401  ld   $01,y       5663  ld(hi(ctrlBits), Y)                  #42
              1391 09f8  ld   [y,$f8]     5664  ld([Y,ctrlBits])                     #43
              1392 1200  ld   ac,x        5665  ld(AC,X)                             #44
              1393 c500  ctrl x           5666  ctrl(X)                              #45
              1394 0124  ld   [$24]       5667  ld([sysArgs+0])                      #46
              1395 8001  adda $01         5668  adda(1)                              #47
              1396 c224  st   [$24]       5669  st([sysArgs+0])                      #48
              1397 0126  ld   [$26]       5670  ld([sysArgs+2])                      #49
              1398 8001  adda $01         5671  adda(1)                              #50
              1399 c226  st   [$26]       5672  st([sysArgs+2])                      #51
              139a 0118  ld   [$18]       5673  ld([vAC])                            #52  done?
              139b f09e  beq  $139e       5674  beq(pc()+3)                          #53
              139c fc9f  bra  $139f       5675  bra(pc()+3)                          #54
              139d 00fe  ld   $fe         5676  ld(-2)                               #55  restart
              139e 0000  ld   $00         5677  ld(0)                                #55! finished
              139f 8116  adda [$16]       5678  adda([vPC])                          #56
              13a0 c216  st   [$16]       5679  st([vPC])                            #57
              13a1 1403  ld   $03,y       5680  ld(hi('NEXTY'),Y)                    #58
              13a2 e000  jmp  y,$00       5681  jmp(Y,'NEXTY')                       #59
              13a3 00e1  ld   $e1         5682  ld(-62/2)                            #60
                                          5683
                                          5684  label('.sysCme#29')
.sysCme#29:   13a4 0200  nop              5685  nop()                                #29   burst5
              13a5 1527  ld   [$27],y     5686  ld([sysArgs+3],Y)                    #30
                                          5687  label('.sysCme#31')
.sysCme#31:   13a6 c218  st   [$18]       5688  st([vAC])                            #31   burst5
              13a7 111d  ld   [$1d],x     5689  ld([vTmp],X)                         #32
              13a8 c500  ctrl x           5690  ctrl(X)                              #33
              13a9 1126  ld   [$26],x     5691  ld([sysArgs+2],X)                    #34
                                          5692  for i in range(5):
              13aa 0d00  ld   [y,x]       5693    ld([Y,X])                            #35+i*3
              13ab c21b  st   [$1b]       5694    st([vLR+1 if i<1 else sysArgs+3+i])  #36+i*3
              13ac de00  st   [y,x++]     5695    st([Y,Xpp]) if i<4 else None         #37+i*3 if i<4
              13ad 0d00  ld   [y,x]
              13ae c228  st   [$28]
              13af de00  st   [y,x++]
              13b0 0d00  ld   [y,x]
              13b1 c229  st   [$29]
              13b2 de00  st   [y,x++]
              13b3 0d00  ld   [y,x]
              13b4 c22a  st   [$2a]
              13b5 de00  st   [y,x++]
              13b6 0d00  ld   [y,x]
              13b7 c22b  st   [$2b]
              13b8 111a  ld   [$1a],x     5696  ld([vLR],X)                          #49
              13b9 c500  ctrl x           5697  ctrl(X)                              #50
              13ba 1525  ld   [$25],y     5698  ld([sysArgs+1],Y)                    #51
              13bb 1124  ld   [$24],x     5699  ld([sysArgs+0],X)                    #52
                                          5700  for i in range(5):
              13bc 011b  ld   [$1b]       5701    ld([vLR+1 if i<1 else sysArgs+3+i])  #53+i*2
              13bd de00  st   [y,x++]     5702    st([Y,Xpp])                          #54+i*2
              13be 0128  ld   [$28]
              13bf de00  st   [y,x++]
              13c0 0129  ld   [$29]
              13c1 de00  st   [y,x++]
              13c2 012a  ld   [$2a]
              13c3 de00  st   [y,x++]
              13c4 012b  ld   [$2b]
              13c5 de00  st   [y,x++]
              13c6 0124  ld   [$24]       5703  ld([sysArgs+0])                      #63
              13c7 8005  adda $05         5704  adda(5)                              #64
              13c8 c224  st   [$24]       5705  st([sysArgs+0])                      #65
              13c9 0126  ld   [$26]       5706  ld([sysArgs+2])                      #66
              13ca 8005  adda $05         5707  adda(5)                              #67
              13cb c226  st   [$26]       5708  st([sysArgs+2])                      #68
                                          5709
              13cc 0118  ld   [$18]       5710  ld([vAC])                            #69
              13cd ecd6  bne  .sysCme#72  5711  bne('.sysCme#72')                    #70
              13ce 1401  ld   $01,y       5712  ld(hi(ctrlBits), Y)                  #71  we're done!
              13cf 09f8  ld   [y,$f8]     5713  ld([Y,ctrlBits])                     #72
              13d0 30fc  anda $fc,x       5714  anda(0xfc,X)                         #73
              13d1 c500  ctrl x           5715  ctrl(X)                              #74
              13d2 011d  ld   [$1d]       5716  ld([vTmp])                           #75  always read after ctrl
              13d3 1403  ld   $03,y       5717  ld(hi('NEXTY'),Y)                    #76
              13d4 e000  jmp  y,$00       5718  jmp(Y,'NEXTY')                       #77
              13d5 00d8  ld   $d8         5719  ld(-80/2)                            #78
                                          5720
                                          5721  label('.sysCme#72')
.sysCme#72:   13d6 00e6  ld   $e6         5722  ld(-52/2)                            #72
              13d7 8115  adda [$15]       5723  adda([vTicks])                       #21 = 72 - 52
              13d8 c215  st   [$15]       5724  st([vTicks])                         #22
              13d9 80e0  adda $e0         5725  adda(min(0,maxTicks-(40+52)/2))      #23
              13da f480  bge  .sysCme#26  5726  bge('.sysCme#26')                    #24  enough time for another loop
              13db 00fe  ld   $fe         5727  ld(-2)                               #25
              13dc 8116  adda [$16]       5728  adda([vPC])                          #26  restart
              13dd c216  st   [$16]       5729  st([vPC])                            #27
              13de 1401  ld   $01,y       5730  ld(hi(ctrlBits), Y)                  #28
              13df 09f8  ld   [y,$f8]     5731  ld([Y,ctrlBits])                     #29
              13e0 30fc  anda $fc,x       5732  anda(0xfc,X)                         #30
              13e1 c500  ctrl x           5733  ctrl(X)                              #31
              13e2 011d  ld   [$1d]       5734  ld([vTmp])                           #32 always read after ctrl
              13e3 1403  ld   $03,y       5735  ld(hi('REENTER'),Y)                  #33
              13e4 e0cb  jmp  y,$cb       5736  jmp(Y,'REENTER')                     #34
              13e5 00ed  ld   $ed         5737  ld(-38/2)                            #35 max: 38 + 52 = 90 cycles
                                          5738
              13e6 0200  nop              5739  align(0x100, size=0x100)
              13e7 0200  nop
              13e8 0200  nop
              * 26 times
                                          5740
                                          5741  #-----------------------------------------------------------------------
                                          5742  # SYS_ScanMemory_v6_50 implementation
                                          5743
                                          5744  label('sys_ScanMemory')
sys_ScanMemory:
              1400 1124  ld   [$24],x     5745  ld([sysArgs+0],X)                    #18
              1401 0d00  ld   [y,x]       5746  ld([Y,X])                            #19
                                          5747  label('.sysSme#20')
.sysSme#20:   1402 6126  xora [$26]       5748  xora([sysArgs+2])                    #20
              1403 f01e  beq  .sysSme#23  5749  beq('.sysSme#23')                    #21
              1404 0d00  ld   [y,x]       5750  ld([Y,X])                            #22
              1405 6127  xora [$27]       5751  xora([sysArgs+3])                    #23
              1406 f021  beq  .sysSme#26  5752  beq('.sysSme#26')                    #24
              1407 0124  ld   [$24]       5753  ld([sysArgs+0])                      #25
              1408 8001  adda $01         5754  adda(1);                             #26
              1409 d224  st   [$24],x     5755  st([sysArgs+0],X)                    #27
              140a 0118  ld   [$18]       5756  ld([vAC])                            #28
              140b a001  suba $01         5757  suba(1)                              #29
              140c f01a  beq  .sysSme#32  5758  beq('.sysSme#32')                    #30 return zero
              140d c218  st   [$18]       5759  st([vAC])                            #31
              140e 00f7  ld   $f7         5760  ld(-18/2)                            #14 = 32 - 18
              140f 8115  adda [$15]       5761  adda([vTicks])                       #15
              1410 c215  st   [$15]       5762  st([vTicks])                         #16
              1411 80f7  adda $f7         5763  adda(min(0,maxTicks -(28+18)/2))     #17
              1412 f402  bge  .sysSme#20  5764  bge('.sysSme#20')                    #18
              1413 0d00  ld   [y,x]       5765  ld([Y,X])                            #19
              1414 00fe  ld   $fe         5766  ld(-2)                               #20 restart
              1415 8116  adda [$16]       5767  adda([vPC])                          #21
              1416 c216  st   [$16]       5768  st([vPC])                            #22
              1417 1403  ld   $03,y       5769  ld(hi('REENTER'),Y)                  #23
              1418 e0cb  jmp  y,$cb       5770  jmp(Y,'REENTER')                     #24
              1419 00f2  ld   $f2         5771  ld(-28/2)                            #25
                                          5772
                                          5773  label('.sysSme#32')
.sysSme#32:   141a c219  st   [$19]       5774  st([vAC+1])                          #32 return zero
              141b 1403  ld   $03,y       5775  ld(hi('REENTER'),Y)                  #33
              141c e0cb  jmp  y,$cb       5776  jmp(Y,'REENTER')                     #34
              141d 00ed  ld   $ed         5777  ld(-38/2)                            #35
                                          5778
                                          5779  label('.sysSme#23')
.sysSme#23:   141e 0200  nop              5780  nop()                                #23 success
              141f 0200  nop              5781  nop()                                #24
              1420 0124  ld   [$24]       5782  ld([sysArgs+0])                      #25
                                          5783  label('.sysSme#26')
.sysSme#26:   1421 c218  st   [$18]       5784  st([vAC])                            #26 success
              1422 0125  ld   [$25]       5785  ld([sysArgs+1])                      #27
              1423 c219  st   [$19]       5786  st([vAC+1])                          #28
              1424 1403  ld   $03,y       5787  ld(hi('REENTER'),Y)                  #29
              1425 e0cb  jmp  y,$cb       5788  jmp(Y,'REENTER')                     #30
              1426 00ef  ld   $ef         5789  ld(-34/2)                            #31
                                          5790
                                          5791
                                          5792  #-----------------------------------------------------------------------
                                          5793  # SYS_ScanMemoryExt_v6_50 implementation
                                          5794
                                          5795  label('sys_ScanMemoryExt')
sys_ScanMemoryExt:
              1427 503c  ora  $3c,x       5796  ora(0x3c,X)                          #18
              1428 c500  ctrl x           5797  ctrl(X)                              #19
              1429 1525  ld   [$25],y     5798  ld([sysArgs+1],Y)                    #20
              142a 1124  ld   [$24],x     5799  ld([sysArgs+0],X)                    #21
              142b 0d00  ld   [y,x]       5800  ld([Y,X])                            #22
              142c 0200  nop              5801  nop()                                #23
                                          5802  label('.sysSmx#24')
.sysSmx#24:   142d 6126  xora [$26]       5803  xora([sysArgs+2])                    #24
              142e f04a  beq  .sysSmx#27  5804  beq('.sysSmx#27')                    #25
              142f 0d00  ld   [y,x]       5805  ld([Y,X])                            #26
              1430 6127  xora [$27]       5806  xora([sysArgs+3])                    #27
              1431 f04d  beq  .sysSmx#30  5807  beq('.sysSmx#30')                    #28
              1432 0124  ld   [$24]       5808  ld([sysArgs+0])                      #29
              1433 8001  adda $01         5809  adda(1);                             #30
              1434 d224  st   [$24],x     5810  st([sysArgs+0],X)                    #31
              1435 0118  ld   [$18]       5811  ld([vAC])                            #32
              1436 a001  suba $01         5812  suba(1)                              #33
              1437 f053  beq  .sysSmx#36  5813  beq('.sysSmx#36')                    #34 return zero
              1438 c218  st   [$18]       5814  st([vAC])                            #35
              1439 00f7  ld   $f7         5815  ld(-18/2)                            #18 = 36 - 18
              143a 8115  adda [$15]       5816  adda([vTicks])                       #19
              143b c215  st   [$15]       5817  st([vTicks])                         #20
              143c 80f6  adda $f6         5818  adda(min(0,maxTicks -(30+18)/2))     #21
              143d f42d  bge  .sysSmx#24  5819  bge('.sysSmx#24')                    #22
              143e 0d00  ld   [y,x]       5820  ld([Y,X])                            #23
              143f 0116  ld   [$16]       5821  ld([vPC])                            #24
              1440 a002  suba $02         5822  suba(2)                              #25 restart
              1441 c216  st   [$16]       5823  st([vPC])                            #26
              1442 1401  ld   $01,y       5824  ld(hi(ctrlBits),Y)                   #27 restore and return
              1443 09f8  ld   [y,$f8]     5825  ld([Y,ctrlBits])                     #28
              1444 30fc  anda $fc,x       5826  anda(0xfc,X)                         #29
              1445 c500  ctrl x           5827  ctrl(X)                              #30
              1446 011d  ld   [$1d]       5828  ld([vTmp])                           #31
              1447 1403  ld   $03,y       5829  ld(hi('NEXTY'),Y)                    #32
              1448 e000  jmp  y,$00       5830  jmp(Y,'NEXTY')                       #33
              1449 00ee  ld   $ee         5831  ld(-36/2)                            #34
                                          5832
                                          5833  label('.sysSmx#27')
.sysSmx#27:   144a 0200  nop              5834  nop()                                #27 success
              144b 0200  nop              5835  nop()                                #28
              144c 0124  ld   [$24]       5836  ld([sysArgs+0])                      #29
                                          5837  label('.sysSmx#30')
.sysSmx#30:   144d c218  st   [$18]       5838  st([vAC])                            #30 success
              144e 0125  ld   [$25]       5839  ld([sysArgs+1])                      #31
              144f 0200  nop              5840  nop()                                #32
              1450 0200  nop              5841  nop()                                #33
              1451 0200  nop              5842  nop()                                #34
              1452 0200  nop              5843  nop()                                #35
                                          5844  label('.sysSmx#36')
.sysSmx#36:   1453 c219  st   [$19]       5845  st([vAC+1])                          #36
              1454 1401  ld   $01,y       5846  ld(hi(ctrlBits),Y)                   #37 restore and return
              1455 09f8  ld   [y,$f8]     5847  ld([Y,ctrlBits])                     #38
              1456 30fc  anda $fc,x       5848  anda(0xfc,X)                         #39
              1457 c500  ctrl x           5849  ctrl(X)                              #40
              1458 011d  ld   [$1d]       5850  ld([vTmp])                           #41
              1459 1403  ld   $03,y       5851  ld(hi('NEXTY'),Y)                    #42
              145a e000  jmp  y,$00       5852  jmp(Y,'NEXTY')                       #43
              145b 00e9  ld   $e9         5853  ld(-46/2)                            #44
                                          5854
                                          5855
                                          5856  #-----------------------------------------------------------------------
                                          5857  # sys_Multiply_s16, sum:s16 = x:s16 * y:s16
                                          5858  # x:args0:1 y:args2:3 sum:args4:5 mask:args6:7
                                          5859  #
                                          5860  # Written by at67 for early ROMvX0.
                                          5861
                                          5862  label('sys_Multiply_s16')
sys_Multiply_s16:
              145c 2126  anda [$26]       5863  anda([sysArgs+2])               #18,
              145d c218  st   [$18]       5864  st([vAC])                       #19, AC.lo = mask.lo AND y.lo
              145e 012b  ld   [$2b]       5865  ld([sysArgs+7])                 #20, load mask.hio
              145f 2127  anda [$27]       5866  anda([sysArgs+3])               #21,
              1460 c219  st   [$19]       5867  st([vAC+1])                     #22, AC.hi = mask.hi AND y.hi
              1461 4118  ora  [$18]       5868  ora([vAC])                      #23,
                                          5869  beq('.sys_ms16_26')             #24, AC = 0 then skip
              1462 f06a  beq  .sys_ms16_26
              1463 0128  ld   [$28]       5870  ld([sysArgs+4])                 #25, load sum.lo
              1464 8124  adda [$24]       5871  adda([sysArgs+0])               #26, load x.lo
              1465 c228  st   [$28]       5872  st([sysArgs+4])                 #27, sum.lo = sum.lo + x.lo
                                          5873  blt('.sys_ms16_30')             #28, check for carry
              1466 e86c  blt  .sys_ms16_30
              1467 a124  suba [$24]       5874  suba([sysArgs+0])               #29, get original sum.lo back
                                          5875  bra('.sys_ms16_32')             #30,
              1468 fc6e  bra  .sys_ms16_32
              1469 4124  ora  [$24]       5876  ora([sysArgs+0])                #31, carry in bit 7
                                          5877
                                          5878  label('.sys_ms16_26')
                                          5879  bra('.sys_ms16_28')             #26,
.sys_ms16_26: 146a fc74  bra  .sys_ms16_28
              146b 00e4  ld   $e4         5880  ld(-56/2)                       #27, no accumulate sys ticks
                                          5881
                                          5882  label('.sys_ms16_30')
.sys_ms16_30: 146c 2124  anda [$24]       5883  anda([sysArgs+0])               #30, carry in bit 7
              146d 0200  nop              5884  nop()                           #31,
                                          5885
                                          5886  label('.sys_ms16_32')
.sys_ms16_32: 146e 3080  anda $80,x       5887  anda(0x80,X)                    #32,
              146f 0500  ld   [x]         5888  ld([X])                         #33, move carry to bit 0
              1470 8129  adda [$29]       5889  adda([sysArgs+5])               #34,
              1471 8125  adda [$25]       5890  adda([sysArgs+1])               #35,
              1472 c229  st   [$29]       5891  st([sysArgs+5])                 #36, sum.hi = sum.hi + x.hi
              1473 00df  ld   $df         5892  ld(-66/2)                       #37, accumulate sys ticks
                                          5893
                                          5894  label('.sys_ms16_28')
.sys_ms16_28: 1474 c21d  st   [$1d]       5895  st([vTmp])                      #28,#38,
              1475 0124  ld   [$24]       5896  ld([sysArgs+0])                 #29,#39, AC = x.lo
              1476 3080  anda $80,x       5897  anda(0x80,X)                    #30,#40, X = AC & 0x80
              1477 8124  adda [$24]       5898  adda([sysArgs+0])               #31,#41, AC = x.lo <<1
              1478 c224  st   [$24]       5899  st([sysArgs+0])                 #32,#42, x.lo = AC
              1479 0500  ld   [x]         5900  ld([X])                         #33,#43, AC = X >>7
              147a 8125  adda [$25]       5901  adda([sysArgs+1])               #34,#44,
              147b 8125  adda [$25]       5902  adda([sysArgs+1])               #35,#45,
              147c c225  st   [$25]       5903  st([sysArgs+1])                 #36,#46, x.hi = x.hi <<1 + AC
              147d 012a  ld   [$2a]       5904  ld([sysArgs+6])                 #37,#47, AC = mask.lo
              147e 3080  anda $80,x       5905  anda(0x80,X)                    #38,#48, X = AC & 0x80
              147f 812a  adda [$2a]       5906  adda([sysArgs+6])               #39,#49, AC = mask.lo <<1
              1480 c22a  st   [$2a]       5907  st([sysArgs+6])                 #40,#50, mask.lo = AC
              1481 0500  ld   [x]         5908  ld([X])                         #41,#51, AC = X >>7
              1482 812b  adda [$2b]       5909  adda([sysArgs+7])               #42,#52,
              1483 812b  adda [$2b]       5910  adda([sysArgs+7])               #43,#53,
              1484 c22b  st   [$2b]       5911  st([sysArgs+7])                 #44,#54, mask.hi = mask.hi <<1 + AC
              1485 412a  ora  [$2a]       5912  ora([sysArgs+6])                #45,#55,
                                          5913  beq('.sys_ms16_48')             #46,#56, if mask = 0
              1486 f08e  beq  .sys_ms16_48
              1487 0128  ld   [$28]       5914  ld([sysArgs+4])                 #47,#57
              1488 0116  ld   [$16]       5915  ld([vPC])                       #48,#58,
              1489 a002  suba $02         5916  suba(2)                         #49,#59,
              148a c216  st   [$16]       5917  st([vPC])                       #50,#60, restart SYS function
              148b 1403  ld   $03,y       5918  ld(hi('REENTER'),Y)             #51,#61,
              148c e0cb  jmp  y,$cb       5919  jmp(Y,'REENTER')                #52,#62,
              148d 011d  ld   [$1d]       5920  ld([vTmp])                      #53,#63,
                                          5921
                                          5922  label('.sys_ms16_48')
.sys_ms16_48: 148e c218  st   [$18]       5923  st([vAC])                       #48,#58,
              148f 0129  ld   [$29]       5924  ld([sysArgs+5])                 #49,#59,
              1490 c219  st   [$19]       5925  st([vAC+1])                     #50,#60,
              1491 1403  ld   $03,y       5926  ld(hi('REENTER'),Y)             #51,#61,
              1492 e0cb  jmp  y,$cb       5927  jmp(Y,'REENTER')                #52,#62,
              1493 011d  ld   [$1d]       5928  ld([vTmp])                      #53,#63,
                                          5929
                                          5930
                                          5931  #-----------------------------------------------------------------------
                                          5932  # sys_Divide_s16, x:s16 = x:s16 / y:s16, rem:s16 = x:s16 % y:s16
                                          5933  # x:args0:1 y:args2:3 rem:args4:5 mask:args6:7
                                          5934  #
                                          5935  # Written by at67 for early ROMvX0.
                                          5936
                                          5937
                                          5938  label('sys_Divide_s16')
sys_Divide_s16:
              1494 3080  anda $80,x       5939  anda(0x80,X)                    #18, X = AC & 0x80
              1495 8128  adda [$28]       5940  adda([sysArgs+4])               #19, AC = rem.lo <<1
              1496 c228  st   [$28]       5941  st([sysArgs+4])                 #20, rem.lo = AC
              1497 0500  ld   [x]         5942  ld([X])                         #21, AC = X >>7
              1498 8129  adda [$29]       5943  adda([sysArgs+5])               #22,
              1499 8129  adda [$29]       5944  adda([sysArgs+5])               #23,
              149a c229  st   [$29]       5945  st([sysArgs+5])                 #24, rem.hi = rem.hi <<1 + AC
              149b 0125  ld   [$25]       5946  ld([sysArgs+1])                 #25,
              149c 2080  anda $80         5947  anda(0x80)                      #26, sign of x
                                          5948  beq('.sys_ds16_29')             #27, if x >= 0
              149d f0a2  beq  .sys_ds16_29
              149e 0128  ld   [$28]       5949  ld([sysArgs+4])                 #28,
              149f 8001  adda $01         5950  adda(1)                         #29,
                                          5951  bra('.sys_ds16_32')             #30,
              14a0 fca5  bra  .sys_ds16_32
              14a1 c228  st   [$28]       5952  st([sysArgs+4])                 #31, rem.lo++
                                          5953
                                          5954  label('.sys_ds16_29')
.sys_ds16_29: 14a2 0200  nop              5955  nop()                           #29
              14a3 0200  nop              5956  nop()                           #30
              14a4 0200  nop              5957  nop()                           #31
                                          5958  label('.sys_ds16_32')
.sys_ds16_32: 14a5 0124  ld   [$24]       5959  ld([sysArgs+0])                 #32, AC = x.lo
              14a6 3080  anda $80,x       5960  anda(0x80,X)                    #33, X = AC & 0x80
              14a7 8124  adda [$24]       5961  adda([sysArgs+0])               #34, AC = x.lo <<1
              14a8 c224  st   [$24]       5962  st([sysArgs+0])                 #35, x.lo = AC
              14a9 0500  ld   [x]         5963  ld([X])                         #36, AC = X >>7
              14aa 8125  adda [$25]       5964  adda([sysArgs+1])               #37,
              14ab 8125  adda [$25]       5965  adda([sysArgs+1])               #38,
              14ac c225  st   [$25]       5966  st([sysArgs+1])                 #39, x.hi = x.hi <<1 + AC
              14ad 0128  ld   [$28]       5967  ld([sysArgs+4])                 #40, load rem.lo
                                          5968  blt('.sys_ds16_43')             #41, check for borrow
              14ae e8b3  blt  .sys_ds16_43
              14af a126  suba [$26]       5969  suba([sysArgs+2])               #42,
              14b0 c218  st   [$18]       5970  st([vAC])                       #43, vAC.lo = rem.lo - y.lo
                                          5971  bra('.sys_ds16_46')             #44,
              14b1 fcb6  bra  .sys_ds16_46
              14b2 4126  ora  [$26]       5972  ora([sysArgs+2])                #45,
                                          5973
                                          5974  label('.sys_ds16_43')
.sys_ds16_43: 14b3 c218  st   [$18]       5975  st([vAC])                       #43,
              14b4 2126  anda [$26]       5976  anda([sysArgs+2])               #44,
              14b5 0200  nop              5977  nop()                           #45,
                                          5978  label('.sys_ds16_46')
.sys_ds16_46: 14b6 3080  anda $80,x       5979  anda(0x80,X)                    #46, move borrow to bit 0
              14b7 0129  ld   [$29]       5980  ld([sysArgs+5])                 #47, load rem.hi
              14b8 a500  suba [x]         5981  suba([X])                       #48,
              14b9 a127  suba [$27]       5982  suba([sysArgs+3])               #49,
              14ba c219  st   [$19]       5983  st([vAC+1])                     #50, vAC.hi = rem.hi - y.hi
                                          5984  blt('.sys_ds16_53')             #51,
              14bb e8c5  blt  .sys_ds16_53
              14bc 00dc  ld   $dc         5985  ld(-72/2)                       #52
              14bd 0118  ld   [$18]       5986  ld([vAC])                       #53,
              14be c228  st   [$28]       5987  st([sysArgs+4])                 #54,
              14bf 0119  ld   [$19]       5988  ld([vAC+1])                     #55,
              14c0 c229  st   [$29]       5989  st([sysArgs+5])                 #56, rem = vAC
              14c1 0124  ld   [$24]       5990  ld([sysArgs+0])                 #57,
              14c2 8001  adda $01         5991  adda(1)                         #58,
              14c3 c224  st   [$24]       5992  st([sysArgs+0])                 #59, x.lo++
              14c4 00d8  ld   $d8         5993  ld(-80/2)                       #60,
                                          5994
                                          5995  label('.sys_ds16_53')
.sys_ds16_53: 14c5 c21d  st   [$1d]       5996  st([vTmp])                      #53, #61,
              14c6 012a  ld   [$2a]       5997  ld([sysArgs+6])                 #54, #62, AC = mask.lo
              14c7 3080  anda $80,x       5998  anda(0x80,X)                    #55, #63, X = AC & 0x80
              14c8 812a  adda [$2a]       5999  adda([sysArgs+6])               #56, #64, AC = mask.lo <<1
              14c9 c22a  st   [$2a]       6000  st([sysArgs+6])                 #57, #65, mask.lo = AC
              14ca 0500  ld   [x]         6001  ld([X])                         #58, #66, AC = X >>7
              14cb 812b  adda [$2b]       6002  adda([sysArgs+7])               #59, #67,
              14cc 812b  adda [$2b]       6003  adda([sysArgs+7])               #60, #68,
              14cd c22b  st   [$2b]       6004  st([sysArgs+7])                 #61, #69, mask.hi = mask.hi <<1 + AC
              14ce 412a  ora  [$2a]       6005  ora([sysArgs+6])                #62, #70,
                                          6006  bne('.sys_ds16_65')             #63, #71,
              14cf ecd6  bne  .sys_ds16_65
              14d0 0116  ld   [$16]       6007  ld([vPC])                       #64, #72,
              14d1 0200  nop              6008  nop()                           #65, #73,
              14d2 0200  nop              6009  nop()                           #66, #74,
              14d3 1403  ld   $03,y       6010  ld(hi('REENTER'),Y)             #67, #75,
              14d4 e0cb  jmp  y,$cb       6011  jmp(Y,'REENTER')                #68, #76,
              14d5 011d  ld   [$1d]       6012  ld([vTmp])                      #69, #77,
                                          6013  label('.sys_ds16_65')
.sys_ds16_65: 14d6 a002  suba $02         6014  suba(2)                         #65, #73,
              14d7 c216  st   [$16]       6015  st([vPC])                       #66, #74, restart SYS function
              14d8 1403  ld   $03,y       6016  ld(hi('REENTER'),Y)             #67, #75,
              14d9 e0cb  jmp  y,$cb       6017  jmp(Y,'REENTER')                #68, #76,
              14da 011d  ld   [$1d]       6018  ld([vTmp])                      #69, #77,
                                          6019
                                          6020
                                          6021  #-----------------------------------------------------------------------
                                          6022  #
                                          6023  #  End of core
                                          6024  #
                                          6025  #-----------------------------------------------------------------------
                                          6026
              14db 0200  nop              6027  align(0x100)
              14dc 0200  nop
              14dd 0200  nop
              * 36 times
              14ff 0200  nop              6027  align(0x100)
                                          6028
                                          6029  disableListing()
                                          ;+-----------------------------------+
                                          ;| Core/Reset_v5.gcl                 |
                                          ;+-----------------------------------+
              1500 dc00  st   $00,[y,x++] ;'\x00'
              1501 dc00  st   $00,[y,x++] ;'\x00'
              1502 dc00  st   $00,[y,x++] ;'\x00'
              1503 dc00  st   $00,[y,x++] ;'\x00'
              1504 dc00  st   $00,[y,x++] ;'\x00'
              1505 dc00  st   $00,[y,x++] ;'\x00'
              1506 dc00  st   $00,[y,x++] ;'\x00'
              1507 dc00  st   $00,[y,x++] ;'\x00'
              1508 0000  ld   $00
              1509 c218  st   [$18]
              150a 0000  ld   $00
              150b 1431  ld   $31,y
              150c e062  jmp  y,$62
              150d c219  st   [$19]
Reset:        150e 0002  ld   $02         ;| RAM segment address (high byte first)
              150f 0000  ld   $00         ;|
              1510 00f3  ld   $f3         ;| Length (1..256)
              1511 0011  ld   $11         ;0200 LDWI
              1512 00f8  ld   $f8
              1513 0001  ld   $01
              1514 002b  ld   $2b         ;0203 STW
              1515 0030  ld   $30         ;0203 'CtrlBits'
              1516 00cd  ld   $cd         ;0205 DEF
              1517 0075  ld   $75
              1518 0075  ld   $75         ;0207 PUSH
              1519 001a  ld   $1a         ;0208 LD
              151a 0001  ld   $01
              151b 00e6  ld   $e6         ;020a SUBI
              151c 0001  ld   $01
              151d 0082  ld   $82         ;020c ANDI
              151e 00ff  ld   $ff
              151f 00e3  ld   $e3         ;020e ADDI
              1520 0001  ld   $01
              1521 002b  ld   $2b         ;0210 STW
              1522 0032  ld   $32         ;0210 'i'
              1523 0011  ld   $11         ;0212 LDWI
              1524 0009  ld   $09
              1525 000b  ld   $0b
              1526 002b  ld   $2b         ;0215 STW
              1527 0022  ld   $22         ;0215 '_sysFn'
              1528 0059  ld   $59         ;0217 LDI
              1529 00aa  ld   $aa
              152a 005e  ld   $5e         ;0219 ST
              152b 007c  ld   $7c
              152c 0059  ld   $59         ;021b LDI
              152d 007c  ld   $7c
              152e 00b4  ld   $b4         ;021d SYS
              152f 00fa  ld   $fa
              1530 001a  ld   $1a         ;021f LD
              1531 007c  ld   $7c
              1532 008c  ld   $8c         ;0221 XORI
              1533 00aa  ld   $aa
              1534 0035  ld   $35         ;0223 BCC
              1535 003f  ld   $3f         ;0224 EQ
              1536 002a  ld   $2a
              1537 0059  ld   $59         ;0226 LDI
              1538 0000  ld   $00
              1539 00f0  ld   $f0         ;0228 POKE
              153a 0030  ld   $30         ;0228 'CtrlBits'
              153b 0090  ld   $90         ;022a BRA
              153c 0054  ld   $54
              153d 0011  ld   $11         ;022c LDWI
              153e 0024  ld   $24
              153f 0080  ld   $80
              1540 002b  ld   $2b         ;022f STW
              1541 0034  ld   $34         ;022f 'q'
              1542 0059  ld   $59         ;0231 LDI
              1543 00bc  ld   $bc
              1544 00b4  ld   $b4         ;0233 SYS
              1545 00fa  ld   $fa
              1546 0021  ld   $21         ;0235 LDW
              1547 0034  ld   $34         ;0235 'q'
              1548 00ad  ld   $ad         ;0237 PEEK
              1549 008c  ld   $8c         ;0238 XORI
              154a 00ff  ld   $ff
              154b 00f0  ld   $f0         ;023a POKE
              154c 0034  ld   $34         ;023a 'q'
              154d 002b  ld   $2b         ;023c STW
              154e 0024  ld   $24         ;023c '_sysArgs0'
              154f 008c  ld   $8c         ;023e XORI
              1550 00ff  ld   $ff
              1551 00f0  ld   $f0         ;0240 POKE
              1552 0034  ld   $34         ;0240 'q'
              1553 00fc  ld   $fc         ;0242 XORW
              1554 0024  ld   $24         ;0242 '_sysArgs0'
              1555 0035  ld   $35         ;0244 BCC
              1556 003f  ld   $3f         ;0245 EQ
              1557 004f  ld   $4f
              1558 0059  ld   $59         ;0247 LDI
              1559 0031  ld   $31
              155a 002b  ld   $2b         ;0249 STW
              155b 0036  ld   $36         ;0249 'Char'
              155c 00cf  ld   $cf         ;024b CALL
              155d 0038  ld   $38         ;024b 'PrintChar'
              155e 0059  ld   $59         ;024d LDI
              155f 0070  ld   $70
              1560 002b  ld   $2b         ;024f STW
              1561 0032  ld   $32         ;024f 'i'
              1562 0011  ld   $11         ;0251 LDWI
              1563 007c  ld   $7c
              1564 0080  ld   $80
              1565 00b4  ld   $b4         ;0254 SYS
              1566 00fa  ld   $fa
              1567 0011  ld   $11         ;0256 LDWI
              1568 002f  ld   $2f
              1569 002f  ld   $2f
              156a 002b  ld   $2b         ;0259 STW
              156b 0036  ld   $36         ;0259 'Char'
              156c 0021  ld   $21         ;025b LDW
              156d 0032  ld   $32         ;025b 'i'
              156e 0093  ld   $93         ;025d INC
              156f 0036  ld   $36         ;025d 'Char'
              1570 00e6  ld   $e6         ;025f SUBI
              1571 0028  ld   $28
              1572 0035  ld   $35         ;0261 BCC
              1573 0053  ld   $53         ;0262 GE
              1574 005b  ld   $5b
              1575 00e3  ld   $e3         ;0264 ADDI
              1576 0028  ld   $28
              1577 0093  ld   $93         ;0266 INC
              1578 0037  ld   $37         ;0266 'Char'+1
              1579 00e6  ld   $e6         ;0268 SUBI
              157a 0004  ld   $04
              157b 0035  ld   $35         ;026a BCC
              157c 0053  ld   $53         ;026b GE
              157d 0064  ld   $64
              157e 00cf  ld   $cf         ;026d CALL
              157f 0038  ld   $38         ;026d 'PrintChar'
              1580 001a  ld   $1a         ;026f LD
              1581 0037  ld   $37         ;026f 'Char'+1
              1582 002b  ld   $2b         ;0271 STW
              1583 0036  ld   $36         ;0271 'Char'
              1584 00cf  ld   $cf         ;0273 CALL
              1585 0038  ld   $38         ;0273 'PrintChar'
              1586 0063  ld   $63         ;0275 POP
              1587 00ff  ld   $ff         ;0276 RET
              1588 002b  ld   $2b         ;0277 STW
              1589 003a  ld   $3a         ;0277 'CheckMemory'
              158a 00cd  ld   $cd         ;0279 DEF
              158b 009d  ld   $9d
              158c 0075  ld   $75         ;027b PUSH
              158d 002b  ld   $2b         ;027c STW
              158e 003c  ld   $3c         ;027c 'Text'
              158f 0021  ld   $21         ;027e LDW
              1590 003c  ld   $3c         ;027e 'Text'
              1591 00ad  ld   $ad         ;0280 PEEK
              1592 0035  ld   $35         ;0281 BCC
              1593 003f  ld   $3f         ;0282 EQ
              1594 009b  ld   $9b
              1595 002b  ld   $2b         ;0284 STW
              1596 0036  ld   $36         ;0284 'Char'
              1597 008c  ld   $8c         ;0286 XORI
              1598 000a  ld   $0a
              1599 0035  ld   $35         ;0288 BCC
              159a 003f  ld   $3f         ;0289 EQ
              159b 008d  ld   $8d
              159c 00cf  ld   $cf         ;028b CALL
              159d 0038  ld   $38         ;028b 'PrintChar'
              159e 0090  ld   $90         ;028d BRA
              159f 0097  ld   $97
              15a0 0059  ld   $59         ;028f LDI
              15a1 0002  ld   $02
              15a2 005e  ld   $5e         ;0291 ST
              15a3 003e  ld   $3e         ;0291 'Pos'
              15a4 001a  ld   $1a         ;0293 LD
              15a5 003f  ld   $3f         ;0293 'Pos'+1
              15a6 00e3  ld   $e3         ;0295 ADDI
              15a7 0008  ld   $08
              15a8 005e  ld   $5e         ;0297 ST
              15a9 003f  ld   $3f         ;0297 'Pos'+1
              15aa 0093  ld   $93         ;0299 INC
              15ab 003c  ld   $3c         ;0299 'Text'
              15ac 0090  ld   $90         ;029b BRA
              15ad 007c  ld   $7c
              15ae 0063  ld   $63         ;029d POP
              15af 00ff  ld   $ff         ;029e RET
              15b0 002b  ld   $2b         ;029f STW
              15b1 0040  ld   $40         ;029f 'PrintS'
              15b2 00cd  ld   $cd         ;02a1 DEF
              15b3 00ec  ld   $ec
              15b4 001a  ld   $1a         ;02a3 LD
              15b5 0036  ld   $36         ;02a3 'Char'
              15b6 00e6  ld   $e6         ;02a5 SUBI
              15b7 0052  ld   $52
              15b8 0035  ld   $35         ;02a7 BCC
              15b9 0053  ld   $53         ;02a8 GE
              15ba 00b1  ld   $b1
              15bb 00e3  ld   $e3         ;02aa ADDI
              15bc 0032  ld   $32
              15bd 002b  ld   $2b         ;02ac STW
              15be 0032  ld   $32         ;02ac 'i'
              15bf 0011  ld   $11         ;02ae LDWI
              15c0 0000  ld   $00
              15c1 0007  ld   $07
              15c2 0090  ld   $90         ;02b1 BRA
              15c3 00b6  ld   $b6
              15c4 002b  ld   $2b         ;02b3 STW
              15c5 0032  ld   $32         ;02b3 'i'
              15c6 0011  ld   $11         ;02b5 LDWI
              15c7 0000  ld   $00
              15c8 0008  ld   $08
              15c9 002b  ld   $2b         ;02b8 STW
              15ca 0042  ld   $42         ;02b8 'j'
              15cb 0021  ld   $21         ;02ba LDW
              15cc 0032  ld   $32         ;02ba 'i'
              15cd 00e9  ld   $e9         ;02bc LSLW
              15ce 00e9  ld   $e9         ;02bd LSLW
              15cf 0099  ld   $99         ;02be ADDW
              15d0 0032  ld   $32         ;02be 'i'
              15d1 0099  ld   $99         ;02c0 ADDW
              15d2 0042  ld   $42         ;02c0 'j'
              15d3 002b  ld   $2b         ;02c2 STW
              15d4 0042  ld   $42         ;02c2 'j'
              15d5 0011  ld   $11         ;02c4 LDWI
              15d6 00e1  ld   $e1
              15d7 0004  ld   $04
              15d8 002b  ld   $2b         ;02c7 STW
              15d9 0022  ld   $22         ;02c7 '_sysFn'
              15da 0011  ld   $11         ;02c9 LDWI
              15db 0020  ld   $20
              15dc 003f  ld   $3f
              15dd 002b  ld   $2b         ;02cc STW
              15de 0024  ld   $24
              15df 0021  ld   $21         ;02ce LDW
              15e0 003e  ld   $3e         ;02ce 'Pos'
              15e1 002b  ld   $2b         ;02d0 STW
              15e2 0028  ld   $28
              15e3 00e3  ld   $e3         ;02d2 ADDI
              15e4 0006  ld   $06
              15e5 002b  ld   $2b         ;02d4 STW
              15e6 003e  ld   $3e         ;02d4 'Pos'
              15e7 0059  ld   $59         ;02d6 LDI
              15e8 0005  ld   $05
              15e9 002b  ld   $2b         ;02d8 STW
              15ea 0032  ld   $32         ;02d8 'i'
              15eb 0021  ld   $21         ;02da LDW
              15ec 0042  ld   $42         ;02da 'j'
              15ed 007f  ld   $7f         ;02dc LUP
              15ee 0000  ld   $00
              15ef 005e  ld   $5e         ;02de ST
              15f0 0026  ld   $26
              15f1 00b4  ld   $b4         ;02e0 SYS
              15f2 00cb  ld   $cb
              15f3 0093  ld   $93         ;02e2 INC
              15f4 0042  ld   $42         ;02e2 'j'
              15f5 0093  ld   $93         ;02e4 INC
              15f6 0028  ld   $28
              15f7 0021  ld   $21         ;02e6 LDW
              15f8 0032  ld   $32         ;02e6 'i'
              15f9 00e6  ld   $e6         ;02e8 SUBI
              15fa 0001  ld   $01
              15fb fe00  bra  ac          ;+-----------------------------------+
              15fc fcfd  bra  $15fd       ;|                                   |
              15fd 1404  ld   $04,y       ;| Trampoline for page $1500 lookups |
              15fe e068  jmp  y,$68       ;|                                   |
              15ff c218  st   [$18]       ;+-----------------------------------+
              1600 0035  ld   $35         ;02ea BCC
              1601 004d  ld   $4d         ;02eb GT
              1602 00d6  ld   $d6
              1603 00ff  ld   $ff         ;02ed RET
              1604 002b  ld   $2b         ;02ee STW
              1605 0038  ld   $38         ;02ee 'PrintChar'
              1606 0093  ld   $93         ;02f0 INC
              1607 001b  ld   $1b
              1608 00ff  ld   $ff         ;02f2 RET
              1609 0003  ld   $03         ;| RAM segment address (high byte first)
              160a 0000  ld   $00         ;|
              160b 00ea  ld   $ea         ;| Length (1..256)
              160c 00cd  ld   $cd         ;0300 DEF
              160d 0037  ld   $37
              160e 002b  ld   $2b         ;0302 STW
              160f 0032  ld   $32         ;0302 'i'
              1610 0088  ld   $88         ;0304 ORI
              1611 00ff  ld   $ff
              1612 008c  ld   $8c         ;0306 XORI
              1613 00ff  ld   $ff
              1614 0088  ld   $88         ;0308 ORI
              1615 00fa  ld   $fa
              1616 002b  ld   $2b         ;030a STW
              1617 0044  ld   $44         ;030a 'p'
              1618 001a  ld   $1a         ;030c LD
              1619 0032  ld   $32         ;030c 'i'
              161a 002b  ld   $2b         ;030e STW
              161b 0032  ld   $32         ;030e 'i'
              161c 0059  ld   $59         ;0310 LDI
              161d 0000  ld   $00
              161e 00f0  ld   $f0         ;0312 POKE
              161f 0044  ld   $44         ;0312 'p'
              1620 0093  ld   $93         ;0314 INC
              1621 0044  ld   $44         ;0314 'p'
              1622 0059  ld   $59         ;0316 LDI
              1623 0003  ld   $03
              1624 00f0  ld   $f0         ;0318 POKE
              1625 0044  ld   $44         ;0318 'p'
              1626 0093  ld   $93         ;031a INC
              1627 0044  ld   $44         ;031a 'p'
              1628 0011  ld   $11         ;031c LDWI
              1629 0000  ld   $00
              162a 0009  ld   $09
              162b 0099  ld   $99         ;031f ADDW
              162c 0032  ld   $32         ;031f 'i'
              162d 007f  ld   $7f         ;0321 LUP
              162e 0000  ld   $00
              162f 00f0  ld   $f0         ;0323 POKE
              1630 0044  ld   $44         ;0323 'p'
              1631 0093  ld   $93         ;0325 INC
              1632 0044  ld   $44         ;0325 'p'
              1633 0011  ld   $11         ;0327 LDWI
              1634 0000  ld   $00
              1635 0009  ld   $09
              1636 0099  ld   $99         ;032a ADDW
              1637 0032  ld   $32         ;032a 'i'
              1638 007f  ld   $7f         ;032c LUP
              1639 0001  ld   $01
              163a 00f0  ld   $f0         ;032e POKE
              163b 0044  ld   $44         ;032e 'p'
              163c 0093  ld   $93         ;0330 INC
              163d 0044  ld   $44         ;0330 'p'
              163e 00f0  ld   $f0         ;0332 POKE
              163f 0044  ld   $44         ;0332 'p'
              1640 0093  ld   $93         ;0334 INC
              1641 0044  ld   $44         ;0334 'p'
              1642 00f0  ld   $f0         ;0336 POKE
              1643 0044  ld   $44         ;0336 'p'
              1644 00ff  ld   $ff         ;0338 RET
              1645 002b  ld   $2b         ;0339 STW
              1646 0046  ld   $46         ;0339 'SetupChannel'
              1647 00cd  ld   $cd         ;033b DEF
              1648 00c9  ld   $c9
              1649 0075  ld   $75         ;033d PUSH
              164a 0059  ld   $59         ;033e LDI
              164b 0010  ld   $10
              164c 002b  ld   $2b         ;0340 STW
              164d 0042  ld   $42         ;0340 'j'
              164e 0059  ld   $59         ;0342 LDI
              164f 000a  ld   $0a
              1650 002b  ld   $2b         ;0344 STW
              1651 0032  ld   $32         ;0344 'i'
              1652 00cf  ld   $cf         ;0346 CALL
              1653 0048  ld   $48         ;0346 'SendOnesToCard'
              1654 0021  ld   $21         ;0348 LDW
              1655 0032  ld   $32         ;0348 'i'
              1656 00e6  ld   $e6         ;034a SUBI
              1657 0001  ld   $01
              1658 0035  ld   $35         ;034c BCC
              1659 004d  ld   $4d         ;034d GT
              165a 0042  ld   $42
              165b 0011  ld   $11         ;034f LDWI
              165c 0009  ld   $09
              165d 000b  ld   $0b
              165e 002b  ld   $2b         ;0352 STW
              165f 0022  ld   $22         ;0352 '_sysFn'
              1660 0011  ld   $11         ;0354 LDWI
              1661 0078  ld   $78
              1662 0080  ld   $80
              1663 00b4  ld   $b4         ;0357 SYS
              1664 00fa  ld   $fa
              1665 00cd  ld   $cd         ;0359 DEF
              1666 0061  ld   $61
              1667 00ff  ld   $ff         ;035b 255
              1668 00ff  ld   $ff         ;035c 255
              1669 0040  ld   $40         ;035d 64
              166a 0000  ld   $00         ;035e 0
              166b 0000  ld   $00         ;035f 0
              166c 0000  ld   $00         ;0360 0
              166d 0000  ld   $00         ;0361 0
              166e 0095  ld   $95         ;0362 149
              166f 002b  ld   $2b         ;0363 STW
              1670 0044  ld   $44         ;0363 'p'
              1671 0059  ld   $59         ;0365 LDI
              1672 0081  ld   $81
              1673 002b  ld   $2b         ;0367 STW
              1674 0034  ld   $34         ;0367 'q'
              1675 0059  ld   $59         ;0369 LDI
              1676 0008  ld   $08
              1677 002b  ld   $2b         ;036b STW
              1678 0032  ld   $32         ;036b 'i'
              1679 0021  ld   $21         ;036d LDW
              167a 0044  ld   $44         ;036d 'p'
              167b 00ad  ld   $ad         ;036f PEEK
              167c 0093  ld   $93         ;0370 INC
              167d 0044  ld   $44         ;0370 'p'
              167e 00f0  ld   $f0         ;0372 POKE
              167f 0034  ld   $34         ;0372 'q'
              1680 0093  ld   $93         ;0374 INC
              1681 0034  ld   $34         ;0374 'q'
              1682 0021  ld   $21         ;0376 LDW
              1683 0032  ld   $32         ;0376 'i'
              1684 00e6  ld   $e6         ;0378 SUBI
              1685 0001  ld   $01
              1686 0035  ld   $35         ;037a BCC
              1687 004d  ld   $4d         ;037b GT
              1688 0069  ld   $69
              1689 0059  ld   $59         ;037d LDI
              168a 0081  ld   $81
              168b 002b  ld   $2b         ;037f STW
              168c 0024  ld   $24         ;037f '_sysArgs0'
              168d 00e3  ld   $e3         ;0381 ADDI
              168e 0008  ld   $08
              168f 002b  ld   $2b         ;0383 STW
              1690 0026  ld   $26         ;0383 '_sysArgs2'
              1691 0011  ld   $11         ;0385 LDWI
              1692 0015  ld   $15
              1693 000b  ld   $0b
              1694 002b  ld   $2b         ;0388 STW
              1695 0022  ld   $22         ;0388 '_sysFn'
              1696 00b4  ld   $b4         ;038a SYS
              1697 00cb  ld   $cb
              1698 0059  ld   $59         ;038c LDI
              1699 0010  ld   $10
              169a 002b  ld   $2b         ;038e STW
              169b 0032  ld   $32         ;038e 'i'
              169c 00cf  ld   $cf         ;0390 CALL
              169d 0048  ld   $48         ;0390 'SendOnesToCard'
              169e 0082  ld   $82         ;0392 ANDI
              169f 0080  ld   $80
              16a0 0035  ld   $35         ;0394 BCC
              16a1 003f  ld   $3f         ;0395 EQ
              16a2 009c  ld   $9c
              16a3 0021  ld   $21         ;0397 LDW
              16a4 0032  ld   $32         ;0397 'i'
              16a5 00e6  ld   $e6         ;0399 SUBI
              16a6 0001  ld   $01
              16a7 0035  ld   $35         ;039b BCC
              16a8 004d  ld   $4d         ;039c GT
              16a9 008c  ld   $8c
              16aa 0011  ld   $11         ;039e LDWI
              16ab 0009  ld   $09
              16ac 000b  ld   $0b
              16ad 002b  ld   $2b         ;03a1 STW
              16ae 0022  ld   $22         ;03a1 '_sysFn'
              16af 0011  ld   $11         ;03a3 LDWI
              16b0 007c  ld   $7c
              16b1 0080  ld   $80
              16b2 00b4  ld   $b4         ;03a6 SYS
              16b3 00fa  ld   $fa
              16b4 001a  ld   $1a         ;03a8 LD
              16b5 002a  ld   $2a
              16b6 0035  ld   $35         ;03aa BCC
              16b7 003f  ld   $3f         ;03ab EQ
              16b8 00c7  ld   $c7
              16b9 008c  ld   $8c         ;03ad XORI
              16ba 0001  ld   $01
              16bb 0035  ld   $35         ;03af BCC
              16bc 0072  ld   $72         ;03b0 NE
              16bd 00c0  ld   $c0
              16be 0011  ld   $11         ;03b2 LDWI
              16bf 00e3  ld   $e3
              16c0 0017  ld   $17
              16c1 002b  ld   $2b         ;03b5 STW
              16c2 0024  ld   $24         ;03b5 '_sysArgs0'
              16c3 0011  ld   $11         ;03b7 LDWI
              16c4 0000  ld   $00
              16c5 0002  ld   $02
              16c6 002b  ld   $2b         ;03ba STW
              16c7 001a  ld   $1a         ;03ba '_vLR'
              16c8 0059  ld   $59         ;03bc LDI
              16c9 00ad  ld   $ad
              16ca 002b  ld   $2b         ;03be STW
              16cb 0022  ld   $22         ;03be '_sysFn'
              16cc 00b4  ld   $b4         ;03c0 SYS
              16cd 00e2  ld   $e2
              16ce 0021  ld   $21         ;03c2 LDW
              16cf 0042  ld   $42         ;03c2 'j'
              16d0 00e6  ld   $e6         ;03c4 SUBI
              16d1 0001  ld   $01
              16d2 0035  ld   $35         ;03c6 BCC
              16d3 004d  ld   $4d         ;03c7 GT
              16d4 003e  ld   $3e
              16d5 0063  ld   $63         ;03c9 POP
              16d6 00ff  ld   $ff         ;03ca RET
              16d7 002b  ld   $2b         ;03cb STW
              16d8 004a  ld   $4a         ;03cb 'CheckCard'
              16d9 00cd  ld   $cd         ;03cd DEF
              16da 00e3  ld   $e3
              16db 0059  ld   $59         ;03cf LDI
              16dc 00ff  ld   $ff
              16dd 005e  ld   $5e         ;03d1 ST
              16de 002a  ld   $2a
              16df 0059  ld   $59         ;03d3 LDI
              16e0 002a  ld   $2a
              16e1 002b  ld   $2b         ;03d5 STW
              16e2 0024  ld   $24         ;03d5 '_sysArgs0'
              16e3 00e3  ld   $e3         ;03d7 ADDI
              16e4 0001  ld   $01
              16e5 002b  ld   $2b         ;03d9 STW
              16e6 0026  ld   $26         ;03d9 '_sysArgs2'
              16e7 0011  ld   $11         ;03db LDWI
              16e8 0015  ld   $15
              16e9 000b  ld   $0b
              16ea 002b  ld   $2b         ;03de STW
              16eb 0022  ld   $22         ;03de '_sysFn'
              16ec 00b4  ld   $b4         ;03e0 SYS
              16ed 00cb  ld   $cb
              16ee 001a  ld   $1a         ;03e2 LD
              16ef 002a  ld   $2a
              16f0 00ff  ld   $ff         ;03e4 RET
              16f1 002b  ld   $2b         ;03e5 STW
              16f2 0048  ld   $48         ;03e5 'SendOnesToCard'
              16f3 0093  ld   $93         ;03e7 INC
              16f4 001b  ld   $1b
              16f5 00ff  ld   $ff         ;03e9 RET
              16f6 0004  ld   $04         ;| RAM segment address (high byte first)
              16f7 0000  ld   $00         ;|
              16f8 00d6  ld   $d6         ;| Length (1..256)
              16f9 0011  ld   $11         ;0400 LDWI
              16fa 000f  ld   $0f
              16fb fe00  bra  ac          ;+-----------------------------------+
              16fc fcfd  bra  $16fd       ;|                                   |
              16fd 1404  ld   $04,y       ;| Trampoline for page $1600 lookups |
              16fe e068  jmp  y,$68       ;|                                   |
              16ff c218  st   [$18]       ;+-----------------------------------+
              1700 000b  ld   $0b
              1701 002b  ld   $2b         ;0403 STW
              1702 0022  ld   $22
              1703 0059  ld   $59         ;0405 LDI
              1704 0000  ld   $00
              1705 00b4  ld   $b4         ;0407 SYS
              1706 00f5  ld   $f5
              1707 0011  ld   $11         ;0409 LDWI
              1708 0012  ld   $12
              1709 000b  ld   $0b
              170a 002b  ld   $2b         ;040c STW
              170b 0022  ld   $22
              170c 0059  ld   $59         ;040e LDI
              170d 0000  ld   $00
              170e 00b4  ld   $b4         ;0410 SYS
              170f 00f7  ld   $f7
              1710 00b4  ld   $b4         ;0412 SYS
              1711 00f7  ld   $f7
              1712 00b4  ld   $b4         ;0414 SYS
              1713 00f7  ld   $f7
              1714 00b4  ld   $b4         ;0416 SYS
              1715 00f7  ld   $f7
              1716 0011  ld   $11         ;0418 LDWI
              1717 0058  ld   $58
              1718 0001  ld   $01
              1719 00cf  ld   $cf         ;041b CALL
              171a 0046  ld   $46         ;041b 'SetupChannel'
              171b 0011  ld   $11         ;041d LDWI
              171c 0070  ld   $70
              171d 0002  ld   $02
              171e 00cf  ld   $cf         ;0420 CALL
              171f 0046  ld   $46         ;0420 'SetupChannel'
              1720 0011  ld   $11         ;0422 LDWI
              1721 0078  ld   $78
              1722 0003  ld   $03
              1723 00cf  ld   $cf         ;0425 CALL
              1724 0046  ld   $46         ;0425 'SetupChannel'
              1725 0011  ld   $11         ;0427 LDWI
              1726 007e  ld   $7e
              1727 0004  ld   $04
              1728 00cf  ld   $cf         ;042a CALL
              1729 0046  ld   $46         ;042a 'SetupChannel'
              172a 0011  ld   $11         ;042c LDWI
              172b 0000  ld   $00
              172c 0001  ld   $01
              172d 002b  ld   $2b         ;042f STW
              172e 0044  ld   $44         ;042f 'p'
              172f 0011  ld   $11         ;0431 LDWI
              1730 0000  ld   $00
              1731 0008  ld   $08
              1732 002b  ld   $2b         ;0434 STW
              1733 0034  ld   $34         ;0434 'q'
              1734 001a  ld   $1a         ;0436 LD
              1735 0035  ld   $35         ;0436 'q'+1
              1736 00f0  ld   $f0         ;0438 POKE
              1737 0044  ld   $44         ;0438 'p'
              1738 0093  ld   $93         ;043a INC
              1739 0044  ld   $44         ;043a 'p'
              173a 0059  ld   $59         ;043c LDI
              173b 0000  ld   $00
              173c 00f0  ld   $f0         ;043e POKE
              173d 0044  ld   $44         ;043e 'p'
              173e 0093  ld   $93         ;0440 INC
              173f 0044  ld   $44         ;0440 'p'
              1740 0093  ld   $93         ;0442 INC
              1741 0035  ld   $35         ;0442 'q'+1
              1742 0021  ld   $21         ;0444 LDW
              1743 0034  ld   $34         ;0444 'q'
              1744 0035  ld   $35         ;0446 BCC
              1745 004d  ld   $4d         ;0447 GT
              1746 0034  ld   $34
              1747 0011  ld   $11         ;0449 LDWI
              1748 0003  ld   $03
              1749 000b  ld   $0b
              174a 002b  ld   $2b         ;044c STW
              174b 0022  ld   $22         ;044c '_sysFn'
              174c 0059  ld   $59         ;044e LDI
              174d 0020  ld   $20
              174e 005e  ld   $5e         ;0450 ST
              174f 0025  ld   $25
              1750 0011  ld   $11         ;0452 LDWI
              1751 0000  ld   $00
              1752 0008  ld   $08
              1753 002b  ld   $2b         ;0455 STW
              1754 0044  ld   $44         ;0455 'p'
              1755 002b  ld   $2b         ;0457 STW
              1756 0026  ld   $26         ;0457 '_sysArgs2'
              1757 0059  ld   $59         ;0459 LDI
              1758 00a0  ld   $a0
              1759 005e  ld   $5e         ;045b ST
              175a 0024  ld   $24
              175b 00b4  ld   $b4         ;045d SYS
              175c 00f3  ld   $f3
              175d 0011  ld   $11         ;045f LDWI
              175e 0000  ld   $00
              175f 0001  ld   $01
              1760 0099  ld   $99         ;0462 ADDW
              1761 0044  ld   $44         ;0462 'p'
              1762 0035  ld   $35         ;0464 BCC
              1763 004d  ld   $4d         ;0465 GT
              1764 0053  ld   $53
              1765 001a  ld   $1a         ;0467 LD
              1766 002e  ld   $2e
              1767 0082  ld   $82         ;0469 ANDI
              1768 0080  ld   $80
              1769 0035  ld   $35         ;046b BCC
              176a 0072  ld   $72         ;046c NE
              176b 0070  ld   $70
              176c 005e  ld   $5e         ;046e ST
              176d 002e  ld   $2e
              176e 005e  ld   $5e         ;0470 ST
              176f 002d  ld   $2d
              1770 0059  ld   $59         ;0472 LDI
              1771 0009  ld   $09
              1772 005e  ld   $5e         ;0474 ST
              1773 002f  ld   $2f
              1774 0011  ld   $11         ;0476 LDWI
              1775 0014  ld   $14
              1776 0008  ld   $08
              1777 002b  ld   $2b         ;0479 STW
              1778 003e  ld   $3e         ;0479 'Pos'
              1779 00cd  ld   $cd         ;047b DEF
              177a 0089  ld   $89
              177b 002a  ld   $2a         ;047d '*'
              177c 002a  ld   $2a         ;047e '*'
              177d 002a  ld   $2a         ;047f '*'
              177e 0020  ld   $20         ;0480 ' '
              177f 0047  ld   $47         ;0481 'G'
              1780 0069  ld   $69         ;0482 'i'
              1781 0067  ld   $67         ;0483 'g'
              1782 0061  ld   $61         ;0484 'a'
              1783 0074  ld   $74         ;0485 't'
              1784 0072  ld   $72         ;0486 'r'
              1785 006f  ld   $6f         ;0487 'o'
              1786 006e  ld   $6e         ;0488 'n'
              1787 0020  ld   $20         ;0489 ' '
              1788 0000  ld   $00         ;048a 0
              1789 00cf  ld   $cf         ;048b CALL
              178a 0040  ld   $40         ;048b 'PrintS'
              178b 00cf  ld   $cf         ;048d CALL
              178c 003a  ld   $3a         ;048d 'CheckMemory'
              178d 00cd  ld   $cd         ;048f DEF
              178e 00b1  ld   $b1
              178f 004b  ld   $4b         ;0491 'K'
              1790 0020  ld   $20         ;0492 ' '
              1791 002a  ld   $2a         ;0493 '*'
              1792 002a  ld   $2a         ;0494 '*'
              1793 002a  ld   $2a         ;0495 '*'
              1794 0020  ld   $20         ;0496 ' '
              1795 000a  ld   $0a         ;0497 10
              1796 0020  ld   $20         ;0498 ' '
              1797 0054  ld   $54         ;0499 'T'
              1798 0054  ld   $54         ;049a 'T'
              1799 004c  ld   $4c         ;049b 'L'
              179a 0020  ld   $20         ;049c ' '
              179b 006d  ld   $6d         ;049d 'm'
              179c 0069  ld   $69         ;049e 'i'
              179d 0063  ld   $63         ;049f 'c'
              179e 0072  ld   $72         ;04a0 'r'
              179f 006f  ld   $6f         ;04a1 'o'
              17a0 0063  ld   $63         ;04a2 'c'
              17a1 006f  ld   $6f         ;04a3 'o'
              17a2 006d  ld   $6d         ;04a4 'm'
              17a3 0070  ld   $70         ;04a5 'p'
              17a4 0075  ld   $75         ;04a6 'u'
              17a5 0074  ld   $74         ;04a7 't'
              17a6 0065  ld   $65         ;04a8 'e'
              17a7 0072  ld   $72         ;04a9 'r'
              17a8 0020  ld   $20         ;04aa ' '
              17a9 0052  ld   $52         ;04ab 'R'
              17aa 004f  ld   $4f         ;04ac 'O'
              17ab 004d  ld   $4d         ;04ad 'M'
              17ac 0020  ld   $20         ;04ae ' '
              17ad 0076  ld   $76         ;04af 'v'
              17ae 0035  ld   $35         ;04b0 '5'
              17af 0061  ld   $61         ;04b1 'a'
              17b0 0000  ld   $00         ;04b2 0
              17b1 00cf  ld   $cf         ;04b3 CALL
              17b2 0040  ld   $40         ;04b3 'PrintS'
              17b3 0011  ld   $11         ;04b5 LDWI
              17b4 0000  ld   $00
              17b5 000b  ld   $0b
              17b6 002b  ld   $2b         ;04b8 STW
              17b7 0022  ld   $22         ;04b8 '_sysFn'
              17b8 0059  ld   $59         ;04ba LDI
              17b9 0001  ld   $01
              17ba 00b4  ld   $b4         ;04bc SYS
              17bb 00e6  ld   $e6
              17bc 0021  ld   $21         ;04be LDW
              17bd 0030  ld   $30         ;04be 'CtrlBits'
              17be 00ad  ld   $ad         ;04c0 PEEK
              17bf 0035  ld   $35         ;04c1 BCC
              17c0 003f  ld   $3f         ;04c2 EQ
              17c1 00c4  ld   $c4
              17c2 00cf  ld   $cf         ;04c4 CALL
              17c3 004a  ld   $4a         ;04c4 'CheckCard'
              17c4 0011  ld   $11         ;04c6 LDWI
              17c5 005b  ld   $5b
              17c6 0023  ld   $23
              17c7 002b  ld   $2b         ;04c9 STW
              17c8 0024  ld   $24         ;04c9 '_sysArgs0'
              17c9 0011  ld   $11         ;04cb LDWI
              17ca 0000  ld   $00
              17cb 0002  ld   $02
              17cc 002b  ld   $2b         ;04ce STW
              17cd 001a  ld   $1a         ;04ce '_vLR'
              17ce 0059  ld   $59         ;04d0 LDI
              17cf 00ad  ld   $ad
              17d0 002b  ld   $2b         ;04d2 STW
              17d1 0022  ld   $22         ;04d2 '_sysFn'
              17d2 00b4  ld   $b4         ;04d4 SYS
              17d3 00e2  ld   $e2
              17d4 0000  ld   $00         ;End of Core/Reset_v5.gcl, size 711
                                          ;+-----------------------------------+
                                          ;| Apps/CardBoot/CardBoot.gt1        |
                                          ;+-----------------------------------+
              17d5 dc52  st   $52,[y,x++] ;'R'
              17d6 dc65  st   $65,[y,x++] ;'e'
              17d7 dc73  st   $73,[y,x++] ;'s'
              17d8 dc65  st   $65,[y,x++] ;'e'
              17d9 dc74  st   $74,[y,x++] ;'t'
              17da dc00  st   $00,[y,x++] ;'\x00'
              17db dc00  st   $00,[y,x++] ;'\x00'
              17dc dc00  st   $00,[y,x++] ;'\x00'
              17dd 000e  ld   $0e
              17de c218  st   [$18]
              17df 0015  ld   $15
              17e0 1431  ld   $31,y
              17e1 e062  jmp  y,$62
              17e2 c219  st   [$19]
Boot:         17e3 0002  ld   $02
              17e4 0000  ld   $00
              17e5 004c  ld   $4c
              17e6 001a  ld   $1a
              17e7 0021  ld   $21
              17e8 00e6  ld   $e6
              17e9 0040  ld   $40
              17ea 0035  ld   $35
              17eb 0053  ld   $53
              17ec 000b  ld   $0b
              17ed 0021  ld   $21
              17ee 000e  ld   $0e
              17ef 00f3  ld   $f3
              17f0 0017  ld   $17
              17f1 0090  ld   $90
              17f2 0005  ld   $05
              17f3 0011  ld   $11
              17f4 0000  ld   $00
              17f5 007d  ld   $7d
              17f6 002b  ld   $2b
              17f7 0030  ld   $30
              17f8 0011  ld   $11
              17f9 00f9  ld   $f9
              17fa 0001  ld   $01
              17fb fe00  bra  ac          ;+-----------------------------------+
              17fc fcfd  bra  $17fd       ;|                                   |
              17fd 1404  ld   $04,y       ;| Trampoline for page $1700 lookups |
              17fe e068  jmp  y,$68       ;|                                   |
              17ff c218  st   [$18]       ;+-----------------------------------+
              1800 002b  ld   $2b
              1801 0032  ld   $32
              1802 0059  ld   $59
              1803 0000  ld   $00
              1804 0085  ld   $85
              1805 00b1  ld   $b1
              1806 0072  ld   $72
              1807 0059  ld   $59
              1808 0020  ld   $20
              1809 00f0  ld   $f0
              180a 0032  ld   $32
              180b 0011  ld   $11
              180c 00e8  ld   $e8
              180d 0001  ld   $01
              180e 002b  ld   $2b
              180f 0034  ld   $34
              1810 0059  ld   $59
              1811 007b  ld   $7b
              1812 00f0  ld   $f0
              1813 0034  ld   $34
              1814 0021  ld   $21
              1815 0034  ld   $34
              1816 00e3  ld   $e3
              1817 0002  ld   $02
              1818 002b  ld   $2b
              1819 0034  ld   $34
              181a 0011  ld   $11
              181b 00f0  ld   $f0
              181c 0001  ld   $01
              181d 00fc  ld   $fc
              181e 0034  ld   $34
              181f 0035  ld   $35
              1820 0072  ld   $72
              1821 0023  ld   $23
              1822 0011  ld   $11
              1823 007c  ld   $7c
              1824 0000  ld   $00
              1825 005e  ld   $5e
              1826 0027  ld   $27
              1827 0059  ld   $59
              1828 00ff  ld   $ff
              1829 002b  ld   $2b
              182a 0025  ld   $25
              182b 0059  ld   $59
              182c 0000  ld   $00
              182d 005e  ld   $5e
              182e 0024  ld   $24
              182f 00b4  ld   $b4
              1830 00f3  ld   $f3
              1831 0011  ld   $11
              1832 00a0  ld   $a0
              1833 0058  ld   $58
              1834 002b  ld   $2b
              1835 001a  ld   $1a
              1836 00ff  ld   $ff
              1837 0058  ld   $58
              1838 00a0  ld   $a0
              1839 0042  ld   $42
              183a 00cd  ld   $cd
              183b 00c8  ld   $c8
              183c 0075  ld   $75
              183d 0059  ld   $59
              183e 0000  ld   $00
              183f 002b  ld   $2b
              1840 0036  ld   $36
              1841 0059  ld   $59
              1842 000a  ld   $0a
              1843 002b  ld   $2b
              1844 0034  ld   $34
              1845 0085  ld   $85
              1846 00bc  ld   $bc
              1847 005d  ld   $5d
              1848 0021  ld   $21
              1849 0034  ld   $34
              184a 00e6  ld   $e6
              184b 0001  ld   $01
              184c 0035  ld   $35
              184d 004d  ld   $4d
              184e 00a7  ld   $a7
              184f 0085  ld   $85
              1850 00a2  ld   $a2
              1851 005d  ld   $5d
              1852 00cd  ld   $cd
              1853 00be  ld   $be
              1854 0040  ld   $40
              1855 0000  ld   $00
              1856 0000  ld   $00
              1857 0000  ld   $00
              1858 0000  ld   $00
              1859 0095  ld   $95
              185a 0085  ld   $85
              185b 00a2  ld   $a2
              185c 005f  ld   $5f
              185d 0085  ld   $85
              185e 00da  ld   $da
              185f 005f  ld   $5f
              1860 008c  ld   $8c
              1861 0001  ld   $01
              1862 0063  ld   $63
              1863 00ff  ld   $ff
              1864 00cd  ld   $cd
              1865 00dd  ld   $dd
              1866 0075  ld   $75
              1867 0085  ld   $85
              1868 00a2  ld   $a2
              1869 0058  ld   $58
              186a 0035  ld   $35
              186b 003f  ld   $3f
              186c 00db  ld   $db
              186d 0085  ld   $85
              186e 00af  ld   $af
              186f 005d  ld   $5d
              1870 001a  ld   $1a
              1871 000e  ld   $0e
              1872 00e6  ld   $e6
              1873 003c  ld   $3c
              1874 0035  ld   $35
              1875 0050  ld   $50
              1876 00cb  ld   $cb
              1877 0063  ld   $63
              1878 00ff  ld   $ff
              1879 0093  ld   $93
              187a 001b  ld   $1b
              187b 00ff  ld   $ff
              187c 0059  ld   $59
              187d 00a0  ld   $a0
              187e 0044  ld   $44
              187f 00cd  ld   $cd
              1880 00df  ld   $df
              1881 0075  ld   $75
              1882 0085  ld   $85
              1883 00a2  ld   $a2
              1884 005d  ld   $5d
              1885 00cd  ld   $cd
              1886 00ac  ld   $ac
              1887 0048  ld   $48
              1888 0000  ld   $00
              1889 0000  ld   $00
              188a 0001  ld   $01
              188b 00aa  ld   $aa
              188c 0087  ld   $87
              188d 0085  ld   $85
              188e 00a2  ld   $a2
              188f 005f  ld   $5f
              1890 0085  ld   $85
              1891 00da  ld   $da
              1892 005f  ld   $5f
              1893 008c  ld   $8c
              1894 00ff  ld   $ff
              1895 0035  ld   $35
              1896 003f  ld   $3f
              1897 00d9  ld   $d9
              1898 0021  ld   $21
              1899 0038  ld   $38
              189a 0082  ld   $82
              189b 0004  ld   $04
              189c 0035  ld   $35
              189d 003f  ld   $3f
              189e 00c4  ld   $c4
              189f 0059  ld   $59
              18a0 0001  ld   $01
              18a1 002b  ld   $2b
              18a2 0036  ld   $36
              18a3 0090  ld   $90
              18a4 00d9  ld   $d9
              18a5 0085  ld   $85
              18a6 00bc  ld   $bc
              18a7 005d  ld   $5d
              18a8 0085  ld   $85
              18a9 00bc  ld   $bc
              18aa 005d  ld   $5d
              18ab 0085  ld   $85
              18ac 00bc  ld   $bc
              18ad 005d  ld   $5d
              18ae 0085  ld   $85
              18af 00bc  ld   $bc
              18b0 005d  ld   $5d
              18b1 008c  ld   $8c
              18b2 00aa  ld   $aa
              18b3 0035  ld   $35
              18b4 0072  ld   $72
              18b5 00d9  ld   $d9
              18b6 0059  ld   $59
              18b7 0002  ld   $02
              18b8 002b  ld   $2b
              18b9 0036  ld   $36
              18ba 0021  ld   $21
              18bb 0038  ld   $38
              18bc 0082  ld   $82
              18bd 00fa  ld   $fa
              18be 0063  ld   $63
              18bf 00ff  ld   $ff
              18c0 0093  ld   $93
              18c1 001b  ld   $1b
              18c2 00ff  ld   $ff
              18c3 005a  ld   $5a
              18c4 00a0  ld   $a0
              18c5 0044  ld   $44
              18c6 00cd  ld   $cd
              18c7 00ca  ld   $ca
              18c8 0075  ld   $75
              18c9 0085  ld   $85
              18ca 00a2  ld   $a2
              18cb 005d  ld   $5d
              18cc 00cd  ld   $cd
              18cd 00ac  ld   $ac
              18ce 007a  ld   $7a
              18cf 0000  ld   $00
              18d0 0000  ld   $00
              18d1 0000  ld   $00
              * 5 times
              18d4 0085  ld   $85
              18d5 00a2  ld   $a2
              18d6 005f  ld   $5f
              18d7 0085  ld   $85
              18d8 00da  ld   $da
              18d9 005f  ld   $5f
              18da 0085  ld   $85
              18db 00bc  ld   $bc
              18dc 005d  ld   $5d
              18dd 0082  ld   $82
              18de 0040  ld   $40
              18df 0035  ld   $35
              18e0 003f  ld   $3f
              18e1 00be  ld   $be
              18e2 0059  ld   $59
              18e3 0004  ld   $04
              18e4 002b  ld   $2b
              18e5 0036  ld   $36
              18e6 0085  ld   $85
              18e7 00bc  ld   $bc
              18e8 005d  ld   $5d
              18e9 0085  ld   $85
              18ea 00bc  ld   $bc
              18eb 005d  ld   $5d
              18ec 0021  ld   $21
              18ed 0038  ld   $38
              18ee 0082  ld   $82
              18ef 00fe  ld   $fe
              18f0 0063  ld   $63
              18f1 00ff  ld   $ff
              18f2 00cd  ld   $cd
              18f3 00df  ld   $df
              18f4 0075  ld   $75
              18f5 00cd  ld   $cd
              18f6 00d5  ld   $d5
              18f7 0077  ld   $77
              18f8 0000  ld   $00
              18f9 0000  ld   $00
              18fa 0000  ld   $00
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e068  jmp  y,$68       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 0000  ld   $00
              1901 0000  ld   $00
              1902 0085  ld   $85
              1903 00a2  ld   $a2
              1904 005f  ld   $5f
              1905 0085  ld   $85
              1906 00da  ld   $da
              1907 005f  ld   $5f
              1908 0082  ld   $82
              1909 00fe  ld   $fe
              190a 0063  ld   $63
              190b 00ff  ld   $ff
              190c 0093  ld   $93
              190d 001b  ld   $1b
              190e 00ff  ld   $ff
              190f 005b  ld   $5b
              1910 00a0  ld   $a0
              1911 0055  ld   $55
              1912 00cd  ld   $cd
              1913 00c4  ld   $c4
              1914 0075  ld   $75
              1915 0021  ld   $21
              1916 0036  ld   $36
              1917 008c  ld   $8c
              1918 0001  ld   $01
              1919 0035  ld   $35
              191a 0072  ld   $72
              191b 00b2  ld   $b2
              191c 00cd  ld   $cd
              191d 00b0  ld   $b0
              191e 0069  ld   $69
              191f 0000  ld   $00
              1920 0000  ld   $00
              1921 0000  ld   $00
              * 5 times
              1924 0090  ld   $90
              1925 00ba  ld   $ba
              1926 00cd  ld   $cd
              1927 00ba  ld   $ba
              1928 0069  ld   $69
              1929 0040  ld   $40
              192a 0000  ld   $00
              192b 0000  ld   $00
              192c 0000  ld   $00
              192d 0000  ld   $00
              192e 0085  ld   $85
              192f 00a2  ld   $a2
              1930 005f  ld   $5f
              1931 0085  ld   $85
              1932 00da  ld   $da
              1933 005f  ld   $5f
              1934 0082  ld   $82
              1935 00fe  ld   $fe
              1936 0063  ld   $63
              1937 00ff  ld   $ff
              1938 00cd  ld   $cd
              1939 00db  ld   $db
              193a 0075  ld   $75
              193b 0085  ld   $85
              193c 00ce  ld   $ce
              193d 005a  ld   $5a
              193e 0085  ld   $85
              193f 00a2  ld   $a2
              1940 005b  ld   $5b
              1941 0021  ld   $21
              1942 0038  ld   $38
              1943 0035  ld   $35
              1944 003f  ld   $3f
              1945 00d9  ld   $d9
              1946 001a  ld   $1a
              1947 000e  ld   $0e
              1948 00e6  ld   $e6
              1949 0078  ld   $78
              194a 0035  ld   $35
              194b 0050  ld   $50
              194c 00c7  ld   $c7
              194d 0063  ld   $63
              194e 00ff  ld   $ff
              194f 00cd  ld   $cd
              1950 00f0  ld   $f0
              1951 0075  ld   $75
              1952 00cd  ld   $cd
              1953 00e6  ld   $e6
              1954 0050  ld   $50
              1955 0000  ld   $00
              1956 0000  ld   $00
              1957 0002  ld   $02
              1958 0000  ld   $00
              1959 0000  ld   $00
              195a 0085  ld   $85
              195b 00a2  ld   $a2
              195c 005f  ld   $5f
              195d 0085  ld   $85
              195e 00da  ld   $da
              195f 005f  ld   $5f
              1960 0082  ld   $82
              1961 00fe  ld   $fe
              1962 0063  ld   $63
              1963 00ff  ld   $ff
              1964 0093  ld   $93
              1965 001b  ld   $1b
              1966 00ff  ld   $ff
              1967 005c  ld   $5c
              1968 00a0  ld   $a0
              1969 0041  ld   $41
              196a 00cd  ld   $cd
              196b 00dc  ld   $dc
              196c 0075  ld   $75
              196d 00cd  ld   $cd
              196e 00a9  ld   $a9
              196f 0051  ld   $51
              1970 0000  ld   $00
              1971 0000  ld   $00
              1972 0000  ld   $00
              * 5 times
              1975 002b  ld   $2b
              1976 003a  ld   $3a
              1977 002b  ld   $2b
              1978 003c  ld   $3c
              1979 001a  ld   $1a
              197a 003f  ld   $3f
              197b 0093  ld   $93
              197c 003c  ld   $3c
              197d 00f0  ld   $f0
              197e 003c  ld   $3c
              197f 001a  ld   $1a
              1980 003e  ld   $3e
              1981 0093  ld   $93
              1982 003c  ld   $3c
              1983 00f0  ld   $f0
              1984 003c  ld   $3c
              1985 001a  ld   $1a
              1986 0041  ld   $41
              1987 0093  ld   $93
              1988 003c  ld   $3c
              1989 00f0  ld   $f0
              198a 003c  ld   $3c
              198b 001a  ld   $1a
              198c 0040  ld   $40
              198d 0093  ld   $93
              198e 003c  ld   $3c
              198f 00f0  ld   $f0
              1990 003c  ld   $3c
              1991 0021  ld   $21
              1992 003a  ld   $3a
              1993 0085  ld   $85
              1994 00a2  ld   $a2
              1995 005f  ld   $5f
              1996 0085  ld   $85
              1997 00da  ld   $da
              1998 005f  ld   $5f
              1999 0082  ld   $82
              199a 00fe  ld   $fe
              199b 0035  ld   $35
              199c 0072  ld   $72
              199d 00da  ld   $da
              199e 0085  ld   $85
              199f 00bc  ld   $bc
              19a0 005d  ld   $5d
              19a1 008c  ld   $8c
              19a2 00ff  ld   $ff
              19a3 0035  ld   $35
              19a4 003f  ld   $3f
              19a5 00d2  ld   $d2
              19a6 0063  ld   $63
              19a7 00ff  ld   $ff
              19a8 0093  ld   $93
              19a9 001b  ld   $1b
              19aa 00ff  ld   $ff
              19ab 005d  ld   $5d
              19ac 00a0  ld   $a0
              19ad 0035  ld   $35
              19ae 00cd  ld   $cd
              19af 00ab  ld   $ab
              19b0 0011  ld   $11
              19b1 0009  ld   $09
              19b2 000b  ld   $0b
              19b3 002b  ld   $2b
              19b4 0022  ld   $22
              19b5 0011  ld   $11
              19b6 0078  ld   $78
              19b7 0080  ld   $80
              19b8 00b4  ld   $b4
              19b9 00fa  ld   $fa
              19ba 00ff  ld   $ff
              19bb 00cd  ld   $cd
              19bc 00b8  ld   $b8
              19bd 0011  ld   $11
              19be 0009  ld   $09
              19bf 000b  ld   $0b
              19c0 002b  ld   $2b
              19c1 0022  ld   $22
              19c2 0011  ld   $11
              19c3 007c  ld   $7c
              19c4 0080  ld   $80
              19c5 00b4  ld   $b4
              19c6 00fa  ld   $fa
              19c7 00ff  ld   $ff
              19c8 00cd  ld   $cd
              19c9 00d0  ld   $d0
              19ca 0059  ld   $59
              19cb 00ff  ld   $ff
              19cc 005e  ld   $5e
              19cd 002a  ld   $2a
              19ce 0059  ld   $59
              19cf 002a  ld   $2a
              19d0 002b  ld   $2b
              19d1 0024  ld   $24
              19d2 00e3  ld   $e3
              19d3 0001  ld   $01
              19d4 002b  ld   $2b
              19d5 0026  ld   $26
              19d6 0011  ld   $11
              19d7 0015  ld   $15
              19d8 000b  ld   $0b
              19d9 002b  ld   $2b
              19da 0022  ld   $22
              19db 00b4  ld   $b4
              19dc 00cb  ld   $cb
              19dd 001a  ld   $1a
              19de 002a  ld   $2a
              19df 00ff  ld   $ff
              19e0 0093  ld   $93
              19e1 001b  ld   $1b
              19e2 00ff  ld   $ff
              19e3 005e  ld   $5e
              19e4 00a0  ld   $a0
              19e5 0029  ld   $29
              19e6 00cd  ld   $cd
              19e7 00c4  ld   $c4
              19e8 00fc  ld   $fc
              19e9 0043  ld   $43
              19ea 005e  ld   $5e
              19eb 0043  ld   $43
              19ec 0059  ld   $59
              19ed 0008  ld   $08
              19ee 002b  ld   $2b
              19ef 0034  ld   $34
              19f0 0021  ld   $21
              19f1 0042  ld   $42
              19f2 0035  ld   $35
              19f3 0053  ld   $53
              19f4 00b8  ld   $b8
              19f5 0099  ld   $99
              19f6 0042  ld   $42
              19f7 002b  ld   $2b
              19f8 0042  ld   $42
              19f9 0011  ld   $11
              19fa 0021  ld   $21
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e068  jmp  y,$68       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 0010  ld   $10
              1a01 00fc  ld   $fc
              1a02 0042  ld   $42
              1a03 0090  ld   $90
              1a04 00ba  ld   $ba
              1a05 0099  ld   $99
              1a06 0042  ld   $42
              1a07 002b  ld   $2b
              1a08 0042  ld   $42
              1a09 0021  ld   $21
              1a0a 0034  ld   $34
              1a0b 00e6  ld   $e6
              1a0c 0001  ld   $01
              1a0d 0035  ld   $35
              1a0e 004d  ld   $4d
              1a0f 00a6  ld   $a6
              1a10 00ff  ld   $ff
              1a11 0093  ld   $93
              1a12 001b  ld   $1b
              1a13 00ff  ld   $ff
              1a14 005f  ld   $5f
              1a15 00a0  ld   $a0
              1a16 0057  ld   $57
              1a17 00cd  ld   $cd
              1a18 00d6  ld   $d6
              1a19 0075  ld   $75
              1a1a 002b  ld   $2b
              1a1b 003a  ld   $3a
              1a1c 0021  ld   $21
              1a1d 0044  ld   $44
              1a1e 002b  ld   $2b
              1a1f 003c  ld   $3c
              1a20 0059  ld   $59
              1a21 00ff  ld   $ff
              1a22 00f0  ld   $f0
              1a23 003c  ld   $3c
              1a24 0093  ld   $93
              1a25 003c  ld   $3c
              1a26 00f0  ld   $f0
              1a27 003c  ld   $3c
              1a28 0093  ld   $93
              1a29 003c  ld   $3c
              1a2a 0059  ld   $59
              1a2b 0006  ld   $06
              1a2c 002b  ld   $2b
              1a2d 0034  ld   $34
              1a2e 0021  ld   $21
              1a2f 003a  ld   $3a
              1a30 00ad  ld   $ad
              1a31 0093  ld   $93
              1a32 003a  ld   $3a
              1a33 00f0  ld   $f0
              1a34 003c  ld   $3c
              1a35 0093  ld   $93
              1a36 003c  ld   $3c
              1a37 0021  ld   $21
              1a38 0034  ld   $34
              1a39 00e6  ld   $e6
              1a3a 0001  ld   $01
              1a3b 0035  ld   $35
              1a3c 004d  ld   $4d
              1a3d 00b3  ld   $b3
              1a3e 0021  ld   $21
              1a3f 0044  ld   $44
              1a40 002b  ld   $2b
              1a41 0024  ld   $24
              1a42 00e3  ld   $e3
              1a43 0008  ld   $08
              1a44 002b  ld   $2b
              1a45 0026  ld   $26
              1a46 0011  ld   $11
              1a47 0015  ld   $15
              1a48 000b  ld   $0b
              1a49 002b  ld   $2b
              1a4a 0022  ld   $22
              1a4b 00b4  ld   $b4
              1a4c 00cb  ld   $cb
              1a4d 0063  ld   $63
              1a4e 00ff  ld   $ff
              1a4f 00cd  ld   $cd
              1a50 00f2  ld   $f2
              1a51 0075  ld   $75
              1a52 0059  ld   $59
              1a53 0008  ld   $08
              1a54 002b  ld   $2b
              1a55 0034  ld   $34
              1a56 0085  ld   $85
              1a57 00bc  ld   $bc
              1a58 005d  ld   $5d
              1a59 0082  ld   $82
              1a5a 0080  ld   $80
              1a5b 0035  ld   $35
              1a5c 003f  ld   $3f
              1a5d 00ec  ld   $ec
              1a5e 0021  ld   $21
              1a5f 0034  ld   $34
              1a60 00e6  ld   $e6
              1a61 0001  ld   $01
              1a62 0035  ld   $35
              1a63 004d  ld   $4d
              1a64 00db  ld   $db
              1a65 001a  ld   $1a
              1a66 002a  ld   $2a
              1a67 002b  ld   $2b
              1a68 0038  ld   $38
              1a69 0063  ld   $63
              1a6a 00ff  ld   $ff
              1a6b 0093  ld   $93
              1a6c 001b  ld   $1b
              1a6d 00ff  ld   $ff
              1a6e 0060  ld   $60
              1a6f 00a0  ld   $a0
              1a70 004f  ld   $4f
              1a71 00cd  ld   $cd
              1a72 00c3  ld   $c3
              1a73 0075  ld   $75
              1a74 0085  ld   $85
              1a75 00cc  ld   $cc
              1a76 0058  ld   $58
              1a77 0085  ld   $85
              1a78 00a2  ld   $a2
              1a79 0059  ld   $59
              1a7a 0085  ld   $85
              1a7b 00c8  ld   $c8
              1a7c 005b  ld   $5b
              1a7d 0021  ld   $21
              1a7e 0036  ld   $36
              1a7f 00e6  ld   $e6
              1a80 0002  ld   $02
              1a81 0035  ld   $35
              1a82 0072  ld   $72
              1a83 00b4  ld   $b4
              1a84 0085  ld   $85
              1a85 00a2  ld   $a2
              1a86 005a  ld   $5a
              1a87 0021  ld   $21
              1a88 0036  ld   $36
              1a89 00e6  ld   $e6
              1a8a 0002  ld   $02
              1a8b 0035  ld   $35
              1a8c 004d  ld   $4d
              1a8d 00be  ld   $be
              1a8e 0085  ld   $85
              1a8f 00df  ld   $df
              1a90 005b  ld   $5b
              1a91 0085  ld   $85
              1a92 00af  ld   $af
              1a93 005d  ld   $5d
              1a94 0063  ld   $63
              1a95 00ff  ld   $ff
              1a96 00cd  ld   $cd
              1a97 00ea  ld   $ea
              1a98 0075  ld   $75
              1a99 0085  ld   $85
              1a9a 00a2  ld   $a2
              1a9b 0063  ld   $63
              1a9c 00cd  ld   $cd
              1a9d 00d3  ld   $d3
              1a9e 0056  ld   $56
              1a9f 006f  ld   $6f
              1aa0 006c  ld   $6c
              1aa1 002e  ld   $2e
              1aa2 0049  ld   $49
              1aa3 0044  ld   $44
              1aa4 0020  ld   $20
              1aa5 0000  ld   $00
              1aa6 0085  ld   $85
              1aa7 00a2  ld   $a2
              1aa8 0069  ld   $69
              1aa9 0059  ld   $59
              1aaa 000b  ld   $0b
              1aab 0099  ld   $99
              1aac 0030  ld   $30
              1aad 00f6  ld   $f6
              1aae 002b  ld   $2b
              1aaf 0046  ld   $46
              1ab0 0085  ld   $85
              1ab1 00ce  ld   $ce
              1ab2 0067  ld   $67
              1ab3 0011  ld   $11
              1ab4 0000  ld   $00
              1ab5 0002  ld   $02
              1ab6 00fc  ld   $fc
              1ab7 0046  ld   $46
              1ab8 0085  ld   $85
              1ab9 00bb  ld   $bb
              1aba 0068  ld   $68
              1abb 0063  ld   $63
              1abc 00ff  ld   $ff
              1abd 0093  ld   $93
              1abe 001b  ld   $1b
              1abf 00ff  ld   $ff
              1ac0 0061  ld   $61
              1ac1 00a0  ld   $a0
              1ac2 005e  ld   $5e
              1ac3 00cd  ld   $cd
              1ac4 00ea  ld   $ea
              1ac5 0075  ld   $75
              1ac6 0059  ld   $59
              1ac7 0000  ld   $00
              1ac8 002b  ld   $2b
              1ac9 0040  ld   $40
              1aca 002b  ld   $2b
              1acb 003e  ld   $3e
              1acc 0085  ld   $85
              1acd 00a2  ld   $a2
              1ace 0063  ld   $63
              1acf 00cd  ld   $cd
              1ad0 00b1  ld   $b1
              1ad1 004d  ld   $4d
              1ad2 0042  ld   $42
              1ad3 0052  ld   $52
              1ad4 0020  ld   $20
              1ad5 0000  ld   $00
              1ad6 0085  ld   $85
              1ad7 00a2  ld   $a2
              1ad8 0069  ld   $69
              1ad9 0011  ld   $11
              1ada 00fe  ld   $fe
              1adb 0001  ld   $01
              1adc 0099  ld   $99
              1add 0030  ld   $30
              1ade 00f6  ld   $f6
              1adf 002b  ld   $2b
              1ae0 0046  ld   $46
              1ae1 0011  ld   $11
              1ae2 0055  ld   $55
              1ae3 00aa  ld   $aa
              1ae4 00fc  ld   $fc
              1ae5 0046  ld   $46
              1ae6 0035  ld   $35
              1ae7 0072  ld   $72
              1ae8 00e8  ld   $e8
              1ae9 0011  ld   $11
              1aea 00c6  ld   $c6
              1aeb 0001  ld   $01
              1aec 0099  ld   $99
              1aed 0030  ld   $30
              1aee 00f6  ld   $f6
              1aef 002b  ld   $2b
              1af0 0040  ld   $40
              1af1 0011  ld   $11
              1af2 00c8  ld   $c8
              1af3 0001  ld   $01
              1af4 0099  ld   $99
              1af5 0030  ld   $30
              1af6 00f6  ld   $f6
              1af7 002b  ld   $2b
              1af8 003e  ld   $3e
              1af9 0011  ld   $11
              1afa 00c2  ld   $c2
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e068  jmp  y,$68       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 0001  ld   $01
              1b01 0099  ld   $99
              1b02 0030  ld   $30
              1b03 00ad  ld   $ad
              1b04 002b  ld   $2b
              1b05 0046  ld   $46
              1b06 0085  ld   $85
              1b07 00a2  ld   $a2
              1b08 0068  ld   $68
              1b09 0059  ld   $59
              1b0a 000b  ld   $0b
              1b0b 00fc  ld   $fc
              1b0c 0046  ld   $46
              1b0d 0035  ld   $35
              1b0e 003f  ld   $3f
              1b0f 00e8  ld   $e8
              1b10 008c  ld   $8c
              1b11 0007  ld   $07
              1b12 0063  ld   $63
              1b13 00ff  ld   $ff
              1b14 00cd  ld   $cd
              1b15 00f9  ld   $f9
              1b16 002b  ld   $2b
              1b17 0048  ld   $48
              1b18 0099  ld   $99
              1b19 0048  ld   $48
              1b1a 00e6  ld   $e6
              1b1b 0001  ld   $01
              1b1c 005e  ld   $5e
              1b1d 0019  ld   $19
              1b1e 0088  ld   $88
              1b1f 00ff  ld   $ff
              1b20 002b  ld   $2b
              1b21 004a  ld   $4a
              1b22 00ff  ld   $ff
              1b23 0093  ld   $93
              1b24 001b  ld   $1b
              1b25 00ff  ld   $ff
              1b26 0062  ld   $62
              1b27 00a0  ld   $a0
              1b28 0060  ld   $60
              1b29 00cd  ld   $cd
              1b2a 00fb  ld   $fb
              1b2b 0075  ld   $75
              1b2c 0059  ld   $59
              1b2d 000d  ld   $0d
              1b2e 0099  ld   $99
              1b2f 0030  ld   $30
              1b30 00ad  ld   $ad
              1b31 0085  ld   $85
              1b32 00ee  ld   $ee
              1b33 0061  ld   $61
              1b34 0021  ld   $21
              1b35 0040  ld   $40
              1b36 002b  ld   $2b
              1b37 004c  ld   $4c
              1b38 0021  ld   $21
              1b39 003e  ld   $3e
              1b3a 002b  ld   $2b
              1b3b 004e  ld   $4e
              1b3c 0059  ld   $59
              1b3d 000e  ld   $0e
              1b3e 0099  ld   $99
              1b3f 0030  ld   $30
              1b40 00f6  ld   $f6
              1b41 002b  ld   $2b
              1b42 0050  ld   $50
              1b43 0085  ld   $85
              1b44 00d2  ld   $d2
              1b45 0066  ld   $66
              1b46 002b  ld   $2b
              1b47 0052  ld   $52
              1b48 0021  ld   $21
              1b49 004e  ld   $4e
              1b4a 002b  ld   $2b
              1b4b 0054  ld   $54
              1b4c 0059  ld   $59
              1b4d 0024  ld   $24
              1b4e 0099  ld   $99
              1b4f 0030  ld   $30
              1b50 00f6  ld   $f6
              1b51 002b  ld   $2b
              1b52 0050  ld   $50
              1b53 0059  ld   $59
              1b54 0026  ld   $26
              1b55 0099  ld   $99
              1b56 0030  ld   $30
              1b57 00f6  ld   $f6
              1b58 002b  ld   $2b
              1b59 0056  ld   $56
              1b5a 0085  ld   $85
              1b5b 00d6  ld   $d6
              1b5c 0066  ld   $66
              1b5d 0085  ld   $85
              1b5e 00d6  ld   $d6
              1b5f 0066  ld   $66
              1b60 0059  ld   $59
              1b61 0000  ld   $00
              1b62 00b8  ld   $b8
              1b63 0048  ld   $48
              1b64 00b8  ld   $b8
              1b65 0048  ld   $48
              1b66 002b  ld   $2b
              1b67 0050  ld   $50
              1b68 0011  ld   $11
              1b69 00ff  ld   $ff
              1b6a 00ff  ld   $ff
              1b6b 002b  ld   $2b
              1b6c 0056  ld   $56
              1b6d 0085  ld   $85
              1b6e 00d6  ld   $d6
              1b6f 0066  ld   $66
              1b70 002b  ld   $2b
              1b71 0058  ld   $58
              1b72 0021  ld   $21
              1b73 004e  ld   $4e
              1b74 002b  ld   $2b
              1b75 005a  ld   $5a
              1b76 0059  ld   $59
              1b77 002c  ld   $2c
              1b78 0099  ld   $99
              1b79 0030  ld   $30
              1b7a 00f6  ld   $f6
              1b7b 002b  ld   $2b
              1b7c 005c  ld   $5c
              1b7d 0059  ld   $59
              1b7e 002e  ld   $2e
              1b7f 0099  ld   $99
              1b80 0030  ld   $30
              1b81 00f6  ld   $f6
              1b82 002b  ld   $2b
              1b83 005e  ld   $5e
              1b84 0063  ld   $63
              1b85 00ff  ld   $ff
              1b86 0093  ld   $93
              1b87 001b  ld   $1b
              1b88 00ff  ld   $ff
              1b89 0063  ld   $63
              1b8a 00a0  ld   $a0
              1b8b 003e  ld   $3e
              1b8c 00cd  ld   $cd
              1b8d 00d9  ld   $d9
              1b8e 0075  ld   $75
              1b8f 0085  ld   $85
              1b90 00a2  ld   $a2
              1b91 005d  ld   $5d
              1b92 0021  ld   $21
              1b93 0036  ld   $36
              1b94 00e6  ld   $e6
              1b95 0002  ld   $02
              1b96 0035  ld   $35
              1b97 004d  ld   $4d
              1b98 00ae  ld   $ae
              1b99 0085  ld   $85
              1b9a 00a2  ld   $a2
              1b9b 0066  ld   $66
              1b9c 0085  ld   $85
              1b9d 00a2  ld   $a2
              1b9e 005c  ld   $5c
              1b9f 001a  ld   $1a
              1ba0 002a  ld   $2a
              1ba1 008c  ld   $8c
              1ba2 00fe  ld   $fe
              1ba3 0035  ld   $35
              1ba4 0072  ld   $72
              1ba5 00d7  ld   $d7
              1ba6 0011  ld   $11
              1ba7 0015  ld   $15
              1ba8 000b  ld   $0b
              1ba9 002b  ld   $2b
              1baa 0022  ld   $22
              1bab 0011  ld   $11
              1bac 0000  ld   $00
              1bad 007c  ld   $7c
              1bae 002b  ld   $2b
              1baf 0024  ld   $24
              1bb0 0021  ld   $21
              1bb1 0030  ld   $30
              1bb2 002b  ld   $2b
              1bb3 0026  ld   $26
              1bb4 00b4  ld   $b4
              1bb5 00cb  ld   $cb
              1bb6 0093  ld   $93
              1bb7 0027  ld   $27
              1bb8 00b4  ld   $b4
              1bb9 00cb  ld   $cb
              1bba 0085  ld   $85
              1bbb 00bc  ld   $bc
              1bbc 005d  ld   $5d
              1bbd 0085  ld   $85
              1bbe 00bc  ld   $bc
              1bbf 005d  ld   $5d
              1bc0 0085  ld   $85
              1bc1 00af  ld   $af
              1bc2 005d  ld   $5d
              1bc3 0059  ld   $59
              1bc4 0000  ld   $00
              1bc5 0063  ld   $63
              1bc6 00ff  ld   $ff
              1bc7 0093  ld   $93
              1bc8 001b  ld   $1b
              1bc9 00ff  ld   $ff
              1bca 0064  ld   $64
              1bcb 00a0  ld   $a0
              1bcc 0050  ld   $50
              1bcd 00cd  ld   $cd
              1bce 00eb  ld   $eb
              1bcf 0075  ld   $75
              1bd0 0021  ld   $21
              1bd1 0060  ld   $60
              1bd2 00fc  ld   $fc
              1bd3 0062  ld   $62
              1bd4 0035  ld   $35
              1bd5 0072  ld   $72
              1bd6 00ae  ld   $ae
              1bd7 0021  ld   $21
              1bd8 0064  ld   $64
              1bd9 00fc  ld   $fc
              1bda 0066  ld   $66
              1bdb 001a  ld   $1a
              1bdc 0019  ld   $19
              1bdd 0035  ld   $35
              1bde 0072  ld   $72
              1bdf 00b5  ld   $b5
              1be0 0021  ld   $21
              1be1 0066  ld   $66
              1be2 0090  ld   $90
              1be3 00bb  ld   $bb
              1be4 0021  ld   $21
              1be5 0064  ld   $64
              1be6 0088  ld   $88
              1be7 00ff  ld   $ff
              1be8 00e3  ld   $e3
              1be9 0001  ld   $01
              1bea 00b8  ld   $b8
              1beb 0064  ld   $64
              1bec 002b  ld   $2b
              1bed 0068  ld   $68
              1bee 0035  ld   $35
              1bef 003f  ld   $3f
              1bf0 00e5  ld   $e5
              1bf1 0011  ld   $11
              1bf2 00ff  ld   $ff
              1bf3 0001  ld   $01
              1bf4 00f8  ld   $f8
              1bf5 0064  ld   $64
              1bf6 0035  ld   $35
              1bf7 003f  ld   $3f
              1bf8 00ce  ld   $ce
              1bf9 0099  ld   $99
              1bfa 0030  ld   $30
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e068  jmp  y,$68       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00 0090  ld   $90
              1c01 00e5  ld   $e5
              1c02 0085  ld   $85
              1c03 00a2  ld   $a2
              1c04 0063  ld   $63
              1c05 0035  ld   $35
              1c06 0072  ld   $72
              1c07 00db  ld   $db
              1c08 0085  ld   $85
              1c09 00a2  ld   $a2
              1c0a 0075  ld   $75
              1c0b 0021  ld   $21
              1c0c 0030  ld   $30
              1c0d 0090  ld   $90
              1c0e 00e5  ld   $e5
              1c0f 0021  ld   $21
              1c10 0060  ld   $60
              1c11 002b  ld   $2b
              1c12 0062  ld   $62
              1c13 0021  ld   $21
              1c14 0064  ld   $64
              1c15 002b  ld   $2b
              1c16 0066  ld   $66
              1c17 0059  ld   $59
              1c18 0000  ld   $00
              1c19 002b  ld   $2b
              1c1a 006a  ld   $6a
              1c1b 0021  ld   $21
              1c1c 0068  ld   $68
              1c1d 0063  ld   $63
              1c1e 00ff  ld   $ff
              1c1f 0093  ld   $93
              1c20 001b  ld   $1b
              1c21 00ff  ld   $ff
              1c22 0065  ld   $65
              1c23 00a0  ld   $a0
              1c24 0060  ld   $60
              1c25 00cd  ld   $cd
              1c26 00cb  ld   $cb
              1c27 0075  ld   $75
              1c28 0059  ld   $59
              1c29 0000  ld   $00
              1c2a 002b  ld   $2b
              1c2b 0064  ld   $64
              1c2c 002b  ld   $2b
              1c2d 0060  ld   $60
              1c2e 0021  ld   $21
              1c2f 003a  ld   $3a
              1c30 00e3  ld   $e3
              1c31 001c  ld   $1c
              1c32 00f6  ld   $f6
              1c33 002b  ld   $2b
              1c34 0066  ld   $66
              1c35 0021  ld   $21
              1c36 003a  ld   $3a
              1c37 00e3  ld   $e3
              1c38 001e  ld   $1e
              1c39 00f6  ld   $f6
              1c3a 002b  ld   $2b
              1c3b 0062  ld   $62
              1c3c 0021  ld   $21
              1c3d 003a  ld   $3a
              1c3e 00e3  ld   $e3
              1c3f 001a  ld   $1a
              1c40 00f6  ld   $f6
              1c41 002b  ld   $2b
              1c42 004c  ld   $4c
              1c43 0021  ld   $21
              1c44 003a  ld   $3a
              1c45 00e3  ld   $e3
              1c46 0014  ld   $14
              1c47 00f6  ld   $f6
              1c48 002b  ld   $2b
              1c49 004e  ld   $4e
              1c4a 0085  ld   $85
              1c4b 00a2  ld   $a2
              1c4c 0076  ld   $76
              1c4d 0085  ld   $85
              1c4e 00cf  ld   $cf
              1c4f 0065  ld   $65
              1c50 0063  ld   $63
              1c51 00ff  ld   $ff
              1c52 00cd  ld   $cd
              1c53 00fb  ld   $fb
              1c54 0075  ld   $75
              1c55 001a  ld   $1a
              1c56 004f  ld   $4f
              1c57 0082  ld   $82
              1c58 000f  ld   $0f
              1c59 005e  ld   $5e
              1c5a 004f  ld   $4f
              1c5b 0059  ld   $59
              1c5c 0001  ld   $01
              1c5d 002b  ld   $2b
              1c5e 0046  ld   $46
              1c5f 00b8  ld   $b8
              1c60 0048  ld   $48
              1c61 0035  ld   $35
              1c62 0053  ld   $53
              1c63 00e6  ld   $e6
              1c64 0085  ld   $85
              1c65 00c2  ld   $c2
              1c66 0066  ld   $66
              1c67 0021  ld   $21
              1c68 0046  ld   $46
              1c69 0099  ld   $99
              1c6a 0046  ld   $46
              1c6b 0090  ld   $90
              1c6c 00d6  ld   $d6
              1c6d 0021  ld   $21
              1c6e 0058  ld   $58
              1c6f 002b  ld   $2b
              1c70 0050  ld   $50
              1c71 0021  ld   $21
              1c72 005a  ld   $5a
              1c73 002b  ld   $2b
              1c74 0056  ld   $56
              1c75 0085  ld   $85
              1c76 00d6  ld   $d6
              1c77 0066  ld   $66
              1c78 0021  ld   $21
              1c79 004c  ld   $4c
              1c7a 002b  ld   $2b
              1c7b 0040  ld   $40
              1c7c 0021  ld   $21
              1c7d 004e  ld   $4e
              1c7e 002b  ld   $2b
              1c7f 003e  ld   $3e
              1c80 0063  ld   $63
              1c81 00ff  ld   $ff
              1c82 0093  ld   $93
              1c83 001b  ld   $1b
              1c84 00ff  ld   $ff
              1c85 0066  ld   $66
              1c86 00a0  ld   $a0
              1c87 005f  ld   $5f
              1c88 00cd  ld   $cd
              1c89 00be  ld   $be
              1c8a 0075  ld   $75
              1c8b 0059  ld   $59
              1c8c 0000  ld   $00
              1c8d 005e  ld   $5e
              1c8e 0050  ld   $50
              1c8f 001a  ld   $1a
              1c90 004c  ld   $4c
              1c91 005e  ld   $5e
              1c92 0051  ld   $51
              1c93 001a  ld   $1a
              1c94 004d  ld   $4d
              1c95 005e  ld   $5e
              1c96 0056  ld   $56
              1c97 001a  ld   $1a
              1c98 004e  ld   $4e
              1c99 005e  ld   $5e
              1c9a 0057  ld   $57
              1c9b 0021  ld   $21
              1c9c 0050  ld   $50
              1c9d 002b  ld   $2b
              1c9e 004c  ld   $4c
              1c9f 0021  ld   $21
              1ca0 0056  ld   $56
              1ca1 002b  ld   $2b
              1ca2 004e  ld   $4e
              1ca3 0085  ld   $85
              1ca4 00d6  ld   $d6
              1ca5 0066  ld   $66
              1ca6 0063  ld   $63
              1ca7 00ff  ld   $ff
              1ca8 00cd  ld   $cd
              1ca9 00fa  ld   $fa
              1caa 0075  ld   $75
              1cab 0021  ld   $21
              1cac 004c  ld   $4c
              1cad 002b  ld   $2b
              1cae 0050  ld   $50
              1caf 0021  ld   $21
              1cb0 004e  ld   $4e
              1cb1 002b  ld   $2b
              1cb2 0056  ld   $56
              1cb3 0085  ld   $85
              1cb4 00d6  ld   $d6
              1cb5 0066  ld   $66
              1cb6 0021  ld   $21
              1cb7 0056  ld   $56
              1cb8 0063  ld   $63
              1cb9 00ff  ld   $ff
              1cba 0059  ld   $59
              1cbb 0000  ld   $00
              1cbc 002b  ld   $2b
              1cbd 0056  ld   $56
              1cbe 0021  ld   $21
              1cbf 004c  ld   $4c
              1cc0 00fc  ld   $fc
              1cc1 0050  ld   $50
              1cc2 0035  ld   $35
              1cc3 0053  ld   $53
              1cc4 00df  ld   $df
              1cc5 0021  ld   $21
              1cc6 004c  ld   $4c
              1cc7 0090  ld   $90
              1cc8 00e2  ld   $e2
              1cc9 0011  ld   $11
              1cca 0000  ld   $00
              1ccb 0080  ld   $80
              1ccc 0099  ld   $99
              1ccd 0050  ld   $50
              1cce 0035  ld   $35
              1ccf 0050  ld   $50
              1cd0 00ed  ld   $ed
              1cd1 0021  ld   $21
              1cd2 004e  ld   $4e
              1cd3 00e3  ld   $e3
              1cd4 0001  ld   $01
              1cd5 002b  ld   $2b
              1cd6 004e  ld   $4e
              1cd7 0021  ld   $21
              1cd8 004e  ld   $4e
              1cd9 0099  ld   $99
              1cda 0056  ld   $56
              1cdb 002b  ld   $2b
              1cdc 004e  ld   $4e
              1cdd 0021  ld   $21
              1cde 004c  ld   $4c
              1cdf 0099  ld   $99
              1ce0 0050  ld   $50
              1ce1 002b  ld   $2b
              1ce2 004c  ld   $4c
              1ce3 00ff  ld   $ff
              1ce4 0093  ld   $93
              1ce5 001b  ld   $1b
              1ce6 00ff  ld   $ff
              1ce7 0067  ld   $67
              1ce8 00a0  ld   $a0
              1ce9 0040  ld   $40
              1cea 00cd  ld   $cd
              1ceb 00b8  ld   $b8
              1cec 0075  ld   $75
              1ced 00e6  ld   $e6
              1cee 0020  ld   $20
              1cef 0035  ld   $35
              1cf0 0053  ld   $53
              1cf1 00aa  ld   $aa
              1cf2 0059  ld   $59
              1cf3 007f  ld   $7f
              1cf4 0090  ld   $90
              1cf5 00b1  ld   $b1
              1cf6 00e6  ld   $e6
              1cf7 0060  ld   $60
              1cf8 0035  ld   $35
              1cf9 0050  ld   $50
              1cfa 00b1  ld   $b1
              1cfb fe00  bra  ac          ;+-----------------------------------+
              1cfc fcfd  bra  $1cfd       ;|                                   |
              1cfd 1404  ld   $04,y       ;| Trampoline for page $1c00 lookups |
              1cfe e068  jmp  y,$68       ;|                                   |
              1cff c218  st   [$18]       ;+-----------------------------------+
              1d00 0059  ld   $59
              1d01 007f  ld   $7f
              1d02 0082  ld   $82
              1d03 007f  ld   $7f
              1d04 0085  ld   $85
              1d05 00a2  ld   $a2
              1d06 006e  ld   $6e
              1d07 0063  ld   $63
              1d08 00ff  ld   $ff
              1d09 00cd  ld   $cd
              1d0a 00ca  ld   $ca
              1d0b 0075  ld   $75
              1d0c 0021  ld   $21
              1d0d 004e  ld   $4e
              1d0e 0085  ld   $85
              1d0f 00ce  ld   $ce
              1d10 0067  ld   $67
              1d11 0021  ld   $21
              1d12 004c  ld   $4c
              1d13 0085  ld   $85
              1d14 00ce  ld   $ce
              1d15 0067  ld   $67
              1d16 0085  ld   $85
              1d17 00a2  ld   $a2
              1d18 006d  ld   $6d
              1d19 0063  ld   $63
              1d1a 00ff  ld   $ff
              1d1b 00cd  ld   $cd
              1d1c 00db  ld   $db
              1d1d 0075  ld   $75
              1d1e 002b  ld   $2b
              1d1f 0046  ld   $46
              1d20 001a  ld   $1a
              1d21 0047  ld   $47
              1d22 0085  ld   $85
              1d23 00a2  ld   $a2
              1d24 0068  ld   $68
              1d25 001a  ld   $1a
              1d26 0046  ld   $46
              1d27 0085  ld   $85
              1d28 00a2  ld   $a2
              1d29 0068  ld   $68
              1d2a 0063  ld   $63
              1d2b 00ff  ld   $ff
              1d2c 0093  ld   $93
              1d2d 001b  ld   $1b
              1d2e 00ff  ld   $ff
              1d2f 0068  ld   $68
              1d30 00a0  ld   $a0
              1d31 0054  ld   $54
              1d32 00cd  ld   $cd
              1d33 00b7  ld   $b7
              1d34 0075  ld   $75
              1d35 00df  ld   $df
              1d36 00fe  ld   $fe
              1d37 00ec  ld   $ec
              1d38 0000  ld   $00
              1d39 00e9  ld   $e9
              1d3a 00e9  ld   $e9
              1d3b 00e9  ld   $e9
              1d3c 00e9  ld   $e9
              1d3d 001a  ld   $1a
              1d3e 0019  ld   $19
              1d3f 0085  ld   $85
              1d40 00de  ld   $de
              1d41 0068  ld   $68
              1d42 00ee  ld   $ee
              1d43 0000  ld   $00
              1d44 00df  ld   $df
              1d45 0002  ld   $02
              1d46 0085  ld   $85
              1d47 00de  ld   $de
              1d48 0068  ld   $68
              1d49 0063  ld   $63
              1d4a 00ff  ld   $ff
              1d4b 00cd  ld   $cd
              1d4c 00da  ld   $da
              1d4d 0075  ld   $75
              1d4e 002b  ld   $2b
              1d4f 0046  ld   $46
              1d50 0035  ld   $35
              1d51 0072  ld   $72
              1d52 00c8  ld   $c8
              1d53 00cd  ld   $cd
              1d54 00c6  ld   $c6
              1d55 0020  ld   $20
              1d56 004f  ld   $4f
              1d57 004b  ld   $4b
              1d58 000a  ld   $0a
              1d59 0000  ld   $00
              1d5a 0090  ld   $90
              1d5b 00d3  ld   $d3
              1d5c 00cd  ld   $cd
              1d5d 00d3  ld   $d3
              1d5e 0020  ld   $20
              1d5f 0046  ld   $46
              1d60 0041  ld   $41
              1d61 0049  ld   $49
              1d62 004c  ld   $4c
              1d63 0045  ld   $45
              1d64 0044  ld   $44
              1d65 000a  ld   $0a
              1d66 0000  ld   $00
              1d67 0085  ld   $85
              1d68 00a2  ld   $a2
              1d69 0069  ld   $69
              1d6a 0021  ld   $21
              1d6b 0046  ld   $46
              1d6c 0063  ld   $63
              1d6d 00ff  ld   $ff
              1d6e 00cd  ld   $cd
              1d6f 00ef  ld   $ef
              1d70 0075  ld   $75
              1d71 0082  ld   $82
              1d72 000f  ld   $0f
              1d73 00e6  ld   $e6
              1d74 000a  ld   $0a
              1d75 0035  ld   $35
              1d76 0053  ld   $53
              1d77 00e8  ld   $e8
              1d78 00e3  ld   $e3
              1d79 003a  ld   $3a
              1d7a 0090  ld   $90
              1d7b 00ea  ld   $ea
              1d7c 00e3  ld   $e3
              1d7d 0041  ld   $41
              1d7e 0085  ld   $85
              1d7f 00a2  ld   $a2
              1d80 006e  ld   $6e
              1d81 0063  ld   $63
              1d82 00ff  ld   $ff
              1d83 0093  ld   $93
              1d84 001b  ld   $1b
              1d85 00ff  ld   $ff
              1d86 0069  ld   $69
              1d87 00a0  ld   $a0
              1d88 004f  ld   $4f
              1d89 00cd  ld   $cd
              1d8a 00be  ld   $be
              1d8b 0075  ld   $75
              1d8c 002b  ld   $2b
              1d8d 003c  ld   $3c
              1d8e 0021  ld   $21
              1d8f 003c  ld   $3c
              1d90 00ad  ld   $ad
              1d91 0035  ld   $35
              1d92 003f  ld   $3f
              1d93 00bc  ld   $bc
              1d94 008c  ld   $8c
              1d95 000a  ld   $0a
              1d96 0035  ld   $35
              1d97 003f  ld   $3f
              1d98 00b5  ld   $b5
              1d99 008c  ld   $8c
              1d9a 000a  ld   $0a
              1d9b 0085  ld   $85
              1d9c 00a2  ld   $a2
              1d9d 006e  ld   $6e
              1d9e 0090  ld   $90
              1d9f 00b8  ld   $b8
              1da0 0085  ld   $85
              1da1 00a2  ld   $a2
              1da2 006d  ld   $6d
              1da3 0093  ld   $93
              1da4 003c  ld   $3c
              1da5 0090  ld   $90
              1da6 00a3  ld   $a3
              1da7 0063  ld   $63
              1da8 00ff  ld   $ff
              1da9 00cd  ld   $cd
              1daa 00ea  ld   $ea
              1dab 0075  ld   $75
              1dac 00cd  ld   $cd
              1dad 00cb  ld   $cb
              1dae 0056  ld   $56
              1daf 006f  ld   $6f
              1db0 006c  ld   $6c
              1db1 0075  ld   $75
              1db2 006d  ld   $6d
              1db3 0065  ld   $65
              1db4 0020  ld   $20
              1db5 0000  ld   $00
              1db6 0085  ld   $85
              1db7 00a2  ld   $a2
              1db8 0069  ld   $69
              1db9 0021  ld   $21
              1dba 003a  ld   $3a
              1dbb 002b  ld   $2b
              1dbc 003c  ld   $3c
              1dbd 0059  ld   $59
              1dbe 000b  ld   $0b
              1dbf 002b  ld   $2b
              1dc0 0046  ld   $46
              1dc1 0021  ld   $21
              1dc2 003c  ld   $3c
              1dc3 00ad  ld   $ad
              1dc4 0093  ld   $93
              1dc5 003c  ld   $3c
              1dc6 0085  ld   $85
              1dc7 00a2  ld   $a2
              1dc8 0067  ld   $67
              1dc9 0021  ld   $21
              1dca 0046  ld   $46
              1dcb 00e6  ld   $e6
              1dcc 0001  ld   $01
              1dcd 0035  ld   $35
              1dce 004d  ld   $4d
              1dcf 00d4  ld   $d4
              1dd0 0085  ld   $85
              1dd1 00a2  ld   $a2
              1dd2 006d  ld   $6d
              1dd3 0063  ld   $63
              1dd4 00ff  ld   $ff
              1dd5 0093  ld   $93
              1dd6 001b  ld   $1b
              1dd7 00ff  ld   $ff
              1dd8 006a  ld   $6a
              1dd9 00a0  ld   $a0
              1dda 0050  ld   $50
              1ddb 00cd  ld   $cd
              1ddc 00b5  ld   $b5
              1ddd 0075  ld   $75
              1dde 002b  ld   $2b
              1ddf 006c  ld   $6c
              1de0 0059  ld   $59
              1de1 0030  ld   $30
              1de2 002b  ld   $2b
              1de3 0046  ld   $46
              1de4 0059  ld   $59
              1de5 000a  ld   $0a
              1de6 0085  ld   $85
              1de7 00a2  ld   $a2
              1de8 006c  ld   $6c
              1de9 0021  ld   $21
              1dea 006c  ld   $6c
              1deb 00e3  ld   $e3
              1dec 0030  ld   $30
              1ded 0085  ld   $85
              1dee 00a2  ld   $a2
              1def 006e  ld   $6e
              1df0 0063  ld   $63
              1df1 00ff  ld   $ff
              1df2 00cd  ld   $cd
              1df3 00eb  ld   $eb
              1df4 0075  ld   $75
              1df5 0011  ld   $11
              1df6 0000  ld   $00
              1df7 0006  ld   $06
              1df8 002b  ld   $2b
              1df9 0022  ld   $22
              1dfa 0021  ld   $21
              1dfb fe00  bra  ac          ;+-----------------------------------+
              1dfc fcfd  bra  $1dfd       ;|                                   |
              1dfd 1404  ld   $04,y       ;| Trampoline for page $1d00 lookups |
              1dfe e068  jmp  y,$68       ;|                                   |
              1dff c218  st   [$18]       ;+-----------------------------------+
              1e00 003a  ld   $3a
              1e01 00e3  ld   $e3
              1e02 0011  ld   $11
              1e03 00ad  ld   $ad
              1e04 00b4  ld   $b4
              1e05 00f6  ld   $f6
              1e06 00e6  ld   $e6
              1e07 0014  ld   $14
              1e08 0035  ld   $35
              1e09 0053  ld   $53
              1e0a 00cb  ld   $cb
              1e0b 00e3  ld   $e3
              1e0c 0064  ld   $64
              1e0d 0085  ld   $85
              1e0e 00a2  ld   $a2
              1e0f 006a  ld   $6a
              1e10 0011  ld   $11
              1e11 006d  ld   $6d
              1e12 0006  ld   $06
              1e13 002b  ld   $2b
              1e14 0022  ld   $22
              1e15 0021  ld   $21
              1e16 003a  ld   $3a
              1e17 00e3  ld   $e3
              1e18 0010  ld   $10
              1e19 00f6  ld   $f6
              1e1a 00b4  ld   $b4
              1e1b 00f5  ld   $f5
              1e1c 0082  ld   $82
              1e1d 000f  ld   $0f
              1e1e 0085  ld   $85
              1e1f 00a2  ld   $a2
              1e20 006a  ld   $6a
              1e21 0021  ld   $21
              1e22 003a  ld   $3a
              1e23 00e3  ld   $e3
              1e24 0010  ld   $10
              1e25 00ad  ld   $ad
              1e26 0082  ld   $82
              1e27 001f  ld   $1f
              1e28 0085  ld   $85
              1e29 00a2  ld   $a2
              1e2a 006a  ld   $6a
              1e2b 0063  ld   $63
              1e2c 00ff  ld   $ff
              1e2d 0093  ld   $93
              1e2e 001b  ld   $1b
              1e2f 00ff  ld   $ff
              1e30 006b  ld   $6b
              1e31 00a0  ld   $a0
              1e32 0055  ld   $55
              1e33 00cd  ld   $cd
              1e34 00bb  ld   $bb
              1e35 0075  ld   $75
              1e36 0085  ld   $85
              1e37 00b9  ld   $b9
              1e38 006a  ld   $6a
              1e39 0059  ld   $59
              1e3a 0004  ld   $04
              1e3b 0099  ld   $99
              1e3c 006e  ld   $6e
              1e3d 002b  ld   $2b
              1e3e 006e  ld   $6e
              1e3f 0085  ld   $85
              1e40 00a2  ld   $a2
              1e41 0070  ld   $70
              1e42 0059  ld   $59
              1e43 0004  ld   $04
              1e44 0099  ld   $99
              1e45 006e  ld   $6e
              1e46 002b  ld   $2b
              1e47 006e  ld   $6e
              1e48 0085  ld   $85
              1e49 00bf  ld   $bf
              1e4a 006b  ld   $6b
              1e4b 0085  ld   $85
              1e4c 00a2  ld   $a2
              1e4d 006d  ld   $6d
              1e4e 0063  ld   $63
              1e4f 00ff  ld   $ff
              1e50 00cd  ld   $cd
              1e51 00f0  ld   $f0
              1e52 0075  ld   $75
              1e53 0021  ld   $21
              1e54 003a  ld   $3a
              1e55 002b  ld   $2b
              1e56 003c  ld   $3c
              1e57 0059  ld   $59
              1e58 000b  ld   $0b
              1e59 002b  ld   $2b
              1e5a 0046  ld   $46
              1e5b 008c  ld   $8c
              1e5c 0003  ld   $03
              1e5d 0035  ld   $35
              1e5e 0072  ld   $72
              1e5f 00d8  ld   $d8
              1e60 0021  ld   $21
              1e61 003c  ld   $3c
              1e62 00ad  ld   $ad
              1e63 008c  ld   $8c
              1e64 0020  ld   $20
              1e65 0035  ld   $35
              1e66 003f  ld   $3f
              1e67 00d8  ld   $d8
              1e68 0059  ld   $59
              1e69 002e  ld   $2e
              1e6a 0085  ld   $85
              1e6b 00a2  ld   $a2
              1e6c 006e  ld   $6e
              1e6d 0021  ld   $21
              1e6e 003c  ld   $3c
              1e6f 00ad  ld   $ad
              1e70 0093  ld   $93
              1e71 003c  ld   $3c
              1e72 008c  ld   $8c
              1e73 0020  ld   $20
              1e74 0035  ld   $35
              1e75 003f  ld   $3f
              1e76 00e7  ld   $e7
              1e77 008c  ld   $8c
              1e78 0020  ld   $20
              1e79 0085  ld   $85
              1e7a 00a2  ld   $a2
              1e7b 0067  ld   $67
              1e7c 0021  ld   $21
              1e7d 0046  ld   $46
              1e7e 00e6  ld   $e6
              1e7f 0001  ld   $01
              1e80 0035  ld   $35
              1e81 004d  ld   $4d
              1e82 00c4  ld   $c4
              1e83 0063  ld   $63
              1e84 00ff  ld   $ff
              1e85 0093  ld   $93
              1e86 001b  ld   $1b
              1e87 00ff  ld   $ff
              1e88 006c  ld   $6c
              1e89 00a0  ld   $a0
              1e8a 002c  ld   $2c
              1e8b 00cd  ld   $cd
              1e8c 00c7  ld   $c7
              1e8d 0075  ld   $75
              1e8e 002b  ld   $2b
              1e8f 0034  ld   $34
              1e90 0021  ld   $21
              1e91 006c  ld   $6c
              1e92 00b8  ld   $b8
              1e93 0034  ld   $34
              1e94 0035  ld   $35
              1e95 0050  ld   $50
              1e96 00b0  ld   $b0
              1e97 002b  ld   $2b
              1e98 006c  ld   $6c
              1e99 0093  ld   $93
              1e9a 0046  ld   $46
              1e9b 0090  ld   $90
              1e9c 00a5  ld   $a5
              1e9d 0021  ld   $21
              1e9e 0046  ld   $46
              1e9f 0035  ld   $35
              1ea0 0072  ld   $72
              1ea1 00bc  ld   $bc
              1ea2 0059  ld   $59
              1ea3 0020  ld   $20
              1ea4 0085  ld   $85
              1ea5 00a2  ld   $a2
              1ea6 006e  ld   $6e
              1ea7 0090  ld   $90
              1ea8 00c5  ld   $c5
              1ea9 0088  ld   $88
              1eaa 0030  ld   $30
              1eab 0085  ld   $85
              1eac 00a2  ld   $a2
              1ead 006e  ld   $6e
              1eae 0059  ld   $59
              1eaf 0030  ld   $30
              1eb0 002b  ld   $2b
              1eb1 0046  ld   $46
              1eb2 0063  ld   $63
              1eb3 00ff  ld   $ff
              1eb4 0093  ld   $93
              1eb5 001b  ld   $1b
              1eb6 00ff  ld   $ff
              1eb7 006d  ld   $6d
              1eb8 00a0  ld   $a0
              1eb9 004c  ld   $4c
              1eba 00cd  ld   $cd
              1ebb 00e7  ld   $e7
              1ebc 0011  ld   $11
              1ebd 0000  ld   $00
              1ebe 003f  ld   $3f
              1ebf 002b  ld   $2b
              1ec0 0024  ld   $24
              1ec1 0059  ld   $59
              1ec2 0000  ld   $00
              1ec3 005e  ld   $5e
              1ec4 006e  ld   $6e
              1ec5 0011  ld   $11
              1ec6 0020  ld   $20
              1ec7 0001  ld   $01
              1ec8 00ad  ld   $ad
              1ec9 005e  ld   $5e
              1eca 006f  ld   $6f
              1ecb 0021  ld   $21
              1ecc 006e  ld   $6e
              1ecd 002b  ld   $2b
              1ece 0028  ld   $28
              1ecf 005e  ld   $5e
              1ed0 0026  ld   $26
              1ed1 0011  ld   $11
              1ed2 00e1  ld   $e1
              1ed3 0004  ld   $04
              1ed4 002b  ld   $2b
              1ed5 0022  ld   $22
              1ed6 00b4  ld   $b4
              1ed7 00cb  ld   $cb
              1ed8 0093  ld   $93
              1ed9 0028  ld   $28
              1eda 001a  ld   $1a
              1edb 0028  ld   $28
              1edc 008c  ld   $8c
              1edd 00a0  ld   $a0
              1ede 0035  ld   $35
              1edf 0072  ld   $72
              1ee0 00b5  ld   $b5
              1ee1 0059  ld   $59
              1ee2 0001  ld   $01
              1ee3 005e  ld   $5e
              1ee4 0035  ld   $35
              1ee5 0059  ld   $59
              1ee6 00c0  ld   $c0
              1ee7 00e3  ld   $e3
              1ee8 001e  ld   $1e
              1ee9 005e  ld   $5e
              1eea 0034  ld   $34
              1eeb 0021  ld   $21
              1eec 0034  ld   $34
              1eed 00ad  ld   $ad
              1eee 00e6  ld   $e6
              1eef 0070  ld   $70
              1ef0 0035  ld   $35
              1ef1 0053  ld   $53
              1ef2 00db  ld   $db
              1ef3 00e3  ld   $e3
              1ef4 0078  ld   $78
              1ef5 0090  ld   $90
              1ef6 00dd  ld   $dd
              1ef7 00e3  ld   $e3
              1ef8 0018  ld   $18
              1ef9 00f0  ld   $f0
              1efa 0034  ld   $34
              1efb fe00  bra  ac          ;+-----------------------------------+
              1efc fcfd  bra  $1efd       ;|                                   |
              1efd 1404  ld   $04,y       ;| Trampoline for page $1e00 lookups |
              1efe e068  jmp  y,$68       ;|                                   |
              1eff c218  st   [$18]       ;+-----------------------------------+
              1f00 001a  ld   $1a
              1f01 0034  ld   $34
              1f02 00e6  ld   $e6
              1f03 0020  ld   $20
              1f04 0035  ld   $35
              1f05 004d  ld   $4d
              1f06 00cb  ld   $cb
              1f07 00ff  ld   $ff
              1f08 0093  ld   $93
              1f09 001b  ld   $1b
              1f0a 00ff  ld   $ff
              1f0b 006e  ld   $6e
              1f0c 00a0  ld   $a0
              1f0d 004e  ld   $4e
              1f0e 00cd  ld   $cd
              1f0f 00e9  ld   $e9
              1f10 00e6  ld   $e6
              1f11 0052  ld   $52
              1f12 0035  ld   $35
              1f13 0053  ld   $53
              1f14 00ae  ld   $ae
              1f15 00e3  ld   $e3
              1f16 0032  ld   $32
              1f17 002b  ld   $2b
              1f18 0034  ld   $34
              1f19 0011  ld   $11
              1f1a 0000  ld   $00
              1f1b 0007  ld   $07
              1f1c 0090  ld   $90
              1f1d 00b3  ld   $b3
              1f1e 002b  ld   $2b
              1f1f 0034  ld   $34
              1f20 0011  ld   $11
              1f21 0000  ld   $00
              1f22 0008  ld   $08
              1f23 002b  ld   $2b
              1f24 0070  ld   $70
              1f25 0021  ld   $21
              1f26 0034  ld   $34
              1f27 00e9  ld   $e9
              1f28 00e9  ld   $e9
              1f29 0099  ld   $99
              1f2a 0034  ld   $34
              1f2b 0099  ld   $99
              1f2c 0070  ld   $70
              1f2d 002b  ld   $2b
              1f2e 0070  ld   $70
              1f2f 0011  ld   $11
              1f30 0000  ld   $00
              1f31 003f  ld   $3f
              1f32 002b  ld   $2b
              1f33 0024  ld   $24
              1f34 0021  ld   $21
              1f35 006e  ld   $6e
              1f36 002b  ld   $2b
              1f37 0028  ld   $28
              1f38 00e3  ld   $e3
              1f39 0006  ld   $06
              1f3a 002b  ld   $2b
              1f3b 006e  ld   $6e
              1f3c 0011  ld   $11
              1f3d 00e1  ld   $e1
              1f3e 0004  ld   $04
              1f3f 002b  ld   $2b
              1f40 0022  ld   $22
              1f41 0059  ld   $59
              1f42 0005  ld   $05
              1f43 002b  ld   $2b
              1f44 0034  ld   $34
              1f45 0021  ld   $21
              1f46 0070  ld   $70
              1f47 007f  ld   $7f
              1f48 0000  ld   $00
              1f49 005e  ld   $5e
              1f4a 0026  ld   $26
              1f4b 00b4  ld   $b4
              1f4c 00cb  ld   $cb
              1f4d 0093  ld   $93
              1f4e 0070  ld   $70
              1f4f 0093  ld   $93
              1f50 0028  ld   $28
              1f51 0021  ld   $21
              1f52 0034  ld   $34
              1f53 00e6  ld   $e6
              1f54 0001  ld   $01
              1f55 0035  ld   $35
              1f56 004d  ld   $4d
              1f57 00d3  ld   $d3
              1f58 00ff  ld   $ff
              1f59 0093  ld   $93
              1f5a 001b  ld   $1b
              1f5b 00ff  ld   $ff
              1f5c 006f  ld   $6f
              1f5d 00a0  ld   $a0
              1f5e 004f  ld   $4f
              1f5f 00cd  ld   $cd
              1f60 00ea  ld   $ea
              1f61 0075  ld   $75
              1f62 0085  ld   $85
              1f63 00a2  ld   $a2
              1f64 0064  ld   $64
              1f65 0021  ld   $21
              1f66 006a  ld   $6a
              1f67 002b  ld   $2b
              1f68 003a  ld   $3a
              1f69 00ad  ld   $ad
              1f6a 0035  ld   $35
              1f6b 003f  ld   $3f
              1f6c 00e8  ld   $e8
              1f6d 008c  ld   $8c
              1f6e 00e5  ld   $e5
              1f6f 0035  ld   $35
              1f70 003f  ld   $3f
              1f71 00e1  ld   $e1
              1f72 0021  ld   $21
              1f73 003a  ld   $3a
              1f74 00e3  ld   $e3
              1f75 000b  ld   $0b
              1f76 00ad  ld   $ad
              1f77 002b  ld   $2b
              1f78 0046  ld   $46
              1f79 008c  ld   $8c
              1f7a 000f  ld   $0f
              1f7b 0035  ld   $35
              1f7c 003f  ld   $3f
              1f7d 00e1  ld   $e1
              1f7e 0082  ld   $82
              1f7f 0002  ld   $02
              1f80 0035  ld   $35
              1f81 003f  ld   $3f
              1f82 00e1  ld   $e1
              1f83 0021  ld   $21
              1f84 0046  ld   $46
              1f85 0082  ld   $82
              1f86 0008  ld   $08
              1f87 0035  ld   $35
              1f88 003f  ld   $3f
              1f89 00ce  ld   $ce
              1f8a 0085  ld   $85
              1f8b 00c2  ld   $c2
              1f8c 0069  ld   $69
              1f8d 0090  ld   $90
              1f8e 00e1  ld   $e1
              1f8f 0085  ld   $85
              1f90 00a2  ld   $a2
              1f91 006b  ld   $6b
              1f92 0085  ld   $85
              1f93 00a2  ld   $a2
              1f94 0074  ld   $74
              1f95 0035  ld   $35
              1f96 0072  ld   $72
              1f97 00e1  ld   $e1
              1f98 0059  ld   $59
              1f99 00d0  ld   $d0
              1f9a 00f0  ld   $f0
              1f9b 0032  ld   $32
              1f9c 0085  ld   $85
              1f9d 00a2  ld   $a2
              1f9e 0073  ld   $73
              1f9f 0085  ld   $85
              1fa0 00cd  ld   $cd
              1fa1 0074  ld   $74
              1fa2 0059  ld   $59
              1fa3 0020  ld   $20
              1fa4 0085  ld   $85
              1fa5 00c6  ld   $c6
              1fa6 0075  ld   $75
              1fa7 0090  ld   $90
              1fa8 00a1  ld   $a1
              1fa9 0063  ld   $63
              1faa 00ff  ld   $ff
              1fab 0093  ld   $93
              1fac 001b  ld   $1b
              1fad 00ff  ld   $ff
              1fae 0070  ld   $70
              1faf 00a0  ld   $a0
              1fb0 005e  ld   $5e
              1fb1 00cd  ld   $cd
              1fb2 00f9  ld   $f9
              1fb3 0075  ld   $75
              1fb4 0021  ld   $21
              1fb5 003a  ld   $3a
              1fb6 00e3  ld   $e3
              1fb7 000b  ld   $0b
              1fb8 00ad  ld   $ad
              1fb9 0082  ld   $82
              1fba 0010  ld   $10
              1fbb 0035  ld   $35
              1fbc 003f  ld   $3f
              1fbd 00b7  ld   $b7
              1fbe 00cd  ld   $cd
              1fbf 00b5  ld   $b5
              1fc0 0020  ld   $20
              1fc1 0020  ld   $20
              1fc2 003c  ld   $3c
              1fc3 0044  ld   $44
              1fc4 0049  ld   $49
              1fc5 0052  ld   $52
              1fc6 003e  ld   $3e
              1fc7 0000  ld   $00
              1fc8 0090  ld   $90
              1fc9 00f4  ld   $f4
              1fca 0021  ld   $21
              1fcb 003a  ld   $3a
              1fcc 00e3  ld   $e3
              1fcd 001c  ld   $1c
              1fce 00f6  ld   $f6
              1fcf 002b  ld   $2b
              1fd0 004c  ld   $4c
              1fd1 0021  ld   $21
              1fd2 003a  ld   $3a
              1fd3 00e3  ld   $e3
              1fd4 001e  ld   $1e
              1fd5 00f6  ld   $f6
              1fd6 002b  ld   $2b
              1fd7 004e  ld   $4e
              1fd8 0085  ld   $85
              1fd9 00a2  ld   $a2
              1fda 0071  ld   $71
              1fdb 0059  ld   $59
              1fdc 0000  ld   $00
              1fdd 002b  ld   $2b
              1fde 0070  ld   $70
              1fdf 0059  ld   $59
              1fe0 0008  ld   $08
              1fe1 002b  ld   $2b
              1fe2 0034  ld   $34
              1fe3 0021  ld   $21
              1fe4 003c  ld   $3c
              1fe5 00ad  ld   $ad
              1fe6 008c  ld   $8c
              1fe7 0030  ld   $30
              1fe8 0035  ld   $35
              1fe9 0072  ld   $72
              1fea 00f0  ld   $f0
              1feb 0021  ld   $21
              1fec 0034  ld   $34
              1fed 00e6  ld   $e6
              1fee 0006  ld   $06
              1fef 0035  ld   $35
              1ff0 0053  ld   $53
              1ff1 00e5  ld   $e5
              1ff2 0059  ld   $59
              1ff3 0020  ld   $20
              1ff4 00f0  ld   $f0
              1ff5 003c  ld   $3c
              1ff6 0090  ld   $90
              1ff7 00e7  ld   $e7
              1ff8 0093  ld   $93
              1ff9 0070  ld   $70
              1ffa 0093  ld   $93
              1ffb fe00  bra  ac          ;+-----------------------------------+
              1ffc fcfd  bra  $1ffd       ;|                                   |
              1ffd 1404  ld   $04,y       ;| Trampoline for page $1f00 lookups |
              1ffe e068  jmp  y,$68       ;|                                   |
              1fff c218  st   [$18]       ;+-----------------------------------+
              2000 003c  ld   $3c
              2001 0021  ld   $21
              2002 0034  ld   $34
              2003 00e6  ld   $e6
              2004 0001  ld   $01
              2005 0035  ld   $35
              2006 0053  ld   $53
              2007 00ce  ld   $ce
              2008 0021  ld   $21
              2009 0044  ld   $44
              200a 0099  ld   $99
              200b 0070  ld   $70
              200c 0085  ld   $85
              200d 00a2  ld   $a2
              200e 0069  ld   $69
              200f 0063  ld   $63
              2010 00ff  ld   $ff
              2011 0093  ld   $93
              2012 001b  ld   $1b
              2013 00ff  ld   $ff
              2014 0071  ld   $71
              2015 00a0  ld   $a0
              2016 0060  ld   $60
              2017 00cd  ld   $cd
              2018 00fb  ld   $fb
              2019 0075  ld   $75
              201a 0059  ld   $59
              201b 0009  ld   $09
              201c 002b  ld   $2b
              201d 0034  ld   $34
              201e 0021  ld   $21
              201f 0044  ld   $44
              2020 0099  ld   $99
              2021 0034  ld   $34
              2022 002b  ld   $2b
              2023 003c  ld   $3c
              2024 0059  ld   $59
              2025 0030  ld   $30
              2026 00f0  ld   $f0
              2027 003c  ld   $3c
              2028 0021  ld   $21
              2029 0034  ld   $34
              202a 00e6  ld   $e6
              202b 0001  ld   $01
              202c 0035  ld   $35
              202d 0053  ld   $53
              202e 00a3  ld   $a3
              202f 0059  ld   $59
              2030 001f  ld   $1f
              2031 002b  ld   $2b
              2032 0070  ld   $70
              2033 0085  ld   $85
              2034 00c2  ld   $c2
              2035 0066  ld   $66
              2036 0035  ld   $35
              2037 0050  ld   $50
              2038 00c4  ld   $c4
              2039 0059  ld   $59
              203a 006a  ld   $6a
              203b 0090  ld   $90
              203c 00c6  ld   $c6
              203d 0059  ld   $59
              203e 0069  ld   $69
              203f 002b  ld   $2b
              2040 0046  ld   $46
              2041 0059  ld   $59
              2042 0009  ld   $09
              2043 002b  ld   $2b
              2044 0034  ld   $34
              2045 0021  ld   $21
              2046 0044  ld   $44
              2047 0099  ld   $99
              2048 0034  ld   $34
              2049 002b  ld   $2b
              204a 003c  ld   $3c
              204b 0021  ld   $21
              204c 003c  ld   $3c
              204d 00ad  ld   $ad
              204e 00e9  ld   $e9
              204f 00b8  ld   $b8
              2050 0046  ld   $46
              2051 0035  ld   $35
              2052 0053  ld   $53
              2053 00e3  ld   $e3
              2054 00e3  ld   $e3
              2055 003a  ld   $3a
              2056 00f0  ld   $f0
              2057 003c  ld   $3c
              2058 0059  ld   $59
              2059 006a  ld   $6a
              205a 0090  ld   $90
              205b 00e9  ld   $e9
              205c 00e3  ld   $e3
              205d 0030  ld   $30
              205e 00f0  ld   $f0
              205f 003c  ld   $3c
              2060 0059  ld   $59
              2061 0069  ld   $69
              2062 002b  ld   $2b
              2063 0046  ld   $46
              2064 0021  ld   $21
              2065 0034  ld   $34
              2066 00e6  ld   $e6
              2067 0001  ld   $01
              2068 0035  ld   $35
              2069 0053  ld   $53
              206a 00ca  ld   $ca
              206b 0021  ld   $21
              206c 0070  ld   $70
              206d 00e6  ld   $e6
              206e 0001  ld   $01
              206f 0035  ld   $35
              2070 0053  ld   $53
              2071 00b8  ld   $b8
              2072 0063  ld   $63
              2073 00ff  ld   $ff
              2074 0093  ld   $93
              2075 001b  ld   $1b
              2076 00ff  ld   $ff
              2077 0072  ld   $72
              2078 00a0  ld   $a0
              2079 004f  ld   $4f
              207a 00cd  ld   $cd
              207b 00ab  ld   $ab
              207c 002d  ld   $2d
              207d 002d  ld   $2d
              207e 002d  ld   $2d
              * 10 times
              2086 0000  ld   $00
              2087 002b  ld   $2b
              2088 0044  ld   $44
              2089 00cd  ld   $cd
              208a 00ea  ld   $ea
              208b 0075  ld   $75
              208c 005e  ld   $5e
              208d 0025  ld   $25
              208e 0011  ld   $11
              208f 0003  ld   $03
              2090 000b  ld   $0b
              2091 002b  ld   $2b
              2092 0022  ld   $22
              2093 0059  ld   $59
              2094 0018  ld   $18
              2095 002b  ld   $2b
              2096 0034  ld   $34
              2097 0011  ld   $11
              2098 0020  ld   $20
              2099 0001  ld   $01
              209a 002b  ld   $2b
              209b 0046  ld   $46
              209c 0021  ld   $21
              209d 0034  ld   $34
              209e 00f0  ld   $f0
              209f 0046  ld   $46
              20a0 005e  ld   $5e
              20a1 0027  ld   $27
              20a2 0059  ld   $59
              20a3 0000  ld   $00
              20a4 005e  ld   $5e
              20a5 0026  ld   $26
              20a6 0059  ld   $59
              20a7 00a0  ld   $a0
              20a8 005e  ld   $5e
              20a9 0024  ld   $24
              20aa 00b4  ld   $b4
              20ab 00f3  ld   $f3
              20ac 0059  ld   $59
              20ad 0001  ld   $01
              20ae 0099  ld   $99
              20af 0034  ld   $34
              20b0 002b  ld   $2b
              20b1 0034  ld   $34
              20b2 0059  ld   $59
              20b3 0002  ld   $02
              20b4 0099  ld   $99
              20b5 0046  ld   $46
              20b6 002b  ld   $2b
              20b7 0046  ld   $46
              20b8 0011  ld   $11
              20b9 00f0  ld   $f0
              20ba 0001  ld   $01
              20bb 00fc  ld   $fc
              20bc 0046  ld   $46
              20bd 0035  ld   $35
              20be 0072  ld   $72
              20bf 00c0  ld   $c0
              20c0 0059  ld   $59
              20c1 0000  ld   $00
              20c2 00f0  ld   $f0
              20c3 0032  ld   $32
              20c4 0063  ld   $63
              20c5 00ff  ld   $ff
              20c6 0093  ld   $93
              20c7 001b  ld   $1b
              20c8 00ff  ld   $ff
              20c9 0073  ld   $73
              20ca 00a0  ld   $a0
              20cb 0056  ld   $56
              20cc 00cd  ld   $cd
              20cd 00f1  ld   $f1
              20ce 0075  ld   $75
              20cf 00cd  ld   $cd
              20d0 00ac  ld   $ac
              20d1 004c  ld   $4c
              20d2 006f  ld   $6f
              20d3 0061  ld   $61
              20d4 0064  ld   $64
              20d5 0069  ld   $69
              20d6 006e  ld   $6e
              20d7 0067  ld   $67
              20d8 0020  ld   $20
              20d9 0000  ld   $00
              20da 0085  ld   $85
              20db 00a2  ld   $a2
              20dc 0069  ld   $69
              20dd 0085  ld   $85
              20de 00bf  ld   $bf
              20df 006b  ld   $6b
              20e0 0085  ld   $85
              20e1 00a2  ld   $a2
              20e2 0065  ld   $65
              20e3 0085  ld   $85
              20e4 00de  ld   $de
              20e5 0075  ld   $75
              20e6 005e  ld   $5e
              20e7 0073  ld   $73
              20e8 0085  ld   $85
              20e9 00de  ld   $de
              20ea 0075  ld   $75
              20eb 005e  ld   $5e
              20ec 0072  ld   $72
              20ed 0085  ld   $85
              20ee 00de  ld   $de
              20ef 0075  ld   $75
              20f0 00e6  ld   $e6
              20f1 0001  ld   $01
              20f2 0082  ld   $82
              20f3 00ff  ld   $ff
              20f4 00e3  ld   $e3
              20f5 0001  ld   $01
              20f6 002b  ld   $2b
              20f7 0074  ld   $74
              20f8 0085  ld   $85
              20f9 00a2  ld   $a2
              20fa 0078  ld   $78
              20fb fe00  bra  ac          ;+-----------------------------------+
              20fc fcfd  bra  $20fd       ;|                                   |
              20fd 1404  ld   $04,y       ;| Trampoline for page $2000 lookups |
              20fe e068  jmp  y,$68       ;|                                   |
              20ff c218  st   [$18]       ;+-----------------------------------+
              2100 0021  ld   $21
              2101 0074  ld   $74
              2102 0035  ld   $35
              2103 0072  ld   $72
              2104 00d8  ld   $d8
              2105 0085  ld   $85
              2106 00de  ld   $de
              2107 0075  ld   $75
              2108 0035  ld   $35
              2109 0072  ld   $72
              210a 00b8  ld   $b8
              210b 0085  ld   $85
              210c 00de  ld   $de
              210d 0075  ld   $75
              210e 005e  ld   $5e
              210f 0073  ld   $73
              2110 0085  ld   $85
              2111 00de  ld   $de
              2112 0075  ld   $75
              2113 005e  ld   $5e
              2114 0072  ld   $72
              2115 0085  ld   $85
              2116 00de  ld   $de
              2117 0075  ld   $75
              2118 0035  ld   $35
              2119 0050  ld   $50
              211a 00ec  ld   $ec
              211b 0059  ld   $59
              211c 0000  ld   $00
              211d 002b  ld   $2b
              211e 0072  ld   $72
              211f 0085  ld   $85
              2120 00af  ld   $af
              2121 005d  ld   $5d
              2122 0063  ld   $63
              2123 00ff  ld   $ff
              2124 0093  ld   $93
              2125 001b  ld   $1b
              2126 00ff  ld   $ff
              2127 0074  ld   $74
              2128 00a0  ld   $a0
              2129 003c  ld   $3c
              212a 00cd  ld   $cd
              212b 00c9  ld   $c9
              212c 00cd  ld   $cd
              212d 00ae  ld   $ae
              212e 0053  ld   $53
              212f 0059  ld   $59
              2130 0053  ld   $53
              2131 0054  ld   $54
              2132 0045  ld   $45
              2133 004d  ld   $4d
              2134 0020  ld   $20
              2135 0020  ld   $20
              2136 0047  ld   $47
              2137 0054  ld   $54
              2138 0031  ld   $31
              2139 0000  ld   $00
              213a 002b  ld   $2b
              213b 003c  ld   $3c
              213c 0021  ld   $21
              213d 003a  ld   $3a
              213e 002b  ld   $2b
              213f 0034  ld   $34
              2140 0021  ld   $21
              2141 003c  ld   $3c
              2142 00ad  ld   $ad
              2143 0093  ld   $93
              2144 003c  ld   $3c
              2145 0035  ld   $35
              2146 003f  ld   $3f
              2147 00c8  ld   $c8
              2148 002b  ld   $2b
              2149 0070  ld   $70
              214a 0021  ld   $21
              214b 0034  ld   $34
              214c 00ad  ld   $ad
              214d 0093  ld   $93
              214e 0034  ld   $34
              214f 00fc  ld   $fc
              2150 0070  ld   $70
              2151 0035  ld   $35
              2152 003f  ld   $3f
              2153 00b4  ld   $b4
              2154 00ff  ld   $ff
              2155 00cd  ld   $cd
              2156 00d7  ld   $d7
              2157 0059  ld   $59
              2158 0020  ld   $20
              2159 0085  ld   $85
              215a 00b1  ld   $b1
              215b 0072  ld   $72
              215c 0021  ld   $21
              215d 0072  ld   $72
              215e 0035  ld   $35
              215f 003f  ld   $3f
              2160 00d2  ld   $d2
              2161 00cf  ld   $cf
              2162 0018  ld   $18
              2163 0093  ld   $93
              2164 001b  ld   $1b
              2165 00ff  ld   $ff
              2166 0075  ld   $75
              2167 00a0  ld   $a0
              2168 0059  ld   $59
              2169 00cd  ld   $cd
              216a 00c2  ld   $c2
              216b 0075  ld   $75
              216c 0093  ld   $93
              216d 0040  ld   $40
              216e 0011  ld   $11
              216f 0000  ld   $00
              2170 0002  ld   $02
              2171 0099  ld   $99
              2172 0064  ld   $64
              2173 00f8  ld   $f8
              2174 004a  ld   $4a
              2175 0035  ld   $35
              2176 0072  ld   $72
              2177 00c0  ld   $c0
              2178 0021  ld   $21
              2179 0076  ld   $76
              217a 00e3  ld   $e3
              217b 0004  ld   $04
              217c 002b  ld   $2b
              217d 0076  ld   $76
              217e 00f6  ld   $f6
              217f 002b  ld   $2b
              2180 004c  ld   $4c
              2181 0021  ld   $21
              2182 0076  ld   $76
              2183 00e3  ld   $e3
              2184 0002  ld   $02
              2185 00f6  ld   $f6
              2186 002b  ld   $2b
              2187 004e  ld   $4e
              2188 0085  ld   $85
              2189 00cf  ld   $cf
              218a 0065  ld   $65
              218b 0063  ld   $63
              218c 00ff  ld   $ff
              218d 00cd  ld   $cd
              218e 00da  ld   $da
              218f 002b  ld   $2b
              2190 0034  ld   $34
              2191 0099  ld   $99
              2192 0064  ld   $64
              2193 002b  ld   $2b
              2194 0064  ld   $64
              2195 0035  ld   $35
              2196 0072  ld   $72
              2197 00d3  ld   $d3
              2198 0059  ld   $59
              2199 0001  ld   $01
              219a 0099  ld   $99
              219b 0060  ld   $60
              219c 002b  ld   $2b
              219d 0060  ld   $60
              219e 0021  ld   $21
              219f 0068  ld   $68
              21a0 00b8  ld   $b8
              21a1 0034  ld   $34
              21a2 002b  ld   $2b
              21a3 0068  ld   $68
              21a4 00ff  ld   $ff
              21a5 00cd  ld   $cd
              21a6 00f4  ld   $f4
              21a7 0075  ld   $75
              21a8 0085  ld   $85
              21a9 00a2  ld   $a2
              21aa 0064  ld   $64
              21ab 0035  ld   $35
              21ac 0056  ld   $56
              21ad 00ef  ld   $ef
              21ae 0059  ld   $59
              21af 0001  ld   $01
              21b0 0085  ld   $85
              21b1 00c6  ld   $c6
              21b2 0075  ld   $75
              21b3 0021  ld   $21
              21b4 006a  ld   $6a
              21b5 00ad  ld   $ad
              21b6 0093  ld   $93
              21b7 006a  ld   $6a
              21b8 0090  ld   $90
              21b9 00f2  ld   $f2
              21ba 0011  ld   $11
              21bb 00ff  ld   $ff
              21bc 00ff  ld   $ff
              21bd 0063  ld   $63
              21be 00ff  ld   $ff
              21bf 0093  ld   $93
              21c0 001b  ld   $1b
              21c1 00ff  ld   $ff
              21c2 0076  ld   $76
              21c3 00a0  ld   $a0
              21c4 0044  ld   $44
              21c5 00cd  ld   $cd
              21c6 00df  ld   $df
              21c7 0075  ld   $75
              21c8 0011  ld   $11
              21c9 0000  ld   $00
              21ca 007f  ld   $7f
              21cb 002b  ld   $2b
              21cc 0076  ld   $76
              21cd 0021  ld   $21
              21ce 004c  ld   $4c
              21cf 00f3  ld   $f3
              21d0 0076  ld   $76
              21d1 0093  ld   $93
              21d2 0076  ld   $76
              21d3 0093  ld   $93
              21d4 0076  ld   $76
              21d5 0021  ld   $21
              21d6 004e  ld   $4e
              21d7 00f3  ld   $f3
              21d8 0076  ld   $76
              21d9 0093  ld   $93
              21da 0076  ld   $76
              21db 0093  ld   $93
              21dc 0076  ld   $76
              21dd 0011  ld   $11
              21de 0000  ld   $00
              21df 00f0  ld   $f0
              21e0 00fa  ld   $fa
              21e1 004e  ld   $4e
              21e2 00e3  ld   $e3
              21e3 0001  ld   $01
              21e4 0035  ld   $35
              21e5 0072  ld   $72
              21e6 00c6  ld   $c6
              21e7 0059  ld   $59
              21e8 0007  ld   $07
              21e9 00fa  ld   $fa
              21ea 004c  ld   $4c
              21eb 00e3  ld   $e3
              21ec 0001  ld   $01
              21ed 0035  ld   $35
              21ee 003f  ld   $3f
              21ef 00ce  ld   $ce
              21f0 0085  ld   $85
              21f1 00a2  ld   $a2
              21f2 0077  ld   $77
              21f3 0090  ld   $90
              21f4 00a6  ld   $a6
              21f5 0011  ld   $11
              21f6 0000  ld   $00
              21f7 007f  ld   $7f
              21f8 002b  ld   $2b
              21f9 0076  ld   $76
              21fa 00f6  ld   $f6
              21fb fe00  bra  ac          ;+-----------------------------------+
              21fc fcfd  bra  $21fd       ;|                                   |
              21fd 1404  ld   $04,y       ;| Trampoline for page $2100 lookups |
              21fe e068  jmp  y,$68       ;|                                   |
              21ff c218  st   [$18]       ;+-----------------------------------+
              2200 002b  ld   $2b
              2201 004c  ld   $4c
              2202 0021  ld   $21
              2203 0076  ld   $76
              2204 00e3  ld   $e3
              2205 0002  ld   $02
              2206 00f6  ld   $f6
              2207 002b  ld   $2b
              2208 004e  ld   $4e
              2209 0063  ld   $63
              220a 00ff  ld   $ff
              220b 0093  ld   $93
              220c 001b  ld   $1b
              220d 00ff  ld   $ff
              220e 0077  ld   $77
              220f 00a0  ld   $a0
              2210 005d  ld   $5d
              2211 00cd  ld   $cd
              2212 00f8  ld   $f8
              2213 0075  ld   $75
              2214 001a  ld   $1a
              2215 004d  ld   $4d
              2216 005e  ld   $5e
              2217 0050  ld   $50
              2218 001a  ld   $1a
              2219 004e  ld   $4e
              221a 005e  ld   $5e
              221b 0051  ld   $51
              221c 001a  ld   $1a
              221d 004f  ld   $4f
              221e 002b  ld   $2b
              221f 0056  ld   $56
              2220 001a  ld   $1a
              2221 004c  ld   $4c
              2222 002b  ld   $2b
              2223 0078  ld   $78
              2224 0082  ld   $82
              2225 0080  ld   $80
              2226 00ad  ld   $ad
              2227 002b  ld   $2b
              2228 004c  ld   $4c
              2229 0059  ld   $59
              222a 0000  ld   $00
              222b 002b  ld   $2b
              222c 004e  ld   $4e
              222d 0085  ld   $85
              222e 00d6  ld   $d6
              222f 0066  ld   $66
              2230 0085  ld   $85
              2231 00d6  ld   $d6
              2232 0066  ld   $66
              2233 0021  ld   $21
              2234 0052  ld   $52
              2235 002b  ld   $2b
              2236 0050  ld   $50
              2237 0021  ld   $21
              2238 0054  ld   $54
              2239 002b  ld   $2b
              223a 0056  ld   $56
              223b 0085  ld   $85
              223c 00d6  ld   $d6
              223d 0066  ld   $66
              223e 00fc  ld   $fc
              223f 0040  ld   $40
              2240 0035  ld   $35
              2241 0072  ld   $72
              2242 00d4  ld   $d4
              2243 0021  ld   $21
              2244 004e  ld   $4e
              2245 00fc  ld   $fc
              2246 003e  ld   $3e
              2247 0035  ld   $35
              2248 003f  ld   $3f
              2249 00e2  ld   $e2
              224a 0021  ld   $21
              224b 004c  ld   $4c
              224c 002b  ld   $2b
              224d 0040  ld   $40
              224e 0021  ld   $21
              224f 004e  ld   $4e
              2250 002b  ld   $2b
              2251 003e  ld   $3e
              2252 0085  ld   $85
              2253 00a2  ld   $a2
              2254 0063  ld   $63
              2255 0021  ld   $21
              2256 0078  ld   $78
              2257 0082  ld   $82
              2258 007f  ld   $7f
              2259 00e9  ld   $e9
              225a 00e9  ld   $e9
              225b 0099  ld   $99
              225c 0030  ld   $30
              225d 002b  ld   $2b
              225e 0078  ld   $78
              225f 00f6  ld   $f6
              2260 002b  ld   $2b
              2261 004c  ld   $4c
              2262 0021  ld   $21
              2263 0078  ld   $78
              2264 00e3  ld   $e3
              2265 0002  ld   $02
              2266 00f6  ld   $f6
              2267 002b  ld   $2b
              2268 004e  ld   $4e
              2269 0063  ld   $63
              226a 00ff  ld   $ff
              226b 0093  ld   $93
              226c 001b  ld   $1b
              226d 00ff  ld   $ff
              226e 0078  ld   $78
              226f 00a0  ld   $a0
              2270 0038  ld   $38
              2271 00cd  ld   $cd
              2272 00d3  ld   $d3
              2273 0075  ld   $75
              2274 0085  ld   $85
              2275 00a2  ld   $a2
              2276 0064  ld   $64
              2277 0035  ld   $35
              2278 0056  ld   $56
              2279 00d1  ld   $d1
              227a 00b8  ld   $b8
              227b 0074  ld   $74
              227c 0035  ld   $35
              227d 0056  ld   $56
              227e 00ae  ld   $ae
              227f 0059  ld   $59
              2280 0000  ld   $00
              2281 0099  ld   $99
              2282 0074  ld   $74
              2283 0085  ld   $85
              2284 00c6  ld   $c6
              2285 0075  ld   $75
              2286 0021  ld   $21
              2287 006a  ld   $6a
              2288 002b  ld   $2b
              2289 0026  ld   $26
              228a 0021  ld   $21
              228b 0072  ld   $72
              228c 002b  ld   $2b
              228d 0024  ld   $24
              228e 0099  ld   $99
              228f 0034  ld   $34
              2290 002b  ld   $2b
              2291 0072  ld   $72
              2292 0011  ld   $11
              2293 00e9  ld   $e9
              2294 0000  ld   $00
              2295 002b  ld   $2b
              2296 0022  ld   $22
              2297 0021  ld   $21
              2298 0034  ld   $34
              2299 00b4  ld   $b4
              229a 00e6  ld   $e6
              229b 0021  ld   $21
              229c 0074  ld   $74
              229d 00b8  ld   $b8
              229e 0034  ld   $34
              229f 002b  ld   $2b
              22a0 0074  ld   $74
              22a1 0035  ld   $35
              22a2 004d  ld   $4d
              22a3 00a1  ld   $a1
              22a4 0063  ld   $63
              22a5 00ff  ld   $ff
              22a6 0093  ld   $93
              22a7 001b  ld   $1b
              22a8 00ff  ld   $ff
              22a9 0079  ld   $79
              22aa 00a0  ld   $a0
              22ab 0040  ld   $40
              22ac 00cd  ld   $cd
              22ad 00bf  ld   $bf
              22ae 0075  ld   $75
              22af 0059  ld   $59
              22b0 0000  ld   $00
              22b1 002b  ld   $2b
              22b2 0064  ld   $64
              22b3 002b  ld   $2b
              22b4 0060  ld   $60
              22b5 0059  ld   $59
              22b6 0000  ld   $00
              22b7 002b  ld   $2b
              22b8 0066  ld   $66
              22b9 0059  ld   $59
              22ba 0001  ld   $01
              22bb 002b  ld   $2b
              22bc 0062  ld   $62
              22bd 0021  ld   $21
              22be 005c  ld   $5c
              22bf 002b  ld   $2b
              22c0 004c  ld   $4c
              22c1 0021  ld   $21
              22c2 005e  ld   $5e
              22c3 002b  ld   $2b
              22c4 004e  ld   $4e
              22c5 0085  ld   $85
              22c6 00a2  ld   $a2
              22c7 0076  ld   $76
              22c8 0085  ld   $85
              22c9 00cf  ld   $cf
              22ca 0065  ld   $65
              22cb 0063  ld   $63
              22cc 00ff  ld   $ff
              22cd 00cd  ld   $cd
              22ce 00db  ld   $db
              22cf 0075  ld   $75
              22d0 00cd  ld   $cd
              22d1 00ce  ld   $ce
              22d2 0043  ld   $43
              22d3 0061  ld   $61
              22d4 0072  ld   $72
              22d5 0064  ld   $64
              22d6 0054  ld   $54
              22d7 0079  ld   $79
              22d8 0070  ld   $70
              22d9 0065  ld   $65
              22da 0020  ld   $20
              22db 0000  ld   $00
              22dc 0085  ld   $85
              22dd 00a2  ld   $a2
              22de 0069  ld   $69
              22df 0021  ld   $21
              22e0 0036  ld   $36
              22e1 0085  ld   $85
              22e2 00a2  ld   $a2
              22e3 0068  ld   $68
              22e4 0085  ld   $85
              22e5 00a2  ld   $a2
              22e6 006d  ld   $6d
              22e7 0063  ld   $63
              22e8 00ff  ld   $ff
              22e9 0093  ld   $93
              22ea 001b  ld   $1b
              22eb 00ff  ld   $ff
              22ec 007a  ld   $7a
              22ed 00a0  ld   $a0
              22ee 0057  ld   $57
              22ef 00cd  ld   $cd
              22f0 00af  ld   $af
              22f1 000a  ld   $0a
              22f2 002a  ld   $2a
              22f3 002a  ld   $2a
              22f4 002a  ld   $2a
              22f5 0020  ld   $20
              22f6 0043  ld   $43
              22f7 0061  ld   $61
              22f8 0072  ld   $72
              22f9 0064  ld   $64
              22fa 0042  ld   $42
              22fb fe00  bra  ac          ;+-----------------------------------+
              22fc fcfd  bra  $22fd       ;|                                   |
              22fd 1404  ld   $04,y       ;| Trampoline for page $2200 lookups |
              22fe e068  jmp  y,$68       ;|                                   |
              22ff c218  st   [$18]       ;+-----------------------------------+
              2300 006f  ld   $6f
              2301 006f  ld   $6f
              2302 0074  ld   $74
              2303 000a  ld   $0a
              2304 0000  ld   $00
              2305 0085  ld   $85
              2306 00a2  ld   $a2
              2307 0069  ld   $69
              2308 0059  ld   $59
              2309 0000  ld   $00
              230a 005e  ld   $5e
              230b 000e  ld   $0e
              230c 0085  ld   $85
              230d 00a2  ld   $a2
              230e 0060  ld   $60
              230f 0085  ld   $85
              2310 00c3  ld   $c3
              2311 0079  ld   $79
              2312 0085  ld   $85
              2313 00a2  ld   $a2
              2314 0061  ld   $61
              2315 0085  ld   $85
              2316 00bb  ld   $bb
              2317 0068  ld   $68
              2318 0085  ld   $85
              2319 00c7  ld   $c7
              231a 0060  ld   $60
              231b 0035  ld   $35
              231c 0072  ld   $72
              231d 00d1  ld   $d1
              231e 0085  ld   $85
              231f 00a2  ld   $a2
              2320 0062  ld   $62
              2321 0085  ld   $85
              2322 00a2  ld   $a2
              2323 0079  ld   $79
              2324 0085  ld   $85
              2325 00a2  ld   $a2
              2326 006f  ld   $6f
              2327 0059  ld   $59
              2328 0020  ld   $20
              2329 00f0  ld   $f0
              232a 0032  ld   $32
              232b 0085  ld   $85
              232c 00a2  ld   $a2
              232d 006d  ld   $6d
              232e 00cd  ld   $cd
              232f 00f0  ld   $f0
              2330 0053  ld   $53
              2331 0059  ld   $59
              2332 0053  ld   $53
              2333 0054  ld   $54
              2334 0045  ld   $45
              2335 004d  ld   $4d
              2336 002e  ld   $2e
              2337 0047  ld   $47
              2338 0054  ld   $54
              2339 0031  ld   $31
              233a 0020  ld   $20
              233b 006e  ld   $6e
              233c 006f  ld   $6f
              233d 0074  ld   $74
              233e 0020  ld   $20
              233f 0066  ld   $66
              2340 006f  ld   $6f
              2341 0075  ld   $75
              2342 006e  ld   $6e
              2343 0064  ld   $64
              2344 0021  ld   $21
              2345 0000  ld   $00
              2346 0085  ld   $85
              2347 00a2  ld   $a2
              2348 0069  ld   $69
              2349 00b4  ld   $b4
              234a 0080  ld   $80
              234b 0000  ld   $00
              234c 0000  ld   $00         ;End of Apps/CardBoot/CardBoot.gt1, size 2922
                                          ;+-----------------------------------+
                                          ;| Core/mainmenu_v5a.gt1             |
                                          ;+-----------------------------------+
              234d dc42  st   $42,[y,x++] ;'B'
              234e dc6f  st   $6f,[y,x++] ;'o'
              234f dc6f  st   $6f,[y,x++] ;'o'
              2350 dc74  st   $74,[y,x++] ;'t'
              2351 dc00  st   $00,[y,x++] ;'\x00'
              2352 dc00  st   $00,[y,x++] ;'\x00'
              2353 dc00  st   $00,[y,x++] ;'\x00'
              2354 dc00  st   $00,[y,x++] ;'\x00'
              2355 00e3  ld   $e3
              2356 c218  st   [$18]
              2357 0017  ld   $17
              2358 1431  ld   $31,y
              2359 e062  jmp  y,$62
              235a c219  st   [$19]
Main:         235b 0000  ld   $00
              235c 007e  ld   $7e
              235d 0002  ld   $02
              235e 0001  ld   $01
              235f 0001  ld   $01
              2360 0002  ld   $02
              2361 0000  ld   $00
              2362 00fa  ld   $fa
              2363 0011  ld   $11
              2364 0020  ld   $20
              2365 000f  ld   $0f
              2366 002b  ld   $2b
              2367 00a2  ld   $a2
              2368 001a  ld   $1a
              2369 0021  ld   $21
              236a 0088  ld   $88
              236b 0003  ld   $03
              236c 005e  ld   $5e
              236d 0021  ld   $21
              236e 0059  ld   $59
              236f 0002  ld   $02
              2370 002b  ld   $2b
              2371 00aa  ld   $aa
              2372 0059  ld   $59
              2373 0000  ld   $00
              2374 002b  ld   $2b
              2375 00a6  ld   $a6
              2376 001a  ld   $1a
              2377 000e  ld   $0e
              2378 002b  ld   $2b
              2379 00d6  ld   $d6
              237a 0085  ld   $85
              237b 00c6  ld   $c6
              237c 006c  ld   $6c
              237d 001a  ld   $1a
              237e 00aa  ld   $aa
              237f 0082  ld   $82
              2380 00fd  ld   $fd
              2381 005e  ld   $5e
              2382 00aa  ld   $aa
              2383 0059  ld   $59
              2384 0000  ld   $00
              2385 005e  ld   $5e
              2386 00a2  ld   $a2
              2387 0059  ld   $59
              2388 0002  ld   $02
              2389 002b  ld   $2b
              238a 0082  ld   $82
              238b 0085  ld   $85
              238c 00b2  ld   $b2
              238d 006c  ld   $6c
              238e 0085  ld   $85
              238f 00cd  ld   $cd
              2390 0071  ld   $71
              2391 0059  ld   $59
              2392 0020  ld   $20
              2393 005e  ld   $5e
              2394 00a3  ld   $a3
              2395 0059  ld   $59
              2396 0000  ld   $00
              2397 002b  ld   $2b
              2398 0082  ld   $82
              2399 0059  ld   $59
              239a 0000  ld   $00
              239b 002b  ld   $2b
              239c 0084  ld   $84
              239d 0059  ld   $59
              239e 009f  ld   $9f
              239f 002b  ld   $2b
              23a0 0086  ld   $86
              23a1 0059  ld   $59
              23a2 001b  ld   $1b
              23a3 002b  ld   $2b
              23a4 0092  ld   $92
              23a5 0085  ld   $85
              23a6 00b9  ld   $b9
              23a7 006e  ld   $6e
              23a8 0059  ld   $59
              23a9 0010  ld   $10
              23aa 005e  ld   $5e
              23ab 00a3  ld   $a3
              23ac 0059  ld   $59
              23ad 0002  ld   $02
              23ae 002b  ld   $2b
              23af 0082  ld   $82
              23b0 0059  ld   $59
              23b1 0002  ld   $02
              23b2 002b  ld   $2b
              23b3 0084  ld   $84
              23b4 0059  ld   $59
              23b5 009d  ld   $9d
              23b6 002b  ld   $2b
              23b7 0086  ld   $86
              23b8 0059  ld   $59
              23b9 0019  ld   $19
              23ba 002b  ld   $2b
              23bb 0092  ld   $92
              23bc 0085  ld   $85
              23bd 00b9  ld   $b9
              23be 006e  ld   $6e
              23bf 0059  ld   $59
              23c0 0020  ld   $20
              23c1 005e  ld   $5e
              23c2 00a3  ld   $a3
              23c3 0059  ld   $59
              23c4 0000  ld   $00
              23c5 002b  ld   $2b
              23c6 0082  ld   $82
              23c7 0059  ld   $59
              23c8 005b  ld   $5b
              23c9 002b  ld   $2b
              23ca 0084  ld   $84
              23cb 0059  ld   $59
              23cc 009f  ld   $9f
              23cd 002b  ld   $2b
              23ce 0086  ld   $86
              23cf 0059  ld   $59
              23d0 0077  ld   $77
              23d1 002b  ld   $2b
              23d2 0092  ld   $92
              23d3 0085  ld   $85
              23d4 00b9  ld   $b9
              23d5 006e  ld   $6e
              23d6 0059  ld   $59
              23d7 0010  ld   $10
              23d8 005e  ld   $5e
              23d9 00a3  ld   $a3
              23da 0059  ld   $59
              23db 0002  ld   $02
              23dc 002b  ld   $2b
              23dd 0082  ld   $82
              23de 0059  ld   $59
              23df 005d  ld   $5d
              23e0 002b  ld   $2b
              23e1 0084  ld   $84
              23e2 0059  ld   $59
              23e3 009d  ld   $9d
              23e4 002b  ld   $2b
              23e5 0086  ld   $86
              23e6 0059  ld   $59
              23e7 0075  ld   $75
              23e8 002b  ld   $2b
              23e9 0092  ld   $92
              23ea 0085  ld   $85
              23eb 00b9  ld   $b9
              23ec 006e  ld   $6e
              23ed 0059  ld   $59
              23ee 0020  ld   $20
              23ef 005e  ld   $5e
              23f0 00a3  ld   $a3
              23f1 0059  ld   $59
              23f2 0000  ld   $00
              23f3 002b  ld   $2b
              23f4 0082  ld   $82
              23f5 0059  ld   $59
              23f6 001c  ld   $1c
              23f7 002b  ld   $2b
              23f8 0084  ld   $84
              23f9 0059  ld   $59
              23fa 0001  ld   $01
              23fb fe00  bra  ac          ;+-----------------------------------+
              23fc fcfd  bra  $23fd       ;|                                   |
              23fd 1404  ld   $04,y       ;| Trampoline for page $2300 lookups |
              23fe e068  jmp  y,$68       ;|                                   |
              23ff c218  st   [$18]       ;+-----------------------------------+
              2400 002b  ld   $2b
              2401 0086  ld   $86
              2402 0059  ld   $59
              2403 005a  ld   $5a
              2404 002b  ld   $2b
              2405 0092  ld   $92
              2406 0085  ld   $85
              2407 00b9  ld   $b9
              2408 006e  ld   $6e
              2409 0059  ld   $59
              240a 0020  ld   $20
              240b 005e  ld   $5e
              240c 00a3  ld   $a3
              240d 0059  ld   $59
              240e 009e  ld   $9e
              240f 002b  ld   $2b
              2410 0082  ld   $82
              2411 0059  ld   $59
              2412 001c  ld   $1c
              2413 002b  ld   $2b
              2414 0084  ld   $84
              2415 0059  ld   $59
              2416 009f  ld   $9f
              2417 002b  ld   $2b
              2418 0086  ld   $86
              2419 0059  ld   $59
              241a 005a  ld   $5a
              241b 002b  ld   $2b
              241c 0092  ld   $92
              241d 0085  ld   $85
              241e 00b9  ld   $b9
              241f 006e  ld   $6e
              2420 0085  ld   $85
              2421 00f3  ld   $f3
              2422 0005  ld   $05
              2423 0011  ld   $11
              2424 0000  ld   $00
              2425 000c  ld   $0c
              2426 002b  ld   $2b
              2427 00a2  ld   $a2
              2428 0059  ld   $59
              2429 0022  ld   $22
              242a 002b  ld   $2b
              242b 0030  ld   $30
              242c 0059  ld   $59
              242d 0000  ld   $00
              242e 002b  ld   $2b
              242f 0032  ld   $32
              2430 0059  ld   $59
              2431 0012  ld   $12
              2432 005e  ld   $5e
              2433 00a4  ld   $a4
              2434 0021  ld   $21
              2435 0030  ld   $30
              2436 005e  ld   $5e
              2437 00a5  ld   $a5
              2438 0085  ld   $85
              2439 00db  ld   $db
              243a 006e  ld   $6e
              243b 0011  ld   $11
              243c 00ec  ld   $ec
              243d 007e  ld   $7e
              243e 0099  ld   $99
              243f 0032  ld   $32
              2440 0099  ld   $99
              2441 0032  ld   $32
              2442 00f6  ld   $f6
              2443 0085  ld   $85
              2444 00bc  ld   $bc
              2445 006d  ld   $6d
              2446 0085  ld   $85
              2447 00a1  ld   $a1
              2448 0078  ld   $78
              2449 0059  ld   $59
              244a 005c  ld   $5c
              244b 005e  ld   $5e
              244c 00a4  ld   $a4
              244d 0021  ld   $21
              244e 0030  ld   $30
              244f 005e  ld   $5e
              2450 00a5  ld   $a5
              2451 0085  ld   $85
              2452 00db  ld   $db
              2453 006e  ld   $6e
              2454 0021  ld   $21
              2455 0032  ld   $32
              2456 00e3  ld   $e3
              2457 0005  ld   $05
              2458 002b  ld   $2b
              2459 0096  ld   $96
              245a 0011  ld   $11
              245b 00ec  ld   $ec
              245c 007e  ld   $7e
              245d 0099  ld   $99
              245e 0096  ld   $96
              245f 0085  ld   $85
              2460 0000  ld   $00
              2461 0003  ld   $03
              2462 0003  ld   $03
              2463 0000  ld   $00
              2464 00f9  ld   $f9
              2465 0099  ld   $99
              2466 0096  ld   $96
              2467 00f6  ld   $f6
              2468 0085  ld   $85
              2469 00bc  ld   $bc
              246a 006d  ld   $6d
              246b 0085  ld   $85
              246c 00a1  ld   $a1
              246d 0078  ld   $78
              246e 0021  ld   $21
              246f 0030  ld   $30
              2470 00e3  ld   $e3
              2471 0009  ld   $09
              2472 002b  ld   $2b
              2473 0030  ld   $30
              2474 0093  ld   $93
              2475 0032  ld   $32
              2476 001a  ld   $1a
              2477 0032  ld   $32
              2478 00e6  ld   $e6
              2479 0004  ld   $04
              247a 0035  ld   $35
              247b 004d  ld   $4d
              247c 0019  ld   $19
              247d 0085  ld   $85
              247e 00c8  ld   $c8
              247f 0002  ld   $02
              2480 0011  ld   $11
              2481 0010  ld   $10
              2482 002a  ld   $2a
              2483 002b  ld   $2b
              2484 00a2  ld   $a2
              2485 0059  ld   $59
              2486 000e  ld   $0e
              2487 005e  ld   $5e
              2488 00a4  ld   $a4
              2489 0059  ld   $59
              248a 005e  ld   $5e
              248b 005e  ld   $5e
              248c 00a5  ld   $a5
              248d 0085  ld   $85
              248e 00db  ld   $db
              248f 006e  ld   $6e
              2490 0011  ld   $11
              2491 00a1  ld   $a1
              2492 007f  ld   $7f
              2493 0085  ld   $85
              2494 00bc  ld   $bc
              2495 006d  ld   $6d
              2496 0011  ld   $11
              2497 00cc  ld   $cc
              2498 007e  ld   $7e
              2499 002b  ld   $2b
              249a 00c4  ld   $c4
              249b 0059  ld   $59
              249c 003f  ld   $3f
              249d 002b  ld   $2b
              249e 00c6  ld   $c6
              249f 0085  ld   $85
              24a0 0003  ld   $03
              24a1 0004  ld   $04
              24a2 0011  ld   $11
              24a3 00af  ld   $af
              24a4 007e  ld   $7e
              24a5 0085  ld   $85
              24a6 00bc  ld   $bc
              24a7 006d  ld   $6d
              24a8 0059  ld   $59
              24a9 0014  ld   $14
              24aa 005e  ld   $5e
              24ab 00a4  ld   $a4
              24ac 0059  ld   $59
              24ad 0066  ld   $66
              24ae 005e  ld   $5e
              24af 00a5  ld   $a5
              24b0 0085  ld   $85
              24b1 00db  ld   $db
              24b2 006e  ld   $6e
              24b3 0011  ld   $11
              24b4 00a8  ld   $a8
              24b5 007e  ld   $7e
              24b6 0085  ld   $85
              24b7 00bc  ld   $bc
              24b8 006d  ld   $6d
              24b9 0011  ld   $11
              24ba 00c5  ld   $c5
              24bb 007e  ld   $7e
              24bc 002b  ld   $2b
              24bd 00c4  ld   $c4
              24be 0059  ld   $59
              24bf 003f  ld   $3f
              24c0 002b  ld   $2b
              24c1 00c6  ld   $c6
              24c2 0085  ld   $85
              24c3 0003  ld   $03
              24c4 0004  ld   $04
              24c5 0011  ld   $11
              24c6 00f4  ld   $f4
              24c7 007d  ld   $7d
              24c8 0085  ld   $85
              24c9 00bc  ld   $bc
              24ca 006d  ld   $6d
              24cb 0059  ld   $59
              24cc 000e  ld   $0e
              24cd 005e  ld   $5e
              24ce 00a4  ld   $a4
              24cf 0059  ld   $59
              24d0 006e  ld   $6e
              24d1 005e  ld   $5e
              24d2 00a5  ld   $a5
              24d3 0085  ld   $85
              24d4 00db  ld   $db
              24d5 006e  ld   $6e
              24d6 0011  ld   $11
              24d7 00a2  ld   $a2
              24d8 007e  ld   $7e
              24d9 0085  ld   $85
              24da 00bc  ld   $bc
              24db 006d  ld   $6d
              24dc 0011  ld   $11
              24dd 00ba  ld   $ba
              24de 007e  ld   $7e
              24df 002b  ld   $2b
              24e0 00c4  ld   $c4
              24e1 0059  ld   $59
              24e2 003f  ld   $3f
              24e3 002b  ld   $2b
              24e4 00c6  ld   $c6
              24e5 0085  ld   $85
              24e6 0003  ld   $03
              24e7 0004  ld   $04
              24e8 0011  ld   $11
              24e9 00e9  ld   $e9
              24ea 007d  ld   $7d
              24eb 0085  ld   $85
              24ec 00bc  ld   $bc
              24ed 006d  ld   $6d
              24ee 0085  ld   $85
              24ef 00a1  ld   $a1
              24f0 0078  ld   $78
              24f1 0011  ld   $11
              24f2 0000  ld   $00
              24f3 0015  ld   $15
              24f4 002b  ld   $2b
              24f5 00a2  ld   $a2
              24f6 0059  ld   $59
              24f7 0003  ld   $03
              24f8 005e  ld   $5e
              24f9 00a4  ld   $a4
              24fa 0059  ld   $59
              24fb fe00  bra  ac          ;+-----------------------------------+
              24fc fcfd  bra  $24fd       ;|                                   |
              24fd 1404  ld   $04,y       ;| Trampoline for page $2400 lookups |
              24fe e068  jmp  y,$68       ;|                                   |
              24ff c218  st   [$18]       ;+-----------------------------------+
              2500 0053  ld   $53
              2501 005e  ld   $5e
              2502 00a5  ld   $a5
              2503 0085  ld   $85
              2504 00db  ld   $db
              2505 006e  ld   $6e
              2506 0011  ld   $11
              2507 00e1  ld   $e1
              2508 007d  ld   $7d
              2509 0085  ld   $85
              250a 00bc  ld   $bc
              250b 006d  ld   $6d
              250c 0085  ld   $85
              250d 00a1  ld   $a1
              250e 0078  ld   $78
              250f 0059  ld   $59
              2510 008c  ld   $8c
              2511 005e  ld   $5e
              2512 00a4  ld   $a4
              2513 0059  ld   $59
              2514 0053  ld   $53
              2515 005e  ld   $5e
              2516 00a5  ld   $a5
              2517 0085  ld   $85
              2518 00db  ld   $db
              2519 006e  ld   $6e
              251a 0085  ld   $85
              251b 00e8  ld   $e8
              251c 0006  ld   $06
              251d 0059  ld   $59
              251e 000a  ld   $0a
              251f 002b  ld   $2b
              2520 0034  ld   $34
              2521 0059  ld   $59
              2522 0022  ld   $22
              2523 002b  ld   $2b
              2524 0030  ld   $30
              2525 0059  ld   $59
              2526 0000  ld   $00
              2527 002b  ld   $2b
              2528 0036  ld   $36
              2529 0059  ld   $59
              252a 0003  ld   $03
              252b 005e  ld   $5e
              252c 0087  ld   $87
              252d 0011  ld   $11
              252e 00a0  ld   $a0
              252f 0075  ld   $75
              2530 002b  ld   $2b
              2531 0092  ld   $92
              2532 0085  ld   $85
              2533 00dd  ld   $dd
              2534 006b  ld   $6b
              2535 0085  ld   $85
              2536 00b9  ld   $b9
              2537 0073  ld   $73
              2538 0085  ld   $85
              2539 00c0  ld   $c0
              253a 0008  ld   $08
              253b 0085  ld   $85
              253c 00d9  ld   $d9
              253d 0005  ld   $05
              253e 001a  ld   $1a
              253f 0011  ld   $11
              2540 002b  ld   $2b
              2541 009a  ld   $9a
              2542 0059  ld   $59
              2543 0000  ld   $00
              2544 002b  ld   $2b
              2545 009c  ld   $9c
              2546 0085  ld   $85
              2547 00cd  ld   $cd
              2548 0072  ld   $72
              2549 001a  ld   $1a
              254a 0006  ld   $06
              254b 005e  ld   $5e
              254c 00a3  ld   $a3
              254d 0021  ld   $21
              254e 0034  ld   $34
              254f 005e  ld   $5e
              2550 00a4  ld   $a4
              2551 0021  ld   $21
              2552 0030  ld   $30
              2553 005e  ld   $5e
              2554 00a5  ld   $a5
              2555 0085  ld   $85
              2556 00db  ld   $db
              2557 006e  ld   $6e
              2558 0059  ld   $59
              2559 003e  ld   $3e
              255a 0085  ld   $85
              255b 00d1  ld   $d1
              255c 006c  ld   $6c
              255d 0085  ld   $85
              255e 0013  ld   $13
              255f 0004  ld   $04
              2560 0085  ld   $85
              2561 0000  ld   $00
              2562 0004  ld   $04
              2563 0004  ld   $04
              2564 0000  ld   $00
              2565 00f8  ld   $f8
              2566 0085  ld   $85
              2567 00d4  ld   $d4
              2568 0003  ld   $03
              2569 0075  ld   $75
              256a 0021  ld   $21
              256b 00c6  ld   $c6
              256c 005e  ld   $5e
              256d 00a3  ld   $a3
              256e 0021  ld   $21
              256f 00c4  ld   $c4
              2570 0085  ld   $85
              2571 00bc  ld   $bc
              2572 006d  ld   $6d
              2573 0059  ld   $59
              2574 002a  ld   $2a
              2575 005e  ld   $5e
              2576 00a3  ld   $a3
              2577 0063  ld   $63
              2578 00ff  ld   $ff
              2579 0075  ld   $75
              257a 0059  ld   $59
              257b 0000  ld   $00
              257c 002b  ld   $2b
              257d 00c4  ld   $c4
              257e 0011  ld   $11
              257f 00d0  ld   $d0
              2580 007c  ld   $7c
              2581 0099  ld   $99
              2582 00c4  ld   $c4
              2583 0099  ld   $99
              2584 00c4  ld   $c4
              2585 00f6  ld   $f6
              2586 002b  ld   $2b
              2587 00ca  ld   $ca
              2588 002b  ld   $2b
              2589 00c6  ld   $c6
              258a 0011  ld   $11
              258b 00d0  ld   $d0
              258c 007b  ld   $7b
              258d 0099  ld   $99
              258e 00c4  ld   $c4
              258f 0099  ld   $99
              2590 00c4  ld   $c4
              2591 00f6  ld   $f6
              2592 002b  ld   $2b
              2593 0038  ld   $38
              2594 0011  ld   $11
              2595 00a0  ld   $a0
              2596 007c  ld   $7c
              2597 0099  ld   $99
              2598 00c4  ld   $c4
              2599 0099  ld   $99
              259a 00c4  ld   $c4
              259b 00f6  ld   $f6
              259c 002b  ld   $2b
              259d 00cc  ld   $cc
              259e 002b  ld   $2b
              259f 00c8  ld   $c8
              25a0 0011  ld   $11
              25a1 00a0  ld   $a0
              25a2 007b  ld   $7b
              25a3 0099  ld   $99
              25a4 00c4  ld   $c4
              25a5 0099  ld   $99
              25a6 00c4  ld   $c4
              25a7 00f6  ld   $f6
              25a8 002b  ld   $2b
              25a9 003a  ld   $3a
              25aa 0021  ld   $21
              25ab 00ca  ld   $ca
              25ac 0099  ld   $99
              25ad 0038  ld   $38
              25ae 002b  ld   $2b
              25af 00ca  ld   $ca
              25b0 002b  ld   $2b
              25b1 009c  ld   $9c
              25b2 0011  ld   $11
              25b3 00d0  ld   $d0
              25b4 007c  ld   $7c
              25b5 0099  ld   $99
              25b6 00c4  ld   $c4
              25b7 0099  ld   $99
              25b8 00c4  ld   $c4
              25b9 002b  ld   $2b
              25ba 009e  ld   $9e
              25bb 0021  ld   $21
              25bc 009c  ld   $9c
              25bd 00f3  ld   $f3
              25be 009e  ld   $9e
              25bf 0021  ld   $21
              25c0 00cc  ld   $cc
              25c1 0099  ld   $99
              25c2 003a  ld   $3a
              25c3 002b  ld   $2b
              25c4 00cc  ld   $cc
              25c5 002b  ld   $2b
              25c6 009c  ld   $9c
              25c7 0011  ld   $11
              25c8 00a0  ld   $a0
              25c9 007c  ld   $7c
              25ca 0099  ld   $99
              25cb 00c4  ld   $c4
              25cc 0099  ld   $99
              25cd 00c4  ld   $c4
              25ce 002b  ld   $2b
              25cf 009e  ld   $9e
              25d0 0021  ld   $21
              25d1 009c  ld   $9c
              25d2 00f3  ld   $f3
              25d3 009e  ld   $9e
              25d4 0021  ld   $21
              25d5 00cc  ld   $cc
              25d6 0085  ld   $85
              25d7 00bc  ld   $bc
              25d8 006c  ld   $6c
              25d9 002b  ld   $2b
              25da 00e8  ld   $e8
              25db 0011  ld   $11
              25dc 0000  ld   $00
              25dd 001f  ld   $1f
              25de 00b8  ld   $b8
              25df 00e8  ld   $e8
              25e0 0085  ld   $85
              25e1 00ec  ld   $ec
              25e2 006b  ld   $6b
              25e3 0035  ld   $35
              25e4 0072  ld   $72
              25e5 0081  ld   $81
              25e6 0085  ld   $85
              25e7 008d  ld   $8d
              25e8 0004  ld   $04
              25e9 0021  ld   $21
              25ea 00c4  ld   $c4
              25eb 002b  ld   $2b
              25ec 00c4  ld   $c4
              25ed 0085  ld   $85
              25ee 0047  ld   $47
              25ef 0005  ld   $05
              25f0 0085  ld   $85
              25f1 00a9  ld   $a9
              25f2 0004  ld   $04
              25f3 0021  ld   $21
              25f4 00ca  ld   $ca
              25f5 0085  ld   $85
              25f6 00bc  ld   $bc
              25f7 006c  ld   $6c
              25f8 002b  ld   $2b
              25f9 00e8  ld   $e8
              25fa 0011  ld   $11
              25fb fe00  bra  ac          ;+-----------------------------------+
              25fc fcfd  bra  $25fd       ;|                                   |
              25fd 1404  ld   $04,y       ;| Trampoline for page $2500 lookups |
              25fe e068  jmp  y,$68       ;|                                   |
              25ff c218  st   [$18]       ;+-----------------------------------+
              2600 0000  ld   $00
              2601 004f  ld   $4f
              2602 00b8  ld   $b8
              2603 00e8  ld   $e8
              2604 0085  ld   $85
              2605 00ec  ld   $ec
              2606 006b  ld   $6b
              2607 0035  ld   $35
              2608 0072  ld   $72
              2609 00a0  ld   $a0
              260a 0085  ld   $85
              260b 00a9  ld   $a9
              260c 0004  ld   $04
              260d 0021  ld   $21
              260e 00c4  ld   $c4
              260f 002b  ld   $2b
              2610 00c4  ld   $c4
              2611 0085  ld   $85
              2612 0047  ld   $47
              2613 0005  ld   $05
              2614 001a  ld   $1a
              2615 00c7  ld   $c7
              2616 00e3  ld   $e3
              2617 0050  ld   $50
              2618 005e  ld   $5e
              2619 00d0  ld   $d0
              261a 001a  ld   $1a
              261b 00c9  ld   $c9
              261c 00e3  ld   $e3
              261d 0044  ld   $44
              261e 005e  ld   $5e
              261f 00d1  ld   $d1
              2620 0021  ld   $21
              2621 00d0  ld   $d0
              2622 00ad  ld   $ad
              2623 0082  ld   $82
              2624 0080  ld   $80
              2625 0035  ld   $35
              2626 0072  ld   $72
              2627 00be  ld   $be
              2628 0085  ld   $85
              2629 00c4  ld   $c4
              262a 0004  ld   $04
              262b 0059  ld   $59
              262c 0000  ld   $00
              262d 00f0  ld   $f0
              262e 00d0  ld   $d0
              262f 0011  ld   $11
              2630 00c9  ld   $c9
              2631 007d  ld   $7d
              2632 0099  ld   $99
              2633 00c4  ld   $c4
              2634 00ad  ld   $ad
              2635 002b  ld   $2b
              2636 00ce  ld   $ce
              2637 001a  ld   $1a
              2638 00cb  ld   $cb
              2639 00e3  ld   $e3
              263a 0050  ld   $50
              263b 005e  ld   $5e
              263c 00d0  ld   $d0
              263d 001a  ld   $1a
              263e 00cd  ld   $cd
              263f 00e3  ld   $e3
              2640 0044  ld   $44
              2641 005e  ld   $5e
              2642 00d1  ld   $d1
              2643 0021  ld   $21
              2644 00d0  ld   $d0
              2645 00ad  ld   $ad
              2646 0085  ld   $85
              2647 00a0  ld   $a0
              2648 0079  ld   $79
              2649 0035  ld   $35
              264a 0072  ld   $72
              264b 00e2  ld   $e2
              264c 0085  ld   $85
              264d 0039  ld   $39
              264e 0005  ld   $05
              264f 0021  ld   $21
              2650 00ce  ld   $ce
              2651 00e6  ld   $e6
              2652 0014  ld   $14
              2653 0085  ld   $85
              2654 00e3  ld   $e3
              2655 006b  ld   $6b
              2656 0035  ld   $35
              2657 0072  ld   $72
              2658 00ef  ld   $ef
              2659 0085  ld   $85
              265a 0003  ld   $03
              265b 0005  ld   $05
              265c 0059  ld   $59
              265d 00bf  ld   $bf
              265e 00f0  ld   $f0
              265f 00d0  ld   $d0
              2660 0085  ld   $85
              2661 0000  ld   $00
              2662 0005  ld   $05
              2663 0005  ld   $05
              2664 0000  ld   $00
              2665 0000  ld   $00
              2666 0085  ld   $85
              2667 0028  ld   $28
              2668 0005  ld   $05
              2669 0021  ld   $21
              266a 00ce  ld   $ce
              266b 00e6  ld   $e6
              266c 000a  ld   $0a
              266d 0085  ld   $85
              266e 00e3  ld   $e3
              266f 006b  ld   $6b
              2670 0035  ld   $35
              2671 0072  ld   $72
              2672 000e  ld   $0e
              2673 0085  ld   $85
              2674 0017  ld   $17
              2675 0005  ld   $05
              2676 0059  ld   $59
              2677 00aa  ld   $aa
              2678 00f0  ld   $f0
              2679 00d0  ld   $d0
              267a 0085  ld   $85
              267b 0028  ld   $28
              267c 0005  ld   $05
              267d 0021  ld   $21
              267e 00ce  ld   $ce
              267f 00e6  ld   $e6
              2680 0004  ld   $04
              2681 0085  ld   $85
              2682 00e3  ld   $e3
              2683 006b  ld   $6b
              2684 0035  ld   $35
              2685 0072  ld   $72
              2686 0022  ld   $22
              2687 0085  ld   $85
              2688 0028  ld   $28
              2689 0005  ld   $05
              268a 0059  ld   $59
              268b 0095  ld   $95
              268c 00f0  ld   $f0
              268d 00d0  ld   $d0
              268e 0021  ld   $21
              268f 00ce  ld   $ce
              2690 00e3  ld   $e3
              2691 0001  ld   $01
              2692 002b  ld   $2b
              2693 009c  ld   $9c
              2694 0011  ld   $11
              2695 00c9  ld   $c9
              2696 007d  ld   $7d
              2697 0099  ld   $99
              2698 00c4  ld   $c4
              2699 002b  ld   $2b
              269a 009e  ld   $9e
              269b 0021  ld   $21
              269c 009c  ld   $9c
              269d 00f0  ld   $f0
              269e 009e  ld   $9e
              269f 0093  ld   $93
              26a0 00c4  ld   $c4
              26a1 001a  ld   $1a
              26a2 00c4  ld   $c4
              26a3 00e6  ld   $e6
              26a4 0017  ld   $17
              26a5 0035  ld   $35
              26a6 004d  ld   $4d
              26a7 0043  ld   $43
              26a8 0085  ld   $85
              26a9 0018  ld   $18
              26aa 0004  ld   $04
              26ab 0063  ld   $63
              26ac 00ff  ld   $ff
              26ad 0075  ld   $75
              26ae 0011  ld   $11
              26af 00c9  ld   $c9
              26b0 007d  ld   $7d
              26b1 0099  ld   $99
              26b2 00c4  ld   $c4
              26b3 002b  ld   $2b
              26b4 009e  ld   $9e
              26b5 0059  ld   $59
              26b6 0000  ld   $00
              26b7 00f0  ld   $f0
              26b8 009e  ld   $9e
              26b9 0011  ld   $11
              26ba 00d0  ld   $d0
              26bb 007c  ld   $7c
              26bc 0099  ld   $99
              26bd 00c4  ld   $c4
              26be 0099  ld   $99
              26bf 00c4  ld   $c4
              26c0 002b  ld   $2b
              26c1 009e  ld   $9e
              26c2 0059  ld   $59
              26c3 0000  ld   $00
              26c4 00f3  ld   $f3
              26c5 009e  ld   $9e
              26c6 0011  ld   $11
              26c7 00a0  ld   $a0
              26c8 007c  ld   $7c
              26c9 0099  ld   $99
              26ca 00c4  ld   $c4
              26cb 0099  ld   $99
              26cc 00c4  ld   $c4
              26cd 002b  ld   $2b
              26ce 009e  ld   $9e
              26cf 0059  ld   $59
              26d0 0000  ld   $00
              26d1 00f3  ld   $f3
              26d2 009e  ld   $9e
              26d3 0085  ld   $85
              26d4 00a0  ld   $a0
              26d5 006c  ld   $6c
              26d6 002b  ld   $2b
              26d7 00e8  ld   $e8
              26d8 0011  ld   $11
              26d9 00ff  ld   $ff
              26da 0007  ld   $07
              26db 00f8  ld   $f8
              26dc 00e8  ld   $e8
              26dd 002b  ld   $2b
              26de 00e8  ld   $e8
              26df 0011  ld   $11
              26e0 0000  ld   $00
              26e1 00fc  ld   $fc
              26e2 0099  ld   $99
              26e3 00e8  ld   $e8
              26e4 002b  ld   $2b
              26e5 009c  ld   $9c
              26e6 0011  ld   $11
              26e7 00d0  ld   $d0
              26e8 007b  ld   $7b
              26e9 0099  ld   $99
              26ea 00c4  ld   $c4
              26eb 0099  ld   $99
              26ec 00c4  ld   $c4
              26ed 002b  ld   $2b
              26ee 009e  ld   $9e
              26ef 0021  ld   $21
              26f0 009c  ld   $9c
              26f1 00f3  ld   $f3
              26f2 009e  ld   $9e
              26f3 0085  ld   $85
              26f4 00a0  ld   $a0
              26f5 006c  ld   $6c
              26f6 002b  ld   $2b
              26f7 00e8  ld   $e8
              26f8 0011  ld   $11
              26f9 00ff  ld   $ff
              26fa 0007  ld   $07
              26fb fe00  bra  ac          ;+-----------------------------------+
              26fc fcfd  bra  $26fd       ;|                                   |
              26fd 1404  ld   $04,y       ;| Trampoline for page $2600 lookups |
              26fe e068  jmp  y,$68       ;|                                   |
              26ff c218  st   [$18]       ;+-----------------------------------+
              2700 00f8  ld   $f8
              2701 00e8  ld   $e8
              2702 002b  ld   $2b
              2703 00e8  ld   $e8
              2704 0011  ld   $11
              2705 0000  ld   $00
              2706 00fc  ld   $fc
              2707 0099  ld   $99
              2708 00e8  ld   $e8
              2709 002b  ld   $2b
              270a 009c  ld   $9c
              270b 0011  ld   $11
              270c 00a0  ld   $a0
              270d 007b  ld   $7b
              270e 0099  ld   $99
              270f 00c4  ld   $c4
              2710 0099  ld   $99
              2711 00c4  ld   $c4
              2712 002b  ld   $2b
              2713 009e  ld   $9e
              2714 0021  ld   $21
              2715 009c  ld   $9c
              2716 00f3  ld   $f3
              2717 009e  ld   $9e
              2718 0011  ld   $11
              2719 00d0  ld   $d0
              271a 007b  ld   $7b
              271b 0099  ld   $99
              271c 00c4  ld   $c4
              271d 0099  ld   $99
              271e 00c4  ld   $c4
              271f 00f6  ld   $f6
              2720 0085  ld   $85
              2721 00bc  ld   $bc
              2722 006c  ld   $6c
              2723 00e6  ld   $e6
              2724 00c8  ld   $c8
              2725 0085  ld   $85
              2726 00e3  ld   $e3
              2727 006b  ld   $6b
              2728 002b  ld   $2b
              2729 00ea  ld   $ea
              272a 0011  ld   $11
              272b 00a0  ld   $a0
              272c 007b  ld   $7b
              272d 0099  ld   $99
              272e 00c4  ld   $c4
              272f 0099  ld   $99
              2730 00c4  ld   $c4
              2731 00f6  ld   $f6
              2732 0085  ld   $85
              2733 00bc  ld   $bc
              2734 006c  ld   $6c
              2735 00e6  ld   $e6
              2736 00c8  ld   $c8
              2737 0085  ld   $85
              2738 00e3  ld   $e3
              2739 006b  ld   $6b
              273a 00fa  ld   $fa
              273b 00ea  ld   $ea
              273c 0035  ld   $35
              273d 0072  ld   $72
              273e 00d5  ld   $d5
              273f 0085  ld   $85
              2740 006d  ld   $6d
              2741 0005  ld   $05
              2742 0063  ld   $63
              2743 00ff  ld   $ff
              2744 0075  ld   $75
              2745 0059  ld   $59
              2746 0000  ld   $00
              2747 002b  ld   $2b
              2748 00c4  ld   $c4
              2749 0021  ld   $21
              274a 00c4  ld   $c4
              274b 002b  ld   $2b
              274c 00c4  ld   $c4
              274d 0085  ld   $85
              274e 0047  ld   $47
              274f 0005  ld   $05
              2750 0093  ld   $93
              2751 00c4  ld   $c4
              2752 001a  ld   $1a
              2753 00c4  ld   $c4
              2754 00e6  ld   $e6
              2755 0017  ld   $17
              2756 0035  ld   $35
              2757 004d  ld   $4d
              2758 00ef  ld   $ef
              2759 0085  ld   $85
              275a 00de  ld   $de
              275b 0005  ld   $05
              275c 0063  ld   $63
              275d 00ff  ld   $ff
              275e 0075  ld   $75
              275f 0059  ld   $59
              2760 0000  ld   $00
              2761 002b  ld   $2b
              2762 0032  ld   $32
              2763 0011  ld   $11
              2764 00ca  ld   $ca
              2765 0079  ld   $79
              2766 0099  ld   $99
              2767 0032  ld   $32
              2768 0085  ld   $85
              2769 0000  ld   $00
              276a 0006  ld   $06
              276b 0006  ld   $06
              276c 0000  ld   $00
              276d 00fe  ld   $fe
              276e 0099  ld   $99
              276f 0032  ld   $32
              2770 00f6  ld   $f6
              2771 002b  ld   $2b
              2772 00c4  ld   $c4
              2773 0059  ld   $59
              2774 0000  ld   $00
              2775 002b  ld   $2b
              2776 00c6  ld   $c6
              2777 0059  ld   $59
              2778 0002  ld   $02
              2779 002b  ld   $2b
              277a 00c8  ld   $c8
              277b 0059  ld   $59
              277c 0002  ld   $02
              277d 002b  ld   $2b
              277e 00ca  ld   $ca
              277f 0011  ld   $11
              2780 00ee  ld   $ee
              2781 0079  ld   $79
              2782 0099  ld   $99
              2783 0032  ld   $32
              2784 0099  ld   $99
              2785 0032  ld   $32
              2786 00f6  ld   $f6
              2787 002b  ld   $2b
              2788 00cc  ld   $cc
              2789 0011  ld   $11
              278a 00dc  ld   $dc
              278b 0079  ld   $79
              278c 0099  ld   $99
              278d 0032  ld   $32
              278e 0099  ld   $99
              278f 0032  ld   $32
              2790 00f6  ld   $f6
              2791 002b  ld   $2b
              2792 00ce  ld   $ce
              2793 0085  ld   $85
              2794 0079  ld   $79
              2795 0006  ld   $06
              2796 0011  ld   $11
              2797 00ca  ld   $ca
              2798 0079  ld   $79
              2799 0099  ld   $99
              279a 0032  ld   $32
              279b 0099  ld   $99
              279c 0032  ld   $32
              279d 00f6  ld   $f6
              279e 002b  ld   $2b
              279f 00c4  ld   $c4
              27a0 0059  ld   $59
              27a1 003f  ld   $3f
              27a2 002b  ld   $2b
              27a3 00c6  ld   $c6
              27a4 0059  ld   $59
              27a5 0000  ld   $00
              27a6 002b  ld   $2b
              27a7 00c8  ld   $c8
              27a8 0059  ld   $59
              27a9 0000  ld   $00
              27aa 002b  ld   $2b
              27ab 00ca  ld   $ca
              27ac 0011  ld   $11
              27ad 00ee  ld   $ee
              27ae 0079  ld   $79
              27af 0099  ld   $99
              27b0 0032  ld   $32
              27b1 0099  ld   $99
              27b2 0032  ld   $32
              27b3 00f6  ld   $f6
              27b4 002b  ld   $2b
              27b5 00cc  ld   $cc
              27b6 0011  ld   $11
              27b7 00dc  ld   $dc
              27b8 0079  ld   $79
              27b9 0099  ld   $99
              27ba 0032  ld   $32
              27bb 0099  ld   $99
              27bc 0032  ld   $32
              27bd 00f6  ld   $f6
              27be 002b  ld   $2b
              27bf 00ce  ld   $ce
              27c0 0085  ld   $85
              27c1 0079  ld   $79
              27c2 0006  ld   $06
              27c3 0093  ld   $93
              27c4 0032  ld   $32
              27c5 001a  ld   $1a
              27c6 0032  ld   $32
              27c7 00e6  ld   $e6
              27c8 0008  ld   $08
              27c9 0035  ld   $35
              27ca 004d  ld   $4d
              27cb 005f  ld   $5f
              27cc 0085  ld   $85
              27cd 00f8  ld   $f8
              27ce 0005  ld   $05
              27cf 0011  ld   $11
              27d0 0010  ld   $10
              27d1 003f  ld   $3f
              27d2 002b  ld   $2b
              27d3 00a2  ld   $a2
              27d4 0059  ld   $59
              27d5 0038  ld   $38
              27d6 005e  ld   $5e
              27d7 00a4  ld   $a4
              27d8 0059  ld   $59
              27d9 0012  ld   $12
              27da 005e  ld   $5e
              27db 00a5  ld   $a5
              27dc 0085  ld   $85
              27dd 00db  ld   $db
              27de 006e  ld   $6e
              27df 0011  ld   $11
              27e0 00b7  ld   $b7
              27e1 0079  ld   $79
              27e2 0085  ld   $85
              27e3 00bc  ld   $bc
              27e4 006d  ld   $6d
              27e5 0063  ld   $63
              27e6 00ff  ld   $ff
              27e7 0075  ld   $75
              27e8 0021  ld   $21
              27e9 00c6  ld   $c6
              27ea 005e  ld   $5e
              27eb 00a3  ld   $a3
              27ec 0021  ld   $21
              27ed 00ca  ld   $ca
              27ee 002b  ld   $2b
              27ef 00d2  ld   $d2
              27f0 0021  ld   $21
              27f1 00ca  ld   $ca
              27f2 00e3  ld   $e3
              27f3 0001  ld   $01
              27f4 002b  ld   $2b
              27f5 00d8  ld   $d8
              27f6 0059  ld   $59
              27f7 0001  ld   $01
              27f8 002b  ld   $2b
              27f9 00da  ld   $da
              27fa 0021  ld   $21
              27fb fe00  bra  ac          ;+-----------------------------------+
              27fc fcfd  bra  $27fd       ;|                                   |
              27fd 1404  ld   $04,y       ;| Trampoline for page $2700 lookups |
              27fe e068  jmp  y,$68       ;|                                   |
              27ff c218  st   [$18]       ;+-----------------------------------+
              2800 00c8  ld   $c8
              2801 002b  ld   $2b
              2802 00d0  ld   $d0
              2803 0021  ld   $21
              2804 00c8  ld   $c8
              2805 00e3  ld   $e3
              2806 0001  ld   $01
              2807 002b  ld   $2b
              2808 00dc  ld   $dc
              2809 0059  ld   $59
              280a 0001  ld   $01
              280b 002b  ld   $2b
              280c 00de  ld   $de
              280d 0059  ld   $59
              280e 000c  ld   $0c
              280f 0099  ld   $99
              2810 00cc  ld   $cc
              2811 0099  ld   $99
              2812 00d0  ld   $d0
              2813 005e  ld   $5e
              2814 00a4  ld   $a4
              2815 0059  ld   $59
              2816 0013  ld   $13
              2817 0099  ld   $99
              2818 00ce  ld   $ce
              2819 0099  ld   $99
              281a 00d2  ld   $d2
              281b 005e  ld   $5e
              281c 00a5  ld   $a5
              281d 0085  ld   $85
              281e 00db  ld   $db
              281f 006e  ld   $6e
              2820 0021  ld   $21
              2821 00c4  ld   $c4
              2822 002b  ld   $2b
              2823 0090  ld   $90
              2824 0085  ld   $85
              2825 00be  ld   $be
              2826 0075  ld   $75
              2827 0021  ld   $21
              2828 00d0  ld   $d0
              2829 0099  ld   $99
              282a 00de  ld   $de
              282b 002b  ld   $2b
              282c 00d0  ld   $d0
              282d 00b8  ld   $b8
              282e 00dc  ld   $dc
              282f 0035  ld   $35
              2830 004d  ld   $4d
              2831 00c0  ld   $c0
              2832 0085  ld   $85
              2833 009a  ld   $9a
              2834 0006  ld   $06
              2835 0021  ld   $21
              2836 00d2  ld   $d2
              2837 0099  ld   $99
              2838 00da  ld   $da
              2839 002b  ld   $2b
              283a 00d2  ld   $d2
              283b 00b8  ld   $b8
              283c 00d8  ld   $d8
              283d 0035  ld   $35
              283e 004d  ld   $4d
              283f 00ce  ld   $ce
              2840 0085  ld   $85
              2841 008c  ld   $8c
              2842 0006  ld   $06
              2843 0063  ld   $63
              2844 00ff  ld   $ff
              2845 0075  ld   $75
              2846 0085  ld   $85
              2847 00cd  ld   $cd
              2848 0071  ld   $71
              2849 0011  ld   $11
              284a 00d8  ld   $d8
              284b 007e  ld   $7e
              284c 0099  ld   $99
              284d 0036  ld   $36
              284e 0099  ld   $99
              284f 0036  ld   $36
              2850 00f6  ld   $f6
              2851 002b  ld   $2b
              2852 0024  ld   $24
              2853 0011  ld   $11
              2854 0000  ld   $00
              2855 0002  ld   $02
              2856 0085  ld   $85
              2857 00a0  ld   $a0
              2858 006d  ld   $6d
              2859 0063  ld   $63
              285a 00ff  ld   $ff
              285b 0075  ld   $75
              285c 0011  ld   $11
              285d 00ff  ld   $ff
              285e 007f  ld   $7f
              285f 002b  ld   $2b
              2860 0082  ld   $82
              2861 0059  ld   $59
              2862 00ff  ld   $ff
              2863 00f0  ld   $f0
              2864 0082  ld   $82
              2865 0011  ld   $11
              2866 00ff  ld   $ff
              2867 00ff  ld   $ff
              2868 002b  ld   $2b
              2869 0082  ld   $82
              286a 0059  ld   $59
              286b 0000  ld   $00
              286c 00f0  ld   $f0
              286d 0082  ld   $82
              286e 0085  ld   $85
              286f 00a0  ld   $a0
              2870 0008  ld   $08
              2871 0008  ld   $08
              2872 00a0  ld   $a0
              2873 0060  ld   $60
              2874 0011  ld   $11
              2875 00ff  ld   $ff
              2876 007f  ld   $7f
              2877 00ad  ld   $ad
              2878 008c  ld   $8c
              2879 00ff  ld   $ff
              287a 0085  ld   $85
              287b 00a0  ld   $a0
              287c 0079  ld   $79
              287d 0035  ld   $35
              287e 0072  ld   $72
              287f 00ad  ld   $ad
              2880 0085  ld   $85
              2881 00b8  ld   $b8
              2882 0008  ld   $08
              2883 0011  ld   $11
              2884 00a1  ld   $a1
              2885 007d  ld   $7d
              2886 0085  ld   $85
              2887 00bc  ld   $bc
              2888 006d  ld   $6d
              2889 0085  ld   $85
              288a 00be  ld   $be
              288b 0008  ld   $08
              288c 0011  ld   $11
              288d 00a1  ld   $a1
              288e 007a  ld   $7a
              288f 0085  ld   $85
              2890 00bc  ld   $bc
              2891 006d  ld   $6d
              2892 0063  ld   $63
              2893 00ff  ld   $ff
              2894 0075  ld   $75
              2895 0059  ld   $59
              2896 0002  ld   $02
              2897 005e  ld   $5e
              2898 0087  ld   $87
              2899 0085  ld   $85
              289a 00af  ld   $af
              289b 006f  ld   $6f
              289c 0063  ld   $63
              289d 00ff  ld   $ff
              289e 0075  ld   $75
              289f 0059  ld   $59
              28a0 0001  ld   $01
              28a1 005e  ld   $5e
              28a2 0093  ld   $93
              28a3 0011  ld   $11
              28a4 0008  ld   $08
              28a5 0020  ld   $20
              28a6 002b  ld   $2b
              28a7 0094  ld   $94
              28a8 0085  ld   $85
              28a9 00a8  ld   $a8
              28aa 006d  ld   $6d
              28ab 0059  ld   $59
              28ac 0002  ld   $02
              28ad 005e  ld   $5e
              28ae 002c  ld   $2c
              28af 0059  ld   $59
              28b0 00ef  ld   $ef
              28b1 005e  ld   $5e
              28b2 0011  ld   $11
              28b3 0063  ld   $63
              28b4 00ff  ld   $ff
              28b5 0075  ld   $75
              28b6 0085  ld   $85
              28b7 00ca  ld   $ca
              28b8 0008  ld   $08
              28b9 0085  ld   $85
              28ba 00d2  ld   $d2
              28bb 0006  ld   $06
              28bc 0063  ld   $63
              28bd 00ff  ld   $ff
              28be 0075  ld   $75
              28bf 0085  ld   $85
              28c0 00ca  ld   $ca
              28c1 0008  ld   $08
              28c2 0059  ld   $59
              28c3 00ef  ld   $ef
              28c4 005e  ld   $5e
              28c5 0011  ld   $11
              28c6 0063  ld   $63
              28c7 00ff  ld   $ff
              28c8 0075  ld   $75
              28c9 0021  ld   $21
              28ca 0034  ld   $34
              28cb 005e  ld   $5e
              28cc 00a4  ld   $a4
              28cd 0021  ld   $21
              28ce 0030  ld   $30
              28cf 005e  ld   $5e
              28d0 00a5  ld   $a5
              28d1 0085  ld   $85
              28d2 00a0  ld   $a0
              28d3 0009  ld   $09
              28d4 0009  ld   $09
              28d5 00a0  ld   $a0
              28d6 005f  ld   $5f
              28d7 0085  ld   $85
              28d8 00db  ld   $db
              28d9 006e  ld   $6e
              28da 0059  ld   $59
              28db 0020  ld   $20
              28dc 0085  ld   $85
              28dd 00d1  ld   $d1
              28de 006c  ld   $6c
              28df 0021  ld   $21
              28e0 0034  ld   $34
              28e1 008c  ld   $8c
              28e2 0054  ld   $54
              28e3 0085  ld   $85
              28e4 00a0  ld   $a0
              28e5 0079  ld   $79
              28e6 0035  ld   $35
              28e7 0072  ld   $72
              28e8 00b3  ld   $b3
              28e9 0085  ld   $85
              28ea 00b7  ld   $b7
              28eb 0009  ld   $09
              28ec 0063  ld   $63
              28ed 00ff  ld   $ff
              28ee 0059  ld   $59
              28ef 0054  ld   $54
              28f0 002b  ld   $2b
              28f1 0034  ld   $34
              28f2 0085  ld   $85
              28f3 00ca  ld   $ca
              28f4 0008  ld   $08
              28f5 0021  ld   $21
              28f6 0036  ld   $36
              28f7 00e3  ld   $e3
              28f8 0005  ld   $05
              28f9 002b  ld   $2b
              28fa 0036  ld   $36
              28fb fe00  bra  ac          ;+-----------------------------------+
              28fc fcfd  bra  $28fd       ;|                                   |
              28fd 1404  ld   $04,y       ;| Trampoline for page $2800 lookups |
              28fe e068  jmp  y,$68       ;|                                   |
              28ff c218  st   [$18]       ;+-----------------------------------+
              2900 0063  ld   $63
              2901 00ff  ld   $ff
              2902 0075  ld   $75
              2903 0021  ld   $21
              2904 0034  ld   $34
              2905 005e  ld   $5e
              2906 00a4  ld   $a4
              2907 0021  ld   $21
              2908 0030  ld   $30
              2909 005e  ld   $5e
              290a 00a5  ld   $a5
              290b 0085  ld   $85
              290c 00db  ld   $db
              290d 006e  ld   $6e
              290e 0059  ld   $59
              290f 0020  ld   $20
              2910 0085  ld   $85
              2911 00d1  ld   $d1
              2912 006c  ld   $6c
              2913 0021  ld   $21
              2914 0034  ld   $34
              2915 008c  ld   $8c
              2916 000a  ld   $0a
              2917 0085  ld   $85
              2918 00a0  ld   $a0
              2919 0079  ld   $79
              291a 0035  ld   $35
              291b 0072  ld   $72
              291c 00e2  ld   $e2
              291d 0085  ld   $85
              291e 00e6  ld   $e6
              291f 0009  ld   $09
              2920 0063  ld   $63
              2921 00ff  ld   $ff
              2922 0059  ld   $59
              2923 000a  ld   $0a
              2924 002b  ld   $2b
              2925 0034  ld   $34
              2926 0085  ld   $85
              2927 00ca  ld   $ca
              2928 0008  ld   $08
              2929 0021  ld   $21
              292a 0036  ld   $36
              292b 00e6  ld   $e6
              292c 0005  ld   $05
              292d 002b  ld   $2b
              292e 0036  ld   $36
              292f 0063  ld   $63
              2930 00ff  ld   $ff
              2931 0075  ld   $75
              2932 0021  ld   $21
              2933 0034  ld   $34
              2934 005e  ld   $5e
              2935 00a4  ld   $a4
              2936 0021  ld   $21
              2937 0030  ld   $30
              2938 0085  ld   $85
              2939 00a0  ld   $a0
              293a 000a  ld   $0a
              293b 000a  ld   $0a
              293c 00a0  ld   $a0
              293d 005d  ld   $5d
              293e 005e  ld   $5e
              293f 00a5  ld   $a5
              2940 0085  ld   $85
              2941 00db  ld   $db
              2942 006e  ld   $6e
              2943 0059  ld   $59
              2944 0020  ld   $20
              2945 0085  ld   $85
              2946 00d1  ld   $d1
              2947 006c  ld   $6c
              2948 0021  ld   $21
              2949 0030  ld   $30
              294a 00e3  ld   $e3
              294b 0009  ld   $09
              294c 002b  ld   $2b
              294d 0030  ld   $30
              294e 0021  ld   $21
              294f 0030  ld   $30
              2950 00e6  ld   $e6
              2951 0046  ld   $46
              2952 0085  ld   $85
              2953 00e3  ld   $e3
              2954 006b  ld   $6b
              2955 0035  ld   $35
              2956 0072  ld   $72
              2957 00bb  ld   $bb
              2958 0085  ld   $85
              2959 00c3  ld   $c3
              295a 000a  ld   $0a
              295b 0059  ld   $59
              295c 0046  ld   $46
              295d 002b  ld   $2b
              295e 0030  ld   $30
              295f 0063  ld   $63
              2960 00ff  ld   $ff
              2961 0085  ld   $85
              2962 00ca  ld   $ca
              2963 0008  ld   $08
              2964 0021  ld   $21
              2965 0036  ld   $36
              2966 00e3  ld   $e3
              2967 0001  ld   $01
              2968 002b  ld   $2b
              2969 0036  ld   $36
              296a 0021  ld   $21
              296b 0034  ld   $34
              296c 008c  ld   $8c
              296d 000a  ld   $0a
              296e 0085  ld   $85
              296f 00a0  ld   $a0
              2970 0079  ld   $79
              2971 002b  ld   $2b
              2972 00e8  ld   $e8
              2973 0021  ld   $21
              2974 0036  ld   $36
              2975 00e6  ld   $e6
              2976 0004  ld   $04
              2977 0085  ld   $85
              2978 00e3  ld   $e3
              2979 006b  ld   $6b
              297a 00f8  ld   $f8
              297b 00e8  ld   $e8
              297c 0035  ld   $35
              297d 0072  ld   $72
              297e 00e2  ld   $e2
              297f 0085  ld   $85
              2980 00e8  ld   $e8
              2981 000a  ld   $0a
              2982 0059  ld   $59
              2983 0004  ld   $04
              2984 002b  ld   $2b
              2985 0036  ld   $36
              2986 0021  ld   $21
              2987 0034  ld   $34
              2988 008c  ld   $8c
              2989 0054  ld   $54
              298a 0085  ld   $85
              298b 00a0  ld   $a0
              298c 0079  ld   $79
              298d 002b  ld   $2b
              298e 00e8  ld   $e8
              298f 0021  ld   $21
              2990 0036  ld   $36
              2991 00e6  ld   $e6
              2992 0009  ld   $09
              2993 0085  ld   $85
              2994 00e3  ld   $e3
              2995 006b  ld   $6b
              2996 00f8  ld   $f8
              2997 00e8  ld   $e8
              2998 0085  ld   $85
              2999 00a0  ld   $a0
              299a 000b  ld   $0b
              299b 000b  ld   $0b
              299c 00a0  ld   $a0
              299d 0060  ld   $60
              299e 0035  ld   $35
              299f 0072  ld   $72
              29a0 00a4  ld   $a4
              29a1 0085  ld   $85
              29a2 00aa  ld   $aa
              29a3 000b  ld   $0b
              29a4 0059  ld   $59
              29a5 0009  ld   $09
              29a6 002b  ld   $2b
              29a7 0036  ld   $36
              29a8 0063  ld   $63
              29a9 00ff  ld   $ff
              29aa 0075  ld   $75
              29ab 0021  ld   $21
              29ac 0034  ld   $34
              29ad 005e  ld   $5e
              29ae 00a4  ld   $a4
              29af 0021  ld   $21
              29b0 0030  ld   $30
              29b1 005e  ld   $5e
              29b2 00a5  ld   $a5
              29b3 0085  ld   $85
              29b4 00db  ld   $db
              29b5 006e  ld   $6e
              29b6 0059  ld   $59
              29b7 0020  ld   $20
              29b8 0085  ld   $85
              29b9 00d1  ld   $d1
              29ba 006c  ld   $6c
              29bb 0021  ld   $21
              29bc 0030  ld   $30
              29bd 00e6  ld   $e6
              29be 0009  ld   $09
              29bf 002b  ld   $2b
              29c0 0030  ld   $30
              29c1 0021  ld   $21
              29c2 0030  ld   $30
              29c3 00e6  ld   $e6
              29c4 0022  ld   $22
              29c5 0085  ld   $85
              29c6 00ec  ld   $ec
              29c7 006b  ld   $6b
              29c8 0035  ld   $35
              29c9 0072  ld   $72
              29ca 00ce  ld   $ce
              29cb 0085  ld   $85
              29cc 00d6  ld   $d6
              29cd 000b  ld   $0b
              29ce 0059  ld   $59
              29cf 0022  ld   $22
              29d0 002b  ld   $2b
              29d1 0030  ld   $30
              29d2 0063  ld   $63
              29d3 00ff  ld   $ff
              29d4 0085  ld   $85
              29d5 00ca  ld   $ca
              29d6 0008  ld   $08
              29d7 0021  ld   $21
              29d8 0036  ld   $36
              29d9 00e6  ld   $e6
              29da 0001  ld   $01
              29db 002b  ld   $2b
              29dc 0036  ld   $36
              29dd 0021  ld   $21
              29de 0034  ld   $34
              29df 008c  ld   $8c
              29e0 000a  ld   $0a
              29e1 0085  ld   $85
              29e2 00a0  ld   $a0
              29e3 0079  ld   $79
              29e4 002b  ld   $2b
              29e5 00e8  ld   $e8
              29e6 0021  ld   $21
              29e7 0036  ld   $36
              29e8 0085  ld   $85
              29e9 00ec  ld   $ec
              29ea 006b  ld   $6b
              29eb 00f8  ld   $f8
              29ec 00e8  ld   $e8
              29ed 0035  ld   $35
              29ee 0072  ld   $72
              29ef 00f3  ld   $f3
              29f0 0085  ld   $85
              29f1 00f9  ld   $f9
              29f2 000b  ld   $0b
              29f3 0059  ld   $59
              29f4 0000  ld   $00
              29f5 002b  ld   $2b
              29f6 0036  ld   $36
              29f7 0021  ld   $21
              29f8 0034  ld   $34
              29f9 008c  ld   $8c
              29fa 0054  ld   $54
              29fb fe00  bra  ac          ;+-----------------------------------+
              29fc fcfd  bra  $29fd       ;|                                   |
              29fd 1404  ld   $04,y       ;| Trampoline for page $2900 lookups |
              29fe e068  jmp  y,$68       ;|                                   |
              29ff c218  st   [$18]       ;+-----------------------------------+
              2a00 0085  ld   $85
              2a01 00a0  ld   $a0
              2a02 000c  ld   $0c
              2a03 000c  ld   $0c
              2a04 00a0  ld   $a0
              2a05 001c  ld   $1c
              2a06 0085  ld   $85
              2a07 00a0  ld   $a0
              2a08 0079  ld   $79
              2a09 002b  ld   $2b
              2a0a 00e8  ld   $e8
              2a0b 0021  ld   $21
              2a0c 0036  ld   $36
              2a0d 00e6  ld   $e6
              2a0e 0005  ld   $05
              2a0f 0085  ld   $85
              2a10 00ec  ld   $ec
              2a11 006b  ld   $6b
              2a12 00f8  ld   $f8
              2a13 00e8  ld   $e8
              2a14 0035  ld   $35
              2a15 0072  ld   $72
              2a16 00b2  ld   $b2
              2a17 0085  ld   $85
              2a18 00b8  ld   $b8
              2a19 000c  ld   $0c
              2a1a 0059  ld   $59
              2a1b 0005  ld   $05
              2a1c 002b  ld   $2b
              2a1d 0036  ld   $36
              2a1e 0063  ld   $63
              2a1f 00ff  ld   $ff
              2a20 00b4  ld   $b4
              2a21 0080  ld   $80
              2a22 006b  ld   $6b
              2a23 00dd  ld   $dd
              2a24 0022  ld   $22
              2a25 0075  ld   $75
              2a26 0085  ld   $85
              2a27 00af  ld   $af
              2a28 006f  ld   $6f
              2a29 0063  ld   $63
              2a2a 00ff  ld   $ff
              2a2b 0035  ld   $35
              2a2c 004d  ld   $4d
              2a2d 00e7  ld   $e7
              2a2e 0059  ld   $59
              2a2f 0000  ld   $00
              2a30 00ff  ld   $ff
              2a31 0059  ld   $59
              2a32 0001  ld   $01
              2a33 00ff  ld   $ff
              2a34 0035  ld   $35
              2a35 0050  ld   $50
              2a36 00f0  ld   $f0
              2a37 0059  ld   $59
              2a38 0000  ld   $00
              2a39 00ff  ld   $ff
              2a3a 0059  ld   $59
              2a3b 0001  ld   $01
              2a3c 00ff  ld   $ff
              2a3d 0011  ld   $11
              2a3e 00e4  ld   $e4
              2a3f 0075  ld   $75
              2a40 002b  ld   $2b
              2a41 0090  ld   $90
              2a42 001a  ld   $1a
              2a43 009e  ld   $9e
              2a44 00f0  ld   $f0
              2a45 0090  ld   $90
              2a46 00ff  ld   $ff
              2a47 006c  ld   $6c
              2a48 00a0  ld   $a0
              2a49 004a  ld   $4a
              2a4a 0011  ld   $11
              2a4b 00a7  ld   $a7
              2a4c 0004  ld   $04
              2a4d 002b  ld   $2b
              2a4e 0022  ld   $22
              2a4f 00b4  ld   $b4
              2a50 00fd  ld   $fd
              2a51 00ff  ld   $ff
              2a52 0011  ld   $11
              2a53 00d3  ld   $d3
              2a54 0075  ld   $75
              2a55 002b  ld   $2b
              2a56 0090  ld   $90
              2a57 0021  ld   $21
              2a58 009e  ld   $9e
              2a59 00f0  ld   $f0
              2a5a 0090  ld   $90
              2a5b 00ff  ld   $ff
              2a5c 0011  ld   $11
              2a5d 0000  ld   $00
              2a5e 000b  ld   $0b
              2a5f 002b  ld   $2b
              2a60 0022  ld   $22
              2a61 0021  ld   $21
              2a62 0082  ld   $82
              2a63 00b4  ld   $b4
              2a64 00e6  ld   $e6
              2a65 00ff  ld   $ff
              2a66 0035  ld   $35
              2a67 0053  ld   $53
              2a68 00c3  ld   $c3
              2a69 002b  ld   $2b
              2a6a 0092  ld   $92
              2a6b 0059  ld   $59
              2a6c 0000  ld   $00
              2a6d 00b8  ld   $b8
              2a6e 0092  ld   $92
              2a6f 00ff  ld   $ff
              2a70 0059  ld   $59
              2a71 0002  ld   $02
              2a72 002b  ld   $2b
              2a73 00a4  ld   $a4
              2a74 001a  ld   $1a
              2a75 00aa  ld   $aa
              2a76 0082  ld   $82
              2a77 00fb  ld   $fb
              2a78 005e  ld   $5e
              2a79 00aa  ld   $aa
              2a7a 00ff  ld   $ff
              2a7b 0075  ld   $75
              2a7c 005e  ld   $5e
              2a7d 0092  ld   $92
              2a7e 0085  ld   $85
              2a7f 00d1  ld   $d1
              2a80 006d  ld   $6d
              2a81 001a  ld   $1a
              2a82 0092  ld   $92
              2a83 0085  ld   $85
              2a84 00b3  ld   $b3
              2a85 0074  ld   $74
              2a86 0063  ld   $63
              2a87 00ff  ld   $ff
              2a88 001a  ld   $1a
              2a89 000e  ld   $0e
              2a8a 00fc  ld   $fc
              2a8b 00d6  ld   $d6
              2a8c 0035  ld   $35
              2a8d 003f  ld   $3f
              2a8e 00dc  ld   $dc
              2a8f 001a  ld   $1a
              2a90 000e  ld   $0e
              2a91 002b  ld   $2b
              2a92 00d6  ld   $d6
              2a93 00ff  ld   $ff
              2a94 006c  ld   $6c
              2a95 00ee  ld   $ee
              2a96 0011  ld   $11
              2a97 001a  ld   $1a
              2a98 0096  ld   $96
              2a99 0082  ld   $82
              2a9a 0003  ld   $03
              2a9b 00e3  ld   $e3
              2a9c 0001  ld   $01
              2a9d 005e  ld   $5e
              2a9e 0099  ld   $99
              2a9f 0059  ld   $59
              2aa0 00fc  ld   $fc
              2aa1 005e  ld   $5e
              2aa2 0098  ld   $98
              2aa3 0021  ld   $21
              2aa4 0094  ld   $94
              2aa5 00f3  ld   $f3
              2aa6 0098  ld   $98
              2aa7 00ff  ld   $ff
              2aa8 006d  ld   $6d
              2aa9 00a0  ld   $a0
              2aaa 005f  ld   $5f
              2aab 002b  ld   $2b
              2aac 001a  ld   $1a
              2aad 0059  ld   $59
              2aae 00ad  ld   $ad
              2aaf 002b  ld   $2b
              2ab0 0022  ld   $22
              2ab1 00b4  ld   $b4
              2ab2 00e2  ld   $e2
              2ab3 0011  ld   $11
              2ab4 0000  ld   $00
              2ab5 0006  ld   $06
              2ab6 002b  ld   $2b
              2ab7 0022  ld   $22
              2ab8 0059  ld   $59
              2ab9 00fc  ld   $fc
              2aba 005e  ld   $5e
              2abb 0092  ld   $92
              2abc 001a  ld   $1a
              2abd 0094  ld   $94
              2abe 00b4  ld   $b4
              2abf 00f6  ld   $f6
              2ac0 005e  ld   $5e
              2ac1 0094  ld   $94
              2ac2 0021  ld   $21
              2ac3 0094  ld   $94
              2ac4 00f3  ld   $f3
              2ac5 0092  ld   $92
              2ac6 00ff  ld   $ff
              2ac7 0075  ld   $75
              2ac8 002b  ld   $2b
              2ac9 0082  ld   $82
              2aca 0085  ld   $85
              2acb 00d1  ld   $d1
              2acc 006d  ld   $6d
              2acd 0093  ld   $93
              2ace 0082  ld   $82
              2acf 0021  ld   $21
              2ad0 0082  ld   $82
              2ad1 00ad  ld   $ad
              2ad2 0035  ld   $35
              2ad3 003f  ld   $3f
              2ad4 00cd  ld   $cd
              2ad5 0085  ld   $85
              2ad6 00b3  ld   $b3
              2ad7 0074  ld   $74
              2ad8 0090  ld   $90
              2ad9 00c0  ld   $c0
              2ada 0063  ld   $63
              2adb 00ff  ld   $ff
              2adc 0011  ld   $11
              2add 00e1  ld   $e1
              2ade 0004  ld   $04
              2adf 002b  ld   $2b
              2ae0 0022  ld   $22
              2ae1 0021  ld   $21
              2ae2 00a2  ld   $a2
              2ae3 002b  ld   $2b
              2ae4 0024  ld   $24
              2ae5 001a  ld   $1a
              2ae6 00a5  ld   $a5
              2ae7 00e9  ld   $e9
              2ae8 0093  ld   $93
              2ae9 0019  ld   $19
              2aea 00ad  ld   $ad
              2aeb 005e  ld   $5e
              2aec 0029  ld   $29
              2aed 001a  ld   $1a
              2aee 00a4  ld   $a4
              2aef 005e  ld   $5e
              2af0 0028  ld   $28
              2af1 00ff  ld   $ff
              2af2 001a  ld   $1a
              2af3 00a4  ld   $a4
              2af4 00e3  ld   $e3
              2af5 0006  ld   $06
              2af6 005e  ld   $5e
              2af7 00a4  ld   $a4
              2af8 00e6  ld   $e6
              2af9 009a  ld   $9a
              2afa 0035  ld   $35
              2afb fe00  bra  ac          ;+-----------------------------------+
              2afc fcfd  bra  $2afd       ;|                                   |
              2afd 1404  ld   $04,y       ;| Trampoline for page $2a00 lookups |
              2afe e068  jmp  y,$68       ;|                                   |
              2aff c218  st   [$18]       ;+-----------------------------------+
              2b00 0056  ld   $56
              2b01 00fc  ld   $fc
              2b02 001a  ld   $1a
              2b03 00aa  ld   $aa
              2b04 0082  ld   $82
              2b05 0008  ld   $08
              2b06 0035  ld   $35
              2b07 0072  ld   $72
              2b08 00fc  ld   $fc
              2b09 0075  ld   $75
              2b0a 0085  ld   $85
              2b0b 00a1  ld   $a1
              2b0c 0078  ld   $78
              2b0d 0063  ld   $63
              2b0e 00ff  ld   $ff
              2b0f 006e  ld   $6e
              2b10 00a0  ld   $a0
              2b11 005f  ld   $5f
              2b12 0011  ld   $11
              2b13 00ea  ld   $ea
              2b14 0008  ld   $08
              2b15 002b  ld   $2b
              2b16 0098  ld   $98
              2b17 001a  ld   $1a
              2b18 0094  ld   $94
              2b19 00e9  ld   $e9
              2b1a 0099  ld   $99
              2b1b 0098  ld   $98
              2b1c 002b  ld   $2b
              2b1d 0098  ld   $98
              2b1e 007f  ld   $7f
              2b1f 0000  ld   $00
              2b20 005e  ld   $5e
              2b21 0094  ld   $94
              2b22 0021  ld   $21
              2b23 0098  ld   $98
              2b24 007f  ld   $7f
              2b25 0001  ld   $01
              2b26 005e  ld   $5e
              2b27 0095  ld   $95
              2b28 0021  ld   $21
              2b29 0094  ld   $94
              2b2a 00ff  ld   $ff
              2b2b 0075  ld   $75
              2b2c 0021  ld   $21
              2b2d 0092  ld   $92
              2b2e 00b8  ld   $b8
              2b2f 0084  ld   $84
              2b30 0035  ld   $35
              2b31 0053  ld   $53
              2b32 00cb  ld   $cb
              2b33 0021  ld   $21
              2b34 0092  ld   $92
              2b35 002b  ld   $2b
              2b36 00a0  ld   $a0
              2b37 0021  ld   $21
              2b38 0084  ld   $84
              2b39 002b  ld   $2b
              2b3a 0092  ld   $92
              2b3b 0021  ld   $21
              2b3c 00a0  ld   $a0
              2b3d 002b  ld   $2b
              2b3e 0084  ld   $84
              2b3f 0085  ld   $85
              2b40 00a5  ld   $a5
              2b41 0070  ld   $70
              2b42 0093  ld   $93
              2b43 0084  ld   $84
              2b44 0021  ld   $21
              2b45 0084  ld   $84
              2b46 00b8  ld   $b8
              2b47 0092  ld   $92
              2b48 0035  ld   $35
              2b49 0056  ld   $56
              2b4a 00cb  ld   $cb
              2b4b 0063  ld   $63
              2b4c 00ff  ld   $ff
              2b4d 001a  ld   $1a
              2b4e 00a4  ld   $a4
              2b4f 00e6  ld   $e6
              2b50 009a  ld   $9a
              2b51 0035  ld   $35
              2b52 0056  ld   $56
              2b53 00e4  ld   $e4
              2b54 0059  ld   $59
              2b55 0000  ld   $00
              2b56 005e  ld   $5e
              2b57 00a4  ld   $a4
              2b58 001a  ld   $1a
              2b59 00a5  ld   $a5
              2b5a 00e6  ld   $e6
              2b5b 0070  ld   $70
              2b5c 0035  ld   $35
              2b5d 0050  ld   $50
              2b5e 00f6  ld   $f6
              2b5f 0059  ld   $59
              2b60 0070  ld   $70
              2b61 005e  ld   $5e
              2b62 00a5  ld   $a5
              2b63 001a  ld   $1a
              2b64 00aa  ld   $aa
              2b65 0088  ld   $88
              2b66 0004  ld   $04
              2b67 005e  ld   $5e
              2b68 00aa  ld   $aa
              2b69 00ff  ld   $ff
              2b6a 001a  ld   $1a
              2b6b 00aa  ld   $aa
              2b6c 0082  ld   $82
              2b6d 00fb  ld   $fb
              2b6e 005e  ld   $5e
              2b6f 00aa  ld   $aa
              2b70 00ff  ld   $ff
              2b71 006f  ld   $6f
              2b72 00a0  ld   $a0
              2b73 005f  ld   $5f
              2b74 0075  ld   $75
              2b75 0085  ld   $85
              2b76 00c6  ld   $c6
              2b77 006c  ld   $6c
              2b78 0011  ld   $11
              2b79 0003  ld   $03
              2b7a 000b  ld   $0b
              2b7b 002b  ld   $2b
              2b7c 0022  ld   $22
              2b7d 001a  ld   $1a
              2b7e 00a2  ld   $a2
              2b7f 005e  ld   $5e
              2b80 0025  ld   $25
              2b81 0063  ld   $63
              2b82 00ff  ld   $ff
              2b83 0059  ld   $59
              2b84 0001  ld   $01
              2b85 005e  ld   $5e
              2b86 0085  ld   $85
              2b87 0059  ld   $59
              2b88 0000  ld   $00
              2b89 005e  ld   $5e
              2b8a 0086  ld   $86
              2b8b 0059  ld   $59
              2b8c 00fa  ld   $fa
              2b8d 005e  ld   $5e
              2b8e 0084  ld   $84
              2b8f 0021  ld   $21
              2b90 0086  ld   $86
              2b91 00f3  ld   $f3
              2b92 0084  ld   $84
              2b93 0093  ld   $93
              2b94 0084  ld   $84
              2b95 0093  ld   $93
              2b96 0084  ld   $84
              2b97 0059  ld   $59
              2b98 0000  ld   $00
              2b99 00f3  ld   $f3
              2b9a 0084  ld   $84
              2b9b 0093  ld   $93
              2b9c 0084  ld   $84
              2b9d 0093  ld   $93
              2b9e 0084  ld   $84
              2b9f 00f3  ld   $f3
              2ba0 0084  ld   $84
              2ba1 0093  ld   $93
              2ba2 0085  ld   $85
              2ba3 001a  ld   $1a
              2ba4 0085  ld   $85
              2ba5 00e6  ld   $e6
              2ba6 0004  ld   $04
              2ba7 0035  ld   $35
              2ba8 0056  ld   $56
              2ba9 00b5  ld   $b5
              2baa 00ff  ld   $ff
              2bab 001a  ld   $1a
              2bac 00a3  ld   $a3
              2bad 00f0  ld   $f0
              2bae 0096  ld   $96
              2baf 0021  ld   $21
              2bb0 0098  ld   $98
              2bb1 0099  ld   $99
              2bb2 0088  ld   $88
              2bb3 002b  ld   $2b
              2bb4 0098  ld   $98
              2bb5 0035  ld   $35
              2bb6 0056  ld   $56
              2bb7 00ec  ld   $ec
              2bb8 00b8  ld   $b8
              2bb9 0086  ld   $86
              2bba 002b  ld   $2b
              2bbb 0098  ld   $98
              2bbc 0021  ld   $21
              2bbd 0096  ld   $96
              2bbe 0099  ld   $99
              2bbf 0094  ld   $94
              2bc0 002b  ld   $2b
              2bc1 0096  ld   $96
              2bc2 0021  ld   $21
              2bc3 0096  ld   $96
              2bc4 0099  ld   $99
              2bc5 0092  ld   $92
              2bc6 002b  ld   $2b
              2bc7 0096  ld   $96
              2bc8 0021  ld   $21
              2bc9 009a  ld   $9a
              2bca 00e3  ld   $e3
              2bcb 0001  ld   $01
              2bcc 002b  ld   $2b
              2bcd 009a  ld   $9a
              2bce 0035  ld   $35
              2bcf 0056  ld   $56
              2bd0 00d5  ld   $d5
              2bd1 0063  ld   $63
              2bd2 00ff  ld   $ff
              2bd3 0070  ld   $70
              2bd4 00a5  ld   $a5
              2bd5 005a  ld   $5a
              2bd6 001a  ld   $1a
              2bd7 0082  ld   $82
              2bd8 005e  ld   $5e
              2bd9 0026  ld   $26
              2bda 001a  ld   $1a
              2bdb 0086  ld   $86
              2bdc 00b8  ld   $b8
              2bdd 0082  ld   $82
              2bde 0035  ld   $35
              2bdf 0053  ld   $53
              2be0 00b6  ld   $b6
              2be1 001a  ld   $1a
              2be2 0086  ld   $86
              2be3 005e  ld   $5e
              2be4 0026  ld   $26
              2be5 001a  ld   $1a
              2be6 0082  ld   $82
              2be7 00b8  ld   $b8
              2be8 0086  ld   $86
              2be9 00e3  ld   $e3
              2bea 0001  ld   $01
              2beb 005e  ld   $5e
              2bec 0024  ld   $24
              2bed 001a  ld   $1a
              2bee 00a3  ld   $a3
              2bef 005e  ld   $5e
              2bf0 0025  ld   $25
              2bf1 001a  ld   $1a
              2bf2 0084  ld   $84
              2bf3 00e3  ld   $e3
              2bf4 0008  ld   $08
              2bf5 005e  ld   $5e
              2bf6 0027  ld   $27
              2bf7 0011  ld   $11
              2bf8 0003  ld   $03
              2bf9 000b  ld   $0b
              2bfa 002b  ld   $2b
              2bfb fe00  bra  ac          ;+-----------------------------------+
              2bfc fcfd  bra  $2bfd       ;|                                   |
              2bfd 1404  ld   $04,y       ;| Trampoline for page $2b00 lookups |
              2bfe e068  jmp  y,$68       ;|                                   |
              2bff c218  st   [$18]       ;+-----------------------------------+
              2c00 0022  ld   $22
              2c01 00b4  ld   $b4
              2c02 00f3  ld   $f3
              2c03 00ff  ld   $ff
              2c04 0075  ld   $75
              2c05 0059  ld   $59
              2c06 0001  ld   $01
              2c07 002b  ld   $2b
              2c08 0092  ld   $92
              2c09 0021  ld   $21
              2c0a 0086  ld   $86
              2c0b 00b8  ld   $b8
              2c0c 0082  ld   $82
              2c0d 0035  ld   $35
              2c0e 0053  ld   $53
              2c0f 00e1  ld   $e1
              2c10 0011  ld   $11
              2c11 00ff  ld   $ff
              2c12 00ff  ld   $ff
              2c13 002b  ld   $2b
              2c14 0092  ld   $92
              2c15 0021  ld   $21
              2c16 0082  ld   $82
              2c17 00b8  ld   $b8
              2c18 0086  ld   $86
              2c19 002b  ld   $2b
              2c1a 0086  ld   $86
              2c1b 0011  ld   $11
              2c1c 0000  ld   $00
              2c1d 0001  ld   $01
              2c1e 002b  ld   $2b
              2c1f 0094  ld   $94
              2c20 0021  ld   $21
              2c21 0088  ld   $88
              2c22 00b8  ld   $b8
              2c23 0084  ld   $84
              2c24 0035  ld   $35
              2c25 0053  ld   $53
              2c26 00f8  ld   $f8
              2c27 0011  ld   $11
              2c28 0000  ld   $00
              2c29 00ff  ld   $ff
              2c2a 002b  ld   $2b
              2c2b 0094  ld   $94
              2c2c 0021  ld   $21
              2c2d 0084  ld   $84
              2c2e 00b8  ld   $b8
              2c2f 0088  ld   $88
              2c30 002b  ld   $2b
              2c31 0088  ld   $88
              2c32 0085  ld   $85
              2c33 00a2  ld   $a2
              2c34 0071  ld   $71
              2c35 0071  ld   $71
              2c36 00a2  ld   $a2
              2c37 005d  ld   $5d
              2c38 001a  ld   $1a
              2c39 0082  ld   $82
              2c3a 005e  ld   $5e
              2c3b 0096  ld   $96
              2c3c 001a  ld   $1a
              2c3d 0084  ld   $84
              2c3e 00e3  ld   $e3
              2c3f 0008  ld   $08
              2c40 005e  ld   $5e
              2c41 0097  ld   $97
              2c42 0021  ld   $21
              2c43 0086  ld   $86
              2c44 00b8  ld   $b8
              2c45 0088  ld   $88
              2c46 0035  ld   $35
              2c47 0053  ld   $53
              2c48 00b4  ld   $b4
              2c49 0085  ld   $85
              2c4a 00a0  ld   $a0
              2c4b 0073  ld   $73
              2c4c 0059  ld   $59
              2c4d 0000  ld   $00
              2c4e 00b8  ld   $b8
              2c4f 0086  ld   $86
              2c50 002b  ld   $2b
              2c51 0098  ld   $98
              2c52 002b  ld   $2b
              2c53 009a  ld   $9a
              2c54 0021  ld   $21
              2c55 0086  ld   $86
              2c56 0099  ld   $99
              2c57 0086  ld   $86
              2c58 002b  ld   $2b
              2c59 0086  ld   $86
              2c5a 0021  ld   $21
              2c5b 0088  ld   $88
              2c5c 0099  ld   $99
              2c5d 0088  ld   $88
              2c5e 002b  ld   $2b
              2c5f 0088  ld   $88
              2c60 0085  ld   $85
              2c61 00d7  ld   $d7
              2c62 006f  ld   $6f
              2c63 0075  ld   $75
              2c64 0085  ld   $85
              2c65 00a0  ld   $a0
              2c66 006f  ld   $6f
              2c67 0059  ld   $59
              2c68 0008  ld   $08
              2c69 002b  ld   $2b
              2c6a 0094  ld   $94
              2c6b 0059  ld   $59
              2c6c 00a0  ld   $a0
              2c6d 005e  ld   $5e
              2c6e 0024  ld   $24
              2c6f 0059  ld   $59
              2c70 0000  ld   $00
              2c71 005e  ld   $5e
              2c72 0026  ld   $26
              2c73 001a  ld   $1a
              2c74 0094  ld   $94
              2c75 005e  ld   $5e
              2c76 0027  ld   $27
              2c77 00b4  ld   $b4
              2c78 00f3  ld   $f3
              2c79 0059  ld   $59
              2c7a 00a0  ld   $a0
              2c7b 005e  ld   $5e
              2c7c 0024  ld   $24
              2c7d 0059  ld   $59
              2c7e 0000  ld   $00
              2c7f 005e  ld   $5e
              2c80 0026  ld   $26
              2c81 0011  ld   $11
              2c82 0087  ld   $87
              2c83 0000  ld   $00
              2c84 00b8  ld   $b8
              2c85 0094  ld   $94
              2c86 005e  ld   $5e
              2c87 0027  ld   $27
              2c88 00b4  ld   $b4
              2c89 00f3  ld   $f3
              2c8a 0093  ld   $93
              2c8b 0094  ld   $94
              2c8c 001a  ld   $1a
              2c8d 0094  ld   $94
              2c8e 00e6  ld   $e6
              2c8f 0044  ld   $44
              2c90 0035  ld   $35
              2c91 0050  ld   $50
              2c92 00d3  ld   $d3
              2c93 0063  ld   $63
              2c94 00ff  ld   $ff
              2c95 0072  ld   $72
              2c96 00a1  ld   $a1
              2c97 005e  ld   $5e
              2c98 0075  ld   $75
              2c99 0011  ld   $11
              2c9a 0003  ld   $03
              2c9b 000b  ld   $0b
              2c9c 002b  ld   $2b
              2c9d 0022  ld   $22
              2c9e 001a  ld   $1a
              2c9f 00a2  ld   $a2
              2ca0 005e  ld   $5e
              2ca1 0025  ld   $25
              2ca2 0011  ld   $11
              2ca3 0000  ld   $00
              2ca4 0001  ld   $01
              2ca5 00ad  ld   $ad
              2ca6 005e  ld   $5e
              2ca7 0027  ld   $27
              2ca8 0059  ld   $59
              2ca9 0008  ld   $08
              2caa 005e  ld   $5e
              2cab 009e  ld   $9e
              2cac 0059  ld   $59
              2cad 00a0  ld   $a0
              2cae 005e  ld   $5e
              2caf 0024  ld   $24
              2cb0 0059  ld   $59
              2cb1 0000  ld   $00
              2cb2 005e  ld   $5e
              2cb3 0026  ld   $26
              2cb4 00b4  ld   $b4
              2cb5 00f3  ld   $f3
              2cb6 0093  ld   $93
              2cb7 0027  ld   $27
              2cb8 001a  ld   $1a
              2cb9 009e  ld   $9e
              2cba 00e6  ld   $e6
              2cbb 0001  ld   $01
              2cbc 0035  ld   $35
              2cbd 0072  ld   $72
              2cbe 00b1  ld   $b1
              2cbf 0085  ld   $85
              2cc0 00d1  ld   $d1
              2cc1 006d  ld   $6d
              2cc2 0063  ld   $63
              2cc3 00ff  ld   $ff
              2cc4 0075  ld   $75
              2cc5 0011  ld   $11
              2cc6 00a9  ld   $a9
              2cc7 0079  ld   $79
              2cc8 002b  ld   $2b
              2cc9 009e  ld   $9e
              2cca 002b  ld   $2b
              2ccb 00ac  ld   $ac
              2ccc 0011  ld   $11
              2ccd 00f4  ld   $f4
              2cce 0078  ld   $78
              2ccf 002b  ld   $2b
              2cd0 00a0  ld   $a0
              2cd1 0021  ld   $21
              2cd2 00ac  ld   $ac
              2cd3 00f6  ld   $f6
              2cd4 0035  ld   $35
              2cd5 0072  ld   $72
              2cd6 00e7  ld   $e7
              2cd7 0021  ld   $21
              2cd8 009c  ld   $9c
              2cd9 0035  ld   $35
              2cda 003f  ld   $3f
              2cdb 00e5  ld   $e5
              2cdc 00cf  ld   $cf
              2cdd 009c  ld   $9c
              2cde 0063  ld   $63
              2cdf 00ff  ld   $ff
              2ce0 00b8  ld   $b8
              2ce1 009a  ld   $9a
              2ce2 0035  ld   $35
              2ce3 003f  ld   $3f
              2ce4 00f2  ld   $f2
              2ce5 0093  ld   $93
              2ce6 00ac  ld   $ac
              2ce7 0093  ld   $93
              2ce8 00ac  ld   $ac
              2ce9 0090  ld   $90
              2cea 00d8  ld   $d8
              2ceb 0021  ld   $21
              2cec 00ac  ld   $ac
              2ced 00b8  ld   $b8
              2cee 009e  ld   $9e
              2cef 0099  ld   $99
              2cf0 00a0  ld   $a0
              2cf1 00f6  ld   $f6
              2cf2 00cf  ld   $cf
              2cf3 0018  ld   $18
              2cf4 0063  ld   $63
              2cf5 00ff  ld   $ff
              2cf6 0073  ld   $73
              2cf7 00a0  ld   $a0
              2cf8 005f  ld   $5f
              2cf9 0021  ld   $21
              2cfa 0086  ld   $86
              2cfb fe00  bra  ac          ;+-----------------------------------+
              2cfc fcfd  bra  $2cfd       ;|                                   |
              2cfd 1404  ld   $04,y       ;| Trampoline for page $2c00 lookups |
              2cfe e068  jmp  y,$68       ;|                                   |
              2cff c218  st   [$18]       ;+-----------------------------------+
              2d00 002b  ld   $2b
              2d01 009c  ld   $9c
              2d02 0021  ld   $21
              2d03 0088  ld   $88
              2d04 002b  ld   $2b
              2d05 0086  ld   $86
              2d06 0021  ld   $21
              2d07 009c  ld   $9c
              2d08 002b  ld   $2b
              2d09 0088  ld   $88
              2d0a 0021  ld   $21
              2d0b 0092  ld   $92
              2d0c 002b  ld   $2b
              2d0d 009c  ld   $9c
              2d0e 0021  ld   $21
              2d0f 0094  ld   $94
              2d10 002b  ld   $2b
              2d11 0092  ld   $92
              2d12 0021  ld   $21
              2d13 009c  ld   $9c
              2d14 002b  ld   $2b
              2d15 0094  ld   $94
              2d16 00ff  ld   $ff
              2d17 0075  ld   $75
              2d18 0021  ld   $21
              2d19 0092  ld   $92
              2d1a 0093  ld   $93
              2d1b 0092  ld   $92
              2d1c 00ad  ld   $ad
              2d1d 005e  ld   $5e
              2d1e 0096  ld   $96
              2d1f 0082  ld   $82
              2d20 00f0  ld   $f0
              2d21 008c  ld   $8c
              2d22 0090  ld   $90
              2d23 0035  ld   $35
              2d24 0072  ld   $72
              2d25 00d5  ld   $d5
              2d26 0021  ld   $21
              2d27 0092  ld   $92
              2d28 0093  ld   $93
              2d29 0092  ld   $92
              2d2a 00ad  ld   $ad
              2d2b 005e  ld   $5e
              2d2c 0094  ld   $94
              2d2d 0085  ld   $85
              2d2e 00a0  ld   $a0
              2d2f 006e  ld   $6e
              2d30 0085  ld   $85
              2d31 00ee  ld   $ee
              2d32 006c  ld   $6c
              2d33 0090  ld   $90
              2d34 00b8  ld   $b8
              2d35 008c  ld   $8c
              2d36 0010  ld   $10
              2d37 0035  ld   $35
              2d38 0072  ld   $72
              2d39 00e3  ld   $e3
              2d3a 0059  ld   $59
              2d3b 0000  ld   $00
              2d3c 002b  ld   $2b
              2d3d 0094  ld   $94
              2d3e 0085  ld   $85
              2d3f 00ee  ld   $ee
              2d40 006c  ld   $6c
              2d41 0090  ld   $90
              2d42 00b8  ld   $b8
              2d43 008c  ld   $8c
              2d44 0050  ld   $50
              2d45 0035  ld   $35
              2d46 0072  ld   $72
              2d47 00f2  ld   $f2
              2d48 0021  ld   $21
              2d49 0092  ld   $92
              2d4a 00f6  ld   $f6
              2d4b 002b  ld   $2b
              2d4c 0092  ld   $92
              2d4d 0035  ld   $35
              2d4e 0072  ld   $72
              2d4f 00b8  ld   $b8
              2d50 0063  ld   $63
              2d51 00ff  ld   $ff
              2d52 001a  ld   $1a
              2d53 0096  ld   $96
              2d54 005e  ld   $5e
              2d55 002c  ld   $2c
              2d56 002b  ld   $2b
              2d57 0082  ld   $82
              2d58 0085  ld   $85
              2d59 00a2  ld   $a2
              2d5a 0074  ld   $74
              2d5b 0090  ld   $90
              2d5c 00b8  ld   $b8
              2d5d 0074  ld   $74
              2d5e 00a2  ld   $a2
              2d5f 005d  ld   $5d
              2d60 0021  ld   $21
              2d61 0082  ld   $82
              2d62 00e6  ld   $e6
              2d63 0001  ld   $01
              2d64 002b  ld   $2b
              2d65 0082  ld   $82
              2d66 0035  ld   $35
              2d67 0053  ld   $53
              2d68 00aa  ld   $aa
              2d69 00ff  ld   $ff
              2d6a 0075  ld   $75
              2d6b 0085  ld   $85
              2d6c 00de  ld   $de
              2d6d 006c  ld   $6c
              2d6e 0063  ld   $63
              2d6f 0090  ld   $90
              2d70 00a0  ld   $a0
              2d71 00e6  ld   $e6
              2d72 0082  ld   $82
              2d73 0035  ld   $35
              2d74 004d  ld   $4d
              2d75 00fc  ld   $fc
              2d76 00e3  ld   $e3
              2d77 0082  ld   $82
              2d78 00e6  ld   $e6
              2d79 0052  ld   $52
              2d7a 0035  ld   $35
              2d7b 0053  ld   $53
              2d7c 00c9  ld   $c9
              2d7d 00e3  ld   $e3
              2d7e 0032  ld   $32
              2d7f 0035  ld   $35
              2d80 0050  ld   $50
              2d81 00fc  ld   $fc
              2d82 002b  ld   $2b
              2d83 0092  ld   $92
              2d84 0011  ld   $11
              2d85 0000  ld   $00
              2d86 0007  ld   $07
              2d87 0090  ld   $90
              2d88 00ce  ld   $ce
              2d89 002b  ld   $2b
              2d8a 0092  ld   $92
              2d8b 0011  ld   $11
              2d8c 0000  ld   $00
              2d8d 0008  ld   $08
              2d8e 002b  ld   $2b
              2d8f 0094  ld   $94
              2d90 001a  ld   $1a
              2d91 0092  ld   $92
              2d92 00e9  ld   $e9
              2d93 00e9  ld   $e9
              2d94 0099  ld   $99
              2d95 0092  ld   $92
              2d96 0099  ld   $99
              2d97 0094  ld   $94
              2d98 002b  ld   $2b
              2d99 0094  ld   $94
              2d9a 0059  ld   $59
              2d9b 0005  ld   $05
              2d9c 005e  ld   $5e
              2d9d 0096  ld   $96
              2d9e 0021  ld   $21
              2d9f 0094  ld   $94
              2da0 007f  ld   $7f
              2da1 0000  ld   $00
              2da2 005e  ld   $5e
              2da3 0026  ld   $26
              2da4 00b4  ld   $b4
              2da5 00cb  ld   $cb
              2da6 0093  ld   $93
              2da7 0094  ld   $94
              2da8 0093  ld   $93
              2da9 0028  ld   $28
              2daa 001a  ld   $1a
              2dab 0096  ld   $96
              2dac 00e6  ld   $e6
              2dad 0001  ld   $01
              2dae 0035  ld   $35
              2daf 0072  ld   $72
              2db0 00dc  ld   $dc
              2db1 005e  ld   $5e
              2db2 0026  ld   $26
              2db3 00b4  ld   $b4
              2db4 00cb  ld   $cb
              2db5 0093  ld   $93
              2db6 0028  ld   $28
              2db7 0075  ld   $75
              2db8 0085  ld   $85
              2db9 00e7  ld   $e7
              2dba 006d  ld   $6d
              2dbb 0063  ld   $63
              2dbc 00ff  ld   $ff
              2dbd 0075  ld   $75
              2dbe 00a0  ld   $a0
              2dbf 005f  ld   $5f
              2dc0 0090  ld   $90
              2dc1 003c  ld   $3c
              2dc2 0091  ld   $91
              2dc3 0040  ld   $40
              2dc4 0092  ld   $92
              2dc5 0043  ld   $43
              2dc6 0093  ld   $93
              2dc7 0048  ld   $48
              2dc8 000c  ld   $0c
              2dc9 0080  ld   $80
              2dca 0081  ld   $81
              2dcb 0082  ld   $82
              2dcc 0083  ld   $83
              2dcd 0001  ld   $01
              2dce 0090  ld   $90
              2dcf 003c  ld   $3c
              2dd0 0091  ld   $91
              2dd1 0040  ld   $40
              2dd2 0092  ld   $92
              2dd3 0043  ld   $43
              2dd4 0093  ld   $93
              2dd5 0048  ld   $48
              2dd6 0024  ld   $24
              2dd7 0080  ld   $80
              2dd8 0081  ld   $81
              2dd9 0082  ld   $82
              2dda 0083  ld   $83
              2ddb 00d0  ld   $d0
              2ddc 0000  ld   $00
              2ddd 0000  ld   $00
              2dde 0075  ld   $75
              2ddf 001a  ld   $1a
              2de0 00a4  ld   $a4
              2de1 002b  ld   $2b
              2de2 0082  ld   $82
              2de3 001a  ld   $1a
              2de4 00a5  ld   $a5
              2de5 002b  ld   $2b
              2de6 0084  ld   $84
              2de7 0021  ld   $21
              2de8 0090  ld   $90
              2de9 00f6  ld   $f6
              2dea 002b  ld   $2b
              2deb 0086  ld   $86
              2dec 00e6  ld   $e6
              2ded 00ff  ld   $ff
              2dee 0035  ld   $35
              2def 003f  ld   $3f
              2df0 00f1  ld   $f1
              2df1 0021  ld   $21
              2df2 0082  ld   $82
              2df3 0099  ld   $99
              2df4 0086  ld   $86
              2df5 002b  ld   $2b
              2df6 0086  ld   $86
              2df7 005e  ld   $5e
              2df8 00a4  ld   $a4
              2df9 0093  ld   $93
              2dfa 0090  ld   $90
              2dfb fe00  bra  ac          ;+-----------------------------------+
              2dfc fcfd  bra  $2dfd       ;|                                   |
              2dfd 1404  ld   $04,y       ;| Trampoline for page $2d00 lookups |
              2dfe e068  jmp  y,$68       ;|                                   |
              2dff c218  st   [$18]       ;+-----------------------------------+
              2e00 0093  ld   $93
              2e01 0090  ld   $90
              2e02 0021  ld   $21
              2e03 0090  ld   $90
              2e04 00f6  ld   $f6
              2e05 002b  ld   $2b
              2e06 0088  ld   $88
              2e07 0021  ld   $21
              2e08 0084  ld   $84
              2e09 0099  ld   $99
              2e0a 0088  ld   $88
              2e0b 002b  ld   $2b
              2e0c 0088  ld   $88
              2e0d 005e  ld   $5e
              2e0e 00a5  ld   $a5
              2e0f 0085  ld   $85
              2e10 00ce  ld   $ce
              2e11 0070  ld   $70
              2e12 0093  ld   $93
              2e13 0090  ld   $90
              2e14 0093  ld   $93
              2e15 0090  ld   $90
              2e16 0090  ld   $90
              2e17 00bd  ld   $bd
              2e18 0059  ld   $59
              2e19 0099  ld   $99
              2e1a 005e  ld   $5e
              2e1b 009e  ld   $9e
              2e1c 0085  ld   $85
              2e1d 00a8  ld   $a8
              2e1e 006c  ld   $6c
              2e1f 0085  ld   $85
              2e20 00f5  ld   $f5
              2e21 006b  ld   $6b
              2e22 0063  ld   $63
              2e23 00ff  ld   $ff
              2e24 0078  ld   $78
              2e25 00a1  ld   $a1
              2e26 005f  ld   $5f
              2e27 0059  ld   $59
              2e28 0002  ld   $02
              2e29 005e  ld   $5e
              2e2a 00a4  ld   $a4
              2e2b 005e  ld   $5e
              2e2c 0028  ld   $28
              2e2d 001a  ld   $1a
              2e2e 00aa  ld   $aa
              2e2f 0082  ld   $82
              2e30 0002  ld   $02
              2e31 0035  ld   $35
              2e32 0072  ld   $72
              2e33 00ad  ld   $ad
              2e34 00ff  ld   $ff
              2e35 0075  ld   $75
              2e36 001a  ld   $1a
              2e37 00aa  ld   $aa
              2e38 0082  ld   $82
              2e39 0004  ld   $04
              2e3a 0035  ld   $35
              2e3b 0072  ld   $72
              2e3c 00c4  ld   $c4
              2e3d 001a  ld   $1a
              2e3e 00a5  ld   $a5
              2e3f 00e3  ld   $e3
              2e40 0008  ld   $08
              2e41 005e  ld   $5e
              2e42 00a5  ld   $a5
              2e43 00e6  ld   $e6
              2e44 0078  ld   $78
              2e45 0035  ld   $35
              2e46 0050  ld   $50
              2e47 00ed  ld   $ed
              2e48 0059  ld   $59
              2e49 0070  ld   $70
              2e4a 005e  ld   $5e
              2e4b 00a5  ld   $a5
              2e4c 0085  ld   $85
              2e4d 00a1  ld   $a1
              2e4e 0072  ld   $72
              2e4f 0011  ld   $11
              2e50 0000  ld   $00
              2e51 0001  ld   $01
              2e52 002b  ld   $2b
              2e53 0098  ld   $98
              2e54 0021  ld   $21
              2e55 0098  ld   $98
              2e56 00ad  ld   $ad
              2e57 00e3  ld   $e3
              2e58 0008  ld   $08
              2e59 00e6  ld   $e6
              2e5a 007f  ld   $7f
              2e5b 0035  ld   $35
              2e5c 0056  ld   $56
              2e5d 00d8  ld   $d8
              2e5e 00e3  ld   $e3
              2e5f 0088  ld   $88
              2e60 00e3  ld   $e3
              2e61 007f  ld   $7f
              2e62 00f0  ld   $f0
              2e63 0098  ld   $98
              2e64 0093  ld   $93
              2e65 0098  ld   $98
              2e66 0093  ld   $93
              2e67 0098  ld   $98
              2e68 001a  ld   $1a
              2e69 0098  ld   $98
              2e6a 00e6  ld   $e6
              2e6b 00f0  ld   $f0
              2e6c 0035  ld   $35
              2e6d 0050  ld   $50
              2e6e 00cc  ld   $cc
              2e6f 001a  ld   $1a
              2e70 00aa  ld   $aa
              2e71 0088  ld   $88
              2e72 0004  ld   $04
              2e73 005e  ld   $5e
              2e74 00aa  ld   $aa
              2e75 0085  ld   $85
              2e76 00d1  ld   $d1
              2e77 006d  ld   $6d
              2e78 0063  ld   $63
              2e79 00ff  ld   $ff
              2e7a 00e1  ld   $e1
              2e7b 0008  ld   $08
              2e7c 00ea  ld   $ea
              2e7d 0008  ld   $08
              2e7e 00f4  ld   $f4
              2e7f 0008  ld   $08
              2e80 00c6  ld   $c6
              2e81 0009  ld   $09
              2e82 00f5  ld   $f5
              2e83 0009  ld   $09
              2e84 00ac  ld   $ac
              2e85 000b  ld   $0b
              2e86 0079  ld   $79
              2e87 00a0  ld   $a0
              2e88 0060  ld   $60
              2e89 0035  ld   $35
              2e8a 003f  ld   $3f
              2e8b 00a4  ld   $a4
              2e8c 0059  ld   $59
              2e8d 0000  ld   $00
              2e8e 00ff  ld   $ff
              2e8f 0059  ld   $59
              2e90 0001  ld   $01
              2e91 00ff  ld   $ff
              2e92 007f  ld   $7f
              2e93 0000  ld   $00
              2e94 000a  ld   $0a
              2e95 0000  ld   $00
              2e96 00fe  ld   $fe
              2e97 0000  ld   $00
              2e98 00fd  ld   $fd
              2e99 0000  ld   $00
              2e9a 00fb  ld   $fb
              2e9b 0000  ld   $00
              2e9c 00f7  ld   $f7
              2e9d 0000  ld   $00
              2e9e 0000  ld   $00
              2e9f 0000  ld   $00
              2ea0 0011  ld   $11
              2ea1 0054  ld   $54
              2ea2 0054  ld   $54
              2ea3 004c  ld   $4c
              2ea4 0020  ld   $20
              2ea5 006d  ld   $6d
              2ea6 0069  ld   $69
              2ea7 0063  ld   $63
              2ea8 0072  ld   $72
              2ea9 006f  ld   $6f
              2eaa 0063  ld   $63
              2eab 006f  ld   $6f
              2eac 006d  ld   $6d
              2ead 0070  ld   $70
              2eae 0075  ld   $75
              2eaf 0074  ld   $74
              2eb0 0065  ld   $65
              2eb1 0072  ld   $72
              2eb2 0000  ld   $00
              2eb3 00b2  ld   $b2
              2eb4 007d  ld   $7d
              2eb5 00ac  ld   $ac
              2eb6 007d  ld   $7d
              2eb7 00a6  ld   $a6
              2eb8 007d  ld   $7d
              2eb9 00b2  ld   $b2
              2eba 007d  ld   $7d
              2ebb 00ea  ld   $ea
              2ebc 007a  ld   $7a
              2ebd 00d0  ld   $d0
              2ebe 007a  ld   $7a
              2ebf 00c6  ld   $c6
              2ec0 007a  ld   $7a
              2ec1 00b4  ld   $b4
              2ec2 007a  ld   $7a
              2ec3 00a6  ld   $a6
              2ec4 007a  ld   $7a
              2ec5 0000  ld   $00
              2ec6 0000  ld   $00
              2ec7 00fc  ld   $fc
              2ec8 00ff  ld   $ff
              2ec9 00f0  ld   $f0
              2eca 00ff  ld   $ff
              2ecb 0000  ld   $00
              2ecc 0000  ld   $00
              2ecd 00f4  ld   $f4
              2ece 00ff  ld   $ff
              2ecf 00f0  ld   $f0
              2ed0 00ff  ld   $ff
              2ed1 00fc  ld   $fc
              2ed2 00ff  ld   $ff
              2ed3 00fc  ld   $fc
              2ed4 00ff  ld   $ff
              2ed5 00fc  ld   $fc
              2ed6 00ff  ld   $ff
              2ed7 0000  ld   $00
              2ed8 0000  ld   $00
              2ed9 0013  ld   $13
              2eda 0000  ld   $00
              2edb 0013  ld   $13
              2edc 0000  ld   $00
              2edd 0017  ld   $17
              2ede 0000  ld   $00
              2edf 002a  ld   $2a
              2ee0 0000  ld   $00
              2ee1 003d  ld   $3d
              2ee2 0000  ld   $00
              2ee3 0050  ld   $50
              2ee4 0000  ld   $00
              2ee5 0063  ld   $63
              2ee6 0000  ld   $00
              2ee7 0076  ld   $76
              2ee8 0000  ld   $00
              2ee9 007a  ld   $7a
              2eea 00a1  ld   $a1
              2eeb 005f  ld   $5f
              2eec 0003  ld   $03
              2eed 0033  ld   $33
              2eee 0032  ld   $32
              2eef 004b  ld   $4b
              2ef0 0000  ld   $00
              2ef1 0000  ld   $00
              2ef2 0000  ld   $00
              2ef3 00f8  ld   $f8
              2ef4 00ff  ld   $ff
              2ef5 000f  ld   $0f
              2ef6 0000  ld   $00
              2ef7 0000  ld   $00
              2ef8 0000  ld   $00
              * 5 times
              2efb fe00  bra  ac          ;+-----------------------------------+
              2efc fcfd  bra  $2efd       ;|                                   |
              2efd 1404  ld   $04,y       ;| Trampoline for page $2e00 lookups |
              2efe e068  jmp  y,$68       ;|                                   |
              2eff c218  st   [$18]       ;+-----------------------------------+
              2f00 0008  ld   $08
              2f01 0000  ld   $00
              2f02 00ff  ld   $ff
              2f03 0000  ld   $00
              2f04 0000  ld   $00
              2f05 0000  ld   $00
              2f06 00f8  ld   $f8
              2f07 00ff  ld   $ff
              2f08 000f  ld   $0f
              2f09 0000  ld   $00
              2f0a 0000  ld   $00
              2f0b 0000  ld   $00
              * 5 times
              2f0e 0008  ld   $08
              2f0f 0000  ld   $00
              2f10 00f1  ld   $f1
              2f11 00ff  ld   $ff
              2f12 0000  ld   $00
              2f13 0000  ld   $00
              2f14 00ff  ld   $ff
              2f15 0000  ld   $00
              2f16 0000  ld   $00
              2f17 0000  ld   $00
              2f18 00f8  ld   $f8
              2f19 00ff  ld   $ff
              2f1a 000f  ld   $0f
              2f1b 0000  ld   $00
              2f1c 0000  ld   $00
              2f1d 0000  ld   $00
              2f1e 00ff  ld   $ff
              2f1f 0000  ld   $00
              2f20 0000  ld   $00
              2f21 0000  ld   $00
              * 7 times
              2f26 0004  ld   $04
              2f27 0000  ld   $00
              2f28 000f  ld   $0f
              2f29 0000  ld   $00
              2f2a 0000  ld   $00
              2f2b 0000  ld   $00
              2f2c 00f1  ld   $f1
              2f2d 00ff  ld   $ff
              2f2e 0000  ld   $00
              2f2f 0000  ld   $00
              2f30 0000  ld   $00
              2f31 0000  ld   $00
              2f32 0008  ld   $08
              2f33 0000  ld   $00
              2f34 000f  ld   $0f
              2f35 0000  ld   $00
              2f36 0000  ld   $00
              2f37 0000  ld   $00
              2f38 00ff  ld   $ff
              2f39 0000  ld   $00
              2f3a 000f  ld   $0f
              2f3b 0000  ld   $00
              2f3c 0000  ld   $00
              2f3d 0000  ld   $00
              * 5 times
              2f40 0008  ld   $08
              2f41 0000  ld   $00
              2f42 00f1  ld   $f1
              2f43 00ff  ld   $ff
              2f44 0000  ld   $00
              2f45 0000  ld   $00
              2f46 0000  ld   $00
              2f47 0000  ld   $00
              2f48 00fc  ld   $fc
              2f49 00ff  ld   $ff
              2f4a 000e  ld   $0e
              2f4b 0000  ld   $00
              2f4c 0000  ld   $00
              2f4d 0000  ld   $00
              2f4e 00ff  ld   $ff
              2f4f 0000  ld   $00
              2f50 007b  ld   $7b
              2f51 00a0  ld   $a0
              2f52 0060  ld   $60
              2f53 0000  ld   $00
              2f54 0000  ld   $00
              2f55 0000  ld   $00
              * 96 times
              2fb3 007c  ld   $7c
              2fb4 00a0  ld   $a0
              2fb5 0060  ld   $60
              2fb6 0000  ld   $00
              2fb7 0000  ld   $00
              2fb8 0000  ld   $00
              * 69 times
              2ffb fe00  bra  ac          ;+-----------------------------------+
              2ffc fcfd  bra  $2ffd       ;|                                   |
              2ffd 1404  ld   $04,y       ;| Trampoline for page $2f00 lookups |
              2ffe e068  jmp  y,$68       ;|                                   |
              2fff c218  st   [$18]       ;+-----------------------------------+
              3000 0000  ld   $00
              3001 0000  ld   $00
              3002 0000  ld   $00
              * 27 times
              301b 007d  ld   $7d
              301c 00a1  ld   $a1
              301d 0027  ld   $27
              301e 0003  ld   $03
              301f 0036  ld   $36
              3020 0034  ld   $34
              3021 004b  ld   $4b
              3022 0000  ld   $00
              3023 0000  ld   $00
              3024 0000  ld   $00
              * 5 times
              3027 00ff  ld   $ff
              3028 0000  ld   $00
              3029 0000  ld   $00
              302a 0000  ld   $00
              302b 00f8  ld   $f8
              302c 00ff  ld   $ff
              302d 00ff  ld   $ff
              302e 0000  ld   $00
              302f 000f  ld   $0f
              3030 0000  ld   $00
              3031 0000  ld   $00
              3032 0000  ld   $00
              * 5 times
              3035 00f4  ld   $f4
              3036 00ff  ld   $ff
              3037 00f1  ld   $f1
              3038 00ff  ld   $ff
              3039 0000  ld   $00
              303a 0000  ld   $00
              303b 0000  ld   $00
              303c 0000  ld   $00
              303d 0008  ld   $08
              303e 0000  ld   $00
              303f 000e  ld   $0e
              3040 0000  ld   $00
              3041 0000  ld   $00
              3042 0000  ld   $00
              3043 00ff  ld   $ff
              3044 0000  ld   $00
              3045 007d  ld   $7d
              3046 00c9  ld   $c9
              3047 0037  ld   $37
              3048 0000  ld   $00
              3049 0000  ld   $00
              304a 0000  ld   $00
              * 24 times
              3060 0006  ld   $06
              3061 0052  ld   $52
              3062 004f  ld   $4f
              3063 004d  ld   $4d
              3064 0076  ld   $76
              3065 0035  ld   $35
              3066 0061  ld   $61
              3067 0000  ld   $00
              3068 0009  ld   $09
              3069 0046  ld   $46
              306a 004f  ld   $4f
              306b 0052  ld   $52
              306c 0020  ld   $20
              306d 0052  ld   $52
              306e 0045  ld   $45
              306f 0053  ld   $53
              3070 0045  ld   $45
              3071 0054  ld   $54
              3072 0000  ld   $00
              3073 000a  ld   $0a
              3074 0054  ld   $54
              3075 004f  ld   $4f
              3076 0020  ld   $20
              3077 0045  ld   $45
              3078 0058  ld   $58
              3079 0045  ld   $45
              307a 0043  ld   $43
              307b 0055  ld   $55
              307c 0054  ld   $54
              307d 0045  ld   $45
              307e 0000  ld   $00
              307f 007e  ld   $7e
              3080 00a2  ld   $a2
              3081 005e  ld   $5e
              3082 0004  ld   $04
              3083 0048  ld   $48
              3084 004f  ld   $4f
              3085 004c  ld   $4c
              3086 0044  ld   $44
              3087 0000  ld   $00
              3088 0005  ld   $05
              3089 0050  ld   $50
              308a 0052  ld   $52
              308b 0045  ld   $45
              308c 0053  ld   $53
              308d 0053  ld   $53
              308e 0000  ld   $00
              308f 0009  ld   $09
              3090 0054  ld   $54
              3091 004f  ld   $4f
              3092 0020  ld   $20
              3093 0053  ld   $53
              3094 0045  ld   $45
              3095 004c  ld   $4c
              3096 0045  ld   $45
              3097 0043  ld   $43
              3098 0054  ld   $54
              3099 0000  ld   $00
              309a 0009  ld   $09
              309b 0020  ld   $20
              309c 005b  ld   $5b
              309d 0053  ld   $53
              309e 0054  ld   $54
              309f 0041  ld   $41
              30a0 0052  ld   $52
              30a1 0054  ld   $54
              30a2 005d  ld   $5d
              30a3 0020  ld   $20
              30a4 0000  ld   $00
              30a5 0005  ld   $05
              30a6 0020  ld   $20
              30a7 005b  ld   $5b
              30a8 0041  ld   $41
              30a9 005d  ld   $5d
              30aa 0020  ld   $20
              30ab 0000  ld   $00
              30ac 000a  ld   $0a
              30ad 0020  ld   $20
              30ae 005b  ld   $5b
              30af 0041  ld   $41
              30b0 0052  ld   $52
              30b1 0052  ld   $52
              30b2 004f  ld   $4f
              30b3 0057  ld   $57
              30b4 0053  ld   $53
              30b5 005d  ld   $5d
              30b6 0020  ld   $20
              30b7 0000  ld   $00
              30b8 0070  ld   $70
              30b9 005a  ld   $5a
              30ba 000e  ld   $0e
              30bb 0039  ld   $39
              30bc 00c1  ld   $c1
              30bd 004c  ld   $4c
              30be 0020  ld   $20
              30bf 0054  ld   $54
              30c0 007a  ld   $7a
              30c1 0059  ld   $59
              30c2 00f3  ld   $f3
              30c3 005d  ld   $5d
              30c4 0038  ld   $38
              30c5 0085  ld   $85
              30c6 008c  ld   $8c
              30c7 008b  ld   $8b
              30c8 0029  ld   $29
              30c9 00c0  ld   $c0
              30ca 008f  ld   $8f
              30cb 00a2  ld   $a2
              30cc 00f8  ld   $f8
              30cd 007f  ld   $7f
              30ce 00f1  ld   $f1
              30cf 007f  ld   $7f
              30d0 00ea  ld   $ea
              30d1 007f  ld   $7f
              30d2 00de  ld   $de
              30d3 007f  ld   $7f
              30d4 00d4  ld   $d4
              30d5 007f  ld   $7f
              30d6 00ca  ld   $ca
              30d7 007f  ld   $7f
              30d8 00c2  ld   $c2
              30d9 007f  ld   $7f
              30da 00b7  ld   $b7
              30db 007f  ld   $7f
              30dc 00ae  ld   $ae
              30dd 007f  ld   $7f
              30de 00a6  ld   $a6
              30df 007f  ld   $7f
              30e0 007f  ld   $7f
              30e1 00a1  ld   $a1
              30e2 005f  ld   $5f
              30e3 0003  ld   $03
              30e4 0055  ld   $55
              30e5 0053  ld   $53
              30e6 0045  ld   $45
              30e7 0000  ld   $00
              30e8 0006  ld   $06
              30e9 0041  ld   $41
              30ea 0070  ld   $70
              30eb 0070  ld   $70
              30ec 006c  ld   $6c
              30ed 0065  ld   $65
              30ee 0031  ld   $31
              30ef 0000  ld   $00
              30f0 0007  ld   $07
              30f1 004d  ld   $4d
              30f2 0053  ld   $53
              30f3 0042  ld   $42
              30f4 0041  ld   $41
              30f5 0053  ld   $53
              30f6 0049  ld   $49
              30f7 0043  ld   $43
              30f8 0000  ld   $00
              30f9 0009  ld   $09
              30fa 0054  ld   $54
              30fb fe00  bra  ac          ;+-----------------------------------+
              30fc fcfd  bra  $30fd       ;|                                   |
              30fd 1404  ld   $04,y       ;| Trampoline for page $3000 lookups |
              30fe e068  jmp  y,$68       ;|                                   |
              30ff c218  st   [$18]       ;+-----------------------------------+
              3100 0069  ld   $69
              3101 006e  ld   $6e
              3102 0079  ld   $79
              3103 0042  ld   $42
              3104 0041  ld   $41
              3105 0053  ld   $53
              3106 0049  ld   $49
              3107 0043  ld   $43
              3108 0000  ld   $00
              3109 0006  ld   $06
              310a 0042  ld   $42
              310b 0072  ld   $72
              310c 0069  ld   $69
              310d 0063  ld   $63
              310e 006b  ld   $6b
              310f 0073  ld   $73
              3110 0000  ld   $00
              3111 0008  ld   $08
              3112 0054  ld   $54
              3113 0065  ld   $65
              3114 0074  ld   $74
              3115 0072  ld   $72
              3116 006f  ld   $6f
              3117 006e  ld   $6e
              3118 0069  ld   $69
              3119 0073  ld   $73
              311a 0000  ld   $00
              311b 0008  ld   $08
              311c 0050  ld   $50
              311d 0069  ld   $69
              311e 0063  ld   $63
              311f 0074  ld   $74
              3120 0075  ld   $75
              3121 0072  ld   $72
              3122 0065  ld   $65
              3123 0073  ld   $73
              3124 0000  ld   $00
              3125 000a  ld   $0a
              3126 004d  ld   $4d
              3127 0061  ld   $61
              3128 006e  ld   $6e
              3129 0064  ld   $64
              312a 0065  ld   $65
              312b 006c  ld   $6c
              312c 0062  ld   $62
              312d 0072  ld   $72
              312e 006f  ld   $6f
              312f 0074  ld   $74
              3130 0000  ld   $00
              3131 0005  ld   $05
              3132 0052  ld   $52
              3133 0061  ld   $61
              3134 0063  ld   $63
              3135 0065  ld   $65
              3136 0072  ld   $72
              3137 0000  ld   $00
              3138 0005  ld   $05
              3139 0053  ld   $53
              313a 006e  ld   $6e
              313b 0061  ld   $61
              313c 006b  ld   $6b
              313d 0065  ld   $65
              313e 0000  ld   $00
              313f 0006  ld   $06
              3140 004c  ld   $4c
              3141 006f  ld   $6f
              3142 0061  ld   $61
              3143 0064  ld   $64
              3144 0065  ld   $65
              3145 0072  ld   $72
              3146 0000  ld   $00
              3147 0000  ld   $00
              3148 0000  ld   $00         ;End of Core/mainmenu_v5a.gt1, size 3566
sys_ReadRomDir:
              3149 f04f  beq  .sysDir#20
              314a 1024  ld   $24,x
              314b 1600  ld   ac,y
              314c 0118  ld   [$18]
              314d a00e  suba $0e
              314e e200  jmp  y,ac
.sysDir#20:   314f 1400  ld   $00,y
              3150 0054  ld   $54
              3151 1431  ld   $31,y
              3152 e200  jmp  y,ac
              3153 1400  ld   $00,y
.sysDir#25:   3154 dc4d  st   $4d,[y,x++] ;'M'
              3155 dc61  st   $61,[y,x++] ;'a'
              3156 dc69  st   $69,[y,x++] ;'i'
              3157 dc6e  st   $6e,[y,x++] ;'n'
              3158 dc00  st   $00,[y,x++] ;'\x00'
              3159 dc00  st   $00,[y,x++] ;'\x00'
              315a dc00  st   $00,[y,x++] ;'\x00'
              315b dc00  st   $00,[y,x++] ;'\x00'
              315c 005b  ld   $5b
              315d c218  st   [$18]
              315e 0023  ld   $23
              315f 1431  ld   $31,y
              3160 e062  jmp  y,$62
              3161 c219  st   [$19]
.sysDir#39:   3162 1403  ld   $03,y
              3163 e0cb  jmp  y,$cb
              3164 00ea  ld   $ea
              3165 0200  nop              ;150 fillers
              3166 0200  nop
              3167 0200  nop
              * 150 times
              31fb fe00  bra  ac          ;+-----------------------------------+
              31fc fcfd  bra  $31fd       ;|                                   |
              31fd 1404  ld   $04,y       ;| Trampoline for page $3100 lookups |
              31fe e068  jmp  y,$68       ;|                                   |
              31ff c218  st   [$18]       ;+-----------------------------------+
              3200
